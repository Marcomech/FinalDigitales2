Extras      -Datos para el uso del GPIO (Podemos no usarlo asi y usar los que vimos en clase, pero tal vez algo sirve)

MiddleWares |(configuracion del usb)
            |-ioreq (comandos del usb)
            |-desc (descriptores)
            |-...

Drivers     |(Configuracion del resto de las cosas)
            |-core (algunas definiciones de las funciones)
            |-rcc (reloj)
            |-...

Core-Src    |(La idea es centrar todo aca)
            |-Inc (mis include donde fui juntando cosas)
            |-main (main del codigo)
            |-...



Reference Guide (cosas importantes) --> USB (cap. 23)

USB --> usa el APB1.
    explicacion USB Blocks --> p.624
    explicacion  APB1--> p.625

Programando el puerto USB (p.626)

    1. Prendiendo e incializando el USB.

    1.1 PASOS para prenderlo
    1.1.1 Activar 'register macrocell clock' y deshabilitar 'macrocell specific reset signal' usando los bits de control provistos 
    por el 'device clock management logic' (esto ultimo deberia ser lo que configuramos para el DMA)
    
    1.1.2 Prender la parte analogica del dispositivo relacionada al USB utilizando el PDWN bit en el CNTR register (requiere 
    'special handling')
        --> este bit se usa para prender las referencias de voltage interno que alimentan el 'port transceiver'. Este circuito 
        tiene un tiempo de startup definido en el datasheet. Durante este tiempo el comportamiento del dispositivo no esta defi-
        nido.
    1.1.3. Esperar el t_startup (similar a lo que hacia miguel para asegurarse que el clock se configure)
    1.1.4. Remover la condicion de reset del USB (limpiando el FRES bit en el CNTR register).
    1.1.5. Limpiar el ISTR register para remover cualquier interrupcion que haya quedado pendiente. 

    1.2. Inicializión (para poder generar interrupciones y data-transfers)
    1.2.1. Setear los registros requeridos (depende de la apliacion)
    1.2.2. Setear el 'buffer description table'

    obs. Todos los registros que no son especificos para ningun end-point se inicializan de acuerdo a la necesidad de la aplicacion

    2. USB reset (RESET interrupt)
        Cuando este evento ocurre el USB periferico (en nuestro caso la BluePill) vuelve al estado en el que se encontraba al final
        de la inicialización descripta hasta el punto 3. En este momento la comunicación se deshabilita en todos los endpoint registers.
    2.1. Setear el bit de la Enable Function (EF) del USB_DADDR e inicializar el EP0R register y su packet buffers relacionados.
    2.2. El host le asignara una 'unique address' a nuestro dispositivo que tiene que ser escrita en el ADD[6:0] del USB_DADDR
    y configura cualquier otro end-point necesario.
    
    obs. Cuando se recibe un RESET, el software de aplicacion, osea la BluePill, es responsable de rehabilitar el default endpoint
    de la USB function a 0. Esto debe ocurrir dentro de los 10ms siguientes al final de la secuencia de reseteo que triggereo la
    interrupcion. Es decir, tenemosque programar que pasa en caso de una secuencia de reseteo para que el puerto USB vuelva a ser
    habilitado y la comuniacion continue. 
    
    3. Estructura del sistema 

    3.1. Reloj. 
    La logica del periferico USB usa un clock dedicado. La frecuencia del mismo esta fijada por los estandares de USB en 48MHz. 
    Este reloj puede ser distinto del usado para la interface del bus APB1. Disitntas configuraciones de clock pueden ser utilizadas.
    obs. La frecuencai del clock del APB1 debe ser, si o si, mayor a 8Mhz.


    3.2. Buffers.
        Hay dos buffers por cada endpoint. Uno guarda la data recibida mientras que el otro guarda data a transmitir. El acceso
        a esta memoria se realiza a travez del 'packet buffer interface block' que envia un pedido de acceso a la memoria y espera
        el 'ok'. El microcontrolador resuelve posibles conflictos usando medio ciclo del APB1 para darle acceso al micro y el otro
        medio ciclo para el acceso del periferico USB.
    
    3.2.1. Ubicacion y caracteristicas
        Los buffers pueden ser ubicados en cualquier lugar del paquete de memoria ya que su tamaño y ubicacion estan detallados
        en el buffer description table, que tambien esta ubicada en el paquete de memoria indicado en el registro USB_BTABLE.
        Cada entrada de la tabla esta asociada con un endpoint register y esta compuesta por 4 palabras de 16-bits de manera que 
        la 'table start address' debe estar alineada con un 8-byte boundary (los tres bits mas bajos de la USB_BTABLE son siempre
        '000')

    obs1. Si el endpoint es unidireccional y no es ni asincronico ni double-buffered solo se necesita un packet-buffer.
    obs2. Cada buffer se usa para transmision o recepcion, empezando desde abajo. Si la informacion recibida o a enviar es mas 
    grande que el tamaño alocado al buffer la misma sera copiada solamente hasta el ultimo caracter que entre.


    4. Endpoint initialization. (pasos)

    4.1. Escribir los valores apropiados en ADDRn_TX/ADDRn_RX para que los perifericos del USB sepan donde encontrar la data que
    sera transmitida y para que la data recibida pueda ser buffereada.

    4.2. Se debe setear el EP_TYPE bit del USB_EPnR de acuerdo al tipo de endpoint que se usara. El EP_KIND bit se habilita en
    caso de requerirse algun feature especial.

    4.3.a. Del lado del transmisor se debe habilitar el bit STAT_TX del USB_EPnR y se debe inicializar COUNTn_TX.
    4.3.b. Del lado del receptor se usa el bit STAT_RX y COUNTn_RX debe ser escrito con el tamaño del buffer alocado usando los
    campos BL_SIZE y NUM_BLOCK.
    obs1. endpoints unidireccionales solo requieren la inicializacion del lado correspondiente.
    obs2. Una vez establecidos ADDRn_TX, ADDRn_RX, COUNTn_TX y COUNTn_RX NO deben ser modificados por el software.

    4.4. Cuando la operacion de intercambio de data se termina salta la interrupcion CTR, avisando de la posibilidad de acceder
    nuevamente a estos registros antes de la siguiente operacion.

    5. Data transmission y Data reception.

    5.1. IN packets (data transmission)

    5.1.1. Al recibir un IN token packet, si la address recibida coincide con la configurada y es valida el periferico USB accede
    a los contenidos de ADDRn_TX y COUNTn_TX especificados en el buffer descriptor table entry del endpoint correspondiente.
    5.1.2. Los contenidos de estas direcciones se guardan en registros de 16-bits internos, inaccesibles por software.
    5.1.3. Se accede nuevamente a los paquetes, se lee la primer palabra a ser transmitida y se empieza a mandar DATA0 o DATA1 PID
    de acuerdo con el bit DTOG_TX del USB_EPnR.
    5.1.4. Cuando el PID se completa, el primer byte de la palabra, leida de la memoria buffer, se carga en el output shift para 
    ser transmitida por el USB bus. 
    5.1.5. Al terminar la transmision de datos, se envia el CRC computado (creo que es un bit de control), en caso de algun error
    se realiza un NAK o STALL handshake, de acuerdo con el STAT_TX bit.

    obs. El ADDR interno se usa como puntero a la memoria buffer mientras que COUNT se utiliza para contar el numero de bytes que
    falta transmitir. Cada palabra leida del buffer se transmite por el USB bus empezando por el byte menos significativo. El 
    buffer de transmision es leido desde la direccion de ADDRn_TX por COUNTn_TX/2 palabras. Si hay un paquete a transmitir compuesto
    por un numero impar de de bytes, solo la mitad mas baja de la ultima palabra accesible sera usada.

    5.1.6. Recibiendo el ACK (acknowledgment) del Host. Actualizacion del USB_EPnR (PASOS)
    5.1.6.a. Se mueve el bit DTOG_TX.
    5.1.6.b. El endpoint se vuelve invalido al settear STAT_TX = '10'(NAK) y se setea el bit CTR_TX.
    5.1.6.c. El software de aplicacion debe identificar el endpoint que pide la atencion del microcontrolador accediendo a los
    bits EP_ID y DIR del USB_ISTR.
    5.1.6.d. Se limpia el bit de interrupcion CTR_TX.
    5.1.6.e. Se prepara un nuevo buffer de data a transmitir. .
    5.1.6.f. Se coloca STAT_TX = '11' (VALID) para rehabilitar la transmision. 

    OBS. Es OBLIGATORIO realizar las acciones mencionadas en el orden indicado para evitar perder la notificacion de un segundo IN
    transaction addreseado al mismo endpoint que pueda ocurrir inmediatamente despues de una interrupcion CTR.

    5.2. OUT and SETUP packets (data reception)

        La mayoria de las cosas se manejan de la misma manera que los IN packets. A continuacion se listan las diferencias.

    5.2.1. Al recibir un OUT/SETUP PID si la address matchea con un endpoint valido el USB periferico accede a los contendiso de
    ADDRn_RX y COUNTn_RX dentro del buffer descriptor table.
    5.2.2. ADDRn_RX se guarda en el ADDR interno, pero COUNT se resetea y los valores de BL_SIZE y NUM_BLOCK (sacados de COUNTn_RX)
    son utilizados para inicializar BUF_COUNT (un contador interno de 16-bits usado para checkear el buffer overrun condition).
    5.2.3. Los bytes recibidos por el USB periferico son enpaquetados en palabras (primer byte recibido = menos significativo)
    y luego transferidos al buffer packet indicado en el ADDR, mientras que BUF_COUNT decrece y COUNT incrementa con cada byte 
    transmitido.
    5.2.4. Al finalizar, se confirma el CRC recibido, y en caso de no haber errores, se envia un ACK handshake packet al host.

    5.2.5. Errores
    5.2.5.a. Si hay errores, se copian las palabras en el buffer de cualquier manera (al menos hasta el error) pero no se envia el 
    ACK y se setea el ERR bit del USB_ISTR. No suele ser necesaria una accion de software en estos casos.
    5.2.5.b. En caso de una address endpoint no valida, se envian los handshake NAK o STALL, de acuerdo con el bit STAT_RX del 
    USB_EPnR y no se escribe nada en los buffers de recepcion.
    5.2.5.c. El periferico USB nunca escribe mas alla del area de memoria alocada al buffer (se verifica con el BL_SIZE y el NUM_BLOCK).
    Si hay overrrun, se manda un STALL handshake pero no se generan interrupciones y la transaccion se considera fallida.

    5.2.6. Si la transaccion se considera exitosa, el COUNT interno se copia en el COUNTn_RX dentro del buffer description table 
    entry, sin tocar los campos BL_SIZE y NUM_BLOCK, que normalmente no requieren ser re-escritos.

    5.2.7. Actualizacion del USB_EPnR
    5.2.7.a. Se togglea el bit DTOG_RX
    5.2.7.b. Se setea el STAT_RX = '10' (NAK) y se setea el bit CTR_RX
    
    obs. Si hubo un error en la transaccion las acciones mencionadas hasta ahora no ocurrren.

    5.2.7.c. El software debe identificar el endpoint, mediante los bits EP_ID y DIR del USB_ISTR
    5.2.7.d. El evento CTR_RX es resuelto primero determinando el tipo de transaccion (SETUP bit del USB_EPnR), luego el software
    debe limpiar el flag de interrupcion y obtener el numero de bytes recibidos utilizando el COUNTn_RX dentro del buffer
    descriptor table entry relacionado al endpoint que esta siendo procesado. 
    5.2.7.e. Luego de procesar la data, hay que setear el bit STAT_RX = '11' (VALID)
    
    obs. Mientras el STAT_RX = '10' cualquier OUT request sera NAKed (not-ack). El host seguira intentando la transaccion hasta que
    la misma sea exitosa.

    OBS. Es OBLIGATORIO que la secuencia de operacion sea realizada como se la listo.


    6. Control Transfers

    Los control transfers estan conformados por transacciones tipo SETUP, seguidos por 0 o mas etapas de datos (todas en la
    misma direccion), seguido por una etapa de status (zero-byte transfer en la direccion opuesta). Este tipo de transacciones
    son manejadas unicamente por control endpoints y son muy similares a las OUT, excepto por los valores de los bits
    DTOG_TX y DTOG_RX que son seteados en '1' y '0' respectivamente para inicializar la transferencia de control. 
    Tanto STAT_RX como STAT_TX son seteados en '10' (NAK) para dejar que el software decida si las siguientes transacciones 
    seran IN o OUT.

    Un control endpoint debe verificar el SETUP bit del USB_EPnR en cada evento CTR_RX para distinguir transacciones OUT normales
    de las de SETUP. Un dispositivo USB puede determinar el numero y la direccion de la data interpretando la informacion transmitida
    en el SETUP stage y debe STALLear en caso de errores. Para hacer esto, en todas las etapas de datos (excepto la ultima) una 
    direccion o utilizada deberia ser seteada en STALL para que si el host revierte la direccion de transmision antes de tiempo se
    encuentre con un STALL status. Al habilitar el ultimo evento de data, la direccion opuesta deberia ser seteada en NAK para que 
    si el host reversea la direccion de transmision inmediatamente se quede esperando a la complecion de la operacion de control.
    Si la operacion de control es exitosa el software cambiara el estado de NAK a VALID (sino, a STALL). Al mismo tiempo, si el 
    status stage sera un OUT, se debe setear el bit STATUS_out (EP_KIND del USB_EPnR). Cuando la transaccion de status es atendida
    la aplicacion limpia el STATUS_OUT bit y setea STAT_RX en VALID y STAT_TX en NAK.

    Las especificaciones de USB no permiten que un SETUP packet sea contestada con algo que no sea un ACK handshake.

    Cuando los bits STAT_RX son seteados a '01' (STALL0) o '10' (NAK) y se recibe un SETUP token, el USB acepta la data y realiza
    los data transfers requeridos para luego enviar el ACK. Si el endpoint tiene un CTR_RX previo, no acknowledgeado por la 
    aplicaicon (no resuelto) el USB descarta el SETUP y no responde con ningun handshake sin importar su estado, simulando un error
    de recepcion y obliganod al host a enviar un nuevo token de SETUP. Esto es para evitar perder la notificacion de una transaccion
    de SETUP addreseada al mismo endpoint inmediatamente luego de una transaccion que triggereo un CTR_RX.








    
