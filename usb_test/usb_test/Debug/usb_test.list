
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006898  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080069a4  080069a4  000169a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a10  08006a10  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08006a10  08006a10  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a10  08006a10  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08006a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  08006b70  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08006b70  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb0d  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c8  00000000  00000000  0002fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  00032e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a8  00000000  00000000  00033690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8f7  00000000  00000000  0004c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848e1  00000000  00000000  0005902f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000dd964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	0800698c 	.word	0x0800698c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	0800698c 	.word	0x0800698c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f94c 	bl	80003ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f838 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f890 	bl	800027c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 f830 	bl	80061c0 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	keyboardhid.KeyCode1 = 0x0B;
 8000160:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <main+0x74>)
 8000162:	220b      	movs	r2, #11
 8000164:	709a      	strb	r2, [r3, #2]
	keyboardhid.KeyCode2 = 0x12;
 8000166:	4b16      	ldr	r3, [pc, #88]	; (80001c0 <main+0x74>)
 8000168:	2212      	movs	r2, #18
 800016a:	70da      	strb	r2, [r3, #3]
	keyboardhid.KeyCode3 = 0x0F;
 800016c:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <main+0x74>)
 800016e:	220f      	movs	r2, #15
 8000170:	711a      	strb	r2, [r3, #4]
	keyboardhid.KeyCode4 = 0x04;
 8000172:	4b13      	ldr	r3, [pc, #76]	; (80001c0 <main+0x74>)
 8000174:	2204      	movs	r2, #4
 8000176:	715a      	strb	r2, [r3, #5]
	keyboardhid.KeyCode5 = 0x04;
 8000178:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <main+0x74>)
 800017a:	2204      	movs	r2, #4
 800017c:	719a      	strb	r2, [r3, #6]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800017e:	2208      	movs	r2, #8
 8000180:	490f      	ldr	r1, [pc, #60]	; (80001c0 <main+0x74>)
 8000182:	4810      	ldr	r0, [pc, #64]	; (80001c4 <main+0x78>)
 8000184:	f004 ff2c 	bl	8004fe0 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000188:	2032      	movs	r0, #50	; 0x32
 800018a:	f000 f991 	bl	80004b0 <HAL_Delay>
	keyboardhid.KeyCode1 = 0x00;
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <main+0x74>)
 8000190:	2200      	movs	r2, #0
 8000192:	709a      	strb	r2, [r3, #2]
	keyboardhid.KeyCode2 = 0x00;
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <main+0x74>)
 8000196:	2200      	movs	r2, #0
 8000198:	70da      	strb	r2, [r3, #3]
	keyboardhid.KeyCode3 = 0x00;
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <main+0x74>)
 800019c:	2200      	movs	r2, #0
 800019e:	711a      	strb	r2, [r3, #4]
	keyboardhid.KeyCode4 = 0x00;
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <main+0x74>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	715a      	strb	r2, [r3, #5]
	keyboardhid.KeyCode5 = 0x00;
 80001a6:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <main+0x74>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	719a      	strb	r2, [r3, #6]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80001ac:	2208      	movs	r2, #8
 80001ae:	4904      	ldr	r1, [pc, #16]	; (80001c0 <main+0x74>)
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <main+0x78>)
 80001b2:	f004 ff15 	bl	8004fe0 <USBD_HID_SendReport>
	HAL_Delay(1000);
 80001b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ba:	f000 f979 	bl	80004b0 <HAL_Delay>
	keyboardhid.KeyCode1 = 0x0B;
 80001be:	e7cf      	b.n	8000160 <main+0x14>
 80001c0:	20000174 	.word	0x20000174
 80001c4:	20000198 	.word	0x20000198

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f006 fbd0 	bl	800697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f001 ffd0 	bl	80021c4 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022a:	f000 f849 	bl	80002c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fa3a 	bl	80026c4 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 f833 	bl	80002c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800025a:	2310      	movs	r3, #16
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fb89 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000270:	f000 f826 	bl	80002c0 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3750      	adds	r7, #80	; 0x50
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_GPIO_Init+0x40>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <MX_GPIO_Init+0x40>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <MX_GPIO_Init+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0320 	and.w	r3, r3, #32
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MX_GPIO_Init+0x40>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <MX_GPIO_Init+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c4:	b672      	cpsid	i
}
 80002c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <Error_Handler+0x8>
	...

080002cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <HAL_MspInit+0x5c>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a14      	ldr	r2, [pc, #80]	; (8000328 <HAL_MspInit+0x5c>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <HAL_MspInit+0x5c>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
 80002e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <HAL_MspInit+0x5c>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <HAL_MspInit+0x5c>)
 80002f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f4:	61d3      	str	r3, [r2, #28]
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <HAL_MspInit+0x5c>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <HAL_MspInit+0x60>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <HAL_MspInit+0x60>)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	40010000 	.word	0x40010000

08000330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <NMI_Handler+0x4>

08000336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <HardFault_Handler+0x4>

0800033c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <MemManage_Handler+0x4>

08000342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <BusFault_Handler+0x4>

08000348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>

0800034e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr

0800035a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000376:	f000 f87f 	bl	8000478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000386:	f000 fae9 	bl	800095c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	2000065c 	.word	0x2000065c

08000394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a0:	f7ff fff8 	bl	8000394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003a6:	490c      	ldr	r1, [pc, #48]	; (80003d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003bc:	4c09      	ldr	r4, [pc, #36]	; (80003e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ca:	f006 fab3 	bl	8006934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff febd 	bl	800014c <main>
  bx lr
 80003d2:	4770      	bx	lr
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80003dc:	08006a18 	.word	0x08006a18
  ldr r2, =_sbss
 80003e0:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80003e4:	2000094c 	.word	0x2000094c

080003e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_2_IRQHandler>
	...

080003ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <HAL_Init+0x28>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_Init+0x28>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003fc:	2003      	movs	r0, #3
 80003fe:	f000 f947 	bl	8000690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f808 	bl	8000418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000408:	f7ff ff60 	bl	80002cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040c:	2300      	movs	r3, #0
}
 800040e:	4618      	mov	r0, r3
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40022000 	.word	0x40022000

08000418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_InitTick+0x54>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_InitTick+0x58>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4619      	mov	r1, r3
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000432:	fbb2 f3f3 	udiv	r3, r2, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f000 f95f 	bl	80006fa <HAL_SYSTICK_Config>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000442:	2301      	movs	r3, #1
 8000444:	e00e      	b.n	8000464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b0f      	cmp	r3, #15
 800044a:	d80a      	bhi.n	8000462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800044c:	2200      	movs	r2, #0
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	f04f 30ff 	mov.w	r0, #4294967295
 8000454:	f000 f927 	bl	80006a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <HAL_InitTick+0x5c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800045e:	2300      	movs	r3, #0
 8000460:	e000      	b.n	8000464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000462:	2301      	movs	r3, #1
}
 8000464:	4618      	mov	r0, r3
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000000 	.word	0x20000000
 8000470:	20000008 	.word	0x20000008
 8000474:	20000004 	.word	0x20000004

08000478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_IncTick+0x1c>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_IncTick+0x20>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4413      	add	r3, r2
 8000488:	4a03      	ldr	r2, [pc, #12]	; (8000498 <HAL_IncTick+0x20>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000008 	.word	0x20000008
 8000498:	20000194 	.word	0x20000194

0800049c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return uwTick;
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <HAL_GetTick+0x10>)
 80004a2:	681b      	ldr	r3, [r3, #0]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	20000194 	.word	0x20000194

080004b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004b8:	f7ff fff0 	bl	800049c <HAL_GetTick>
 80004bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c8:	d005      	beq.n	80004d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_Delay+0x44>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004d6:	bf00      	nop
 80004d8:	f7ff ffe0 	bl	800049c <HAL_GetTick>
 80004dc:	4602      	mov	r2, r0
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d8f7      	bhi.n	80004d8 <HAL_Delay+0x28>
  {
  }
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000008 	.word	0x20000008

080004f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f003 0307 	and.w	r3, r3, #7
 8000506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <__NVIC_SetPriorityGrouping+0x44>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800052a:	4a04      	ldr	r2, [pc, #16]	; (800053c <__NVIC_SetPriorityGrouping+0x44>)
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	60d3      	str	r3, [r2, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <__NVIC_GetPriorityGrouping+0x18>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	f003 0307 	and.w	r3, r3, #7
}
 800054e:	4618      	mov	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	db0b      	blt.n	8000586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f003 021f 	and.w	r2, r3, #31
 8000574:	4906      	ldr	r1, [pc, #24]	; (8000590 <__NVIC_EnableIRQ+0x34>)
 8000576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057a:	095b      	lsrs	r3, r3, #5
 800057c:	2001      	movs	r0, #1
 800057e:	fa00 f202 	lsl.w	r2, r0, r2
 8000582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100

08000594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db0a      	blt.n	80005be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	490c      	ldr	r1, [pc, #48]	; (80005e0 <__NVIC_SetPriority+0x4c>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	0112      	lsls	r2, r2, #4
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	440b      	add	r3, r1
 80005b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005bc:	e00a      	b.n	80005d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4908      	ldr	r1, [pc, #32]	; (80005e4 <__NVIC_SetPriority+0x50>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	3b04      	subs	r3, #4
 80005cc:	0112      	lsls	r2, r2, #4
 80005ce:	b2d2      	uxtb	r2, r2
 80005d0:	440b      	add	r3, r1
 80005d2:	761a      	strb	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e100 	.word	0xe000e100
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	f1c3 0307 	rsb	r3, r3, #7
 8000602:	2b04      	cmp	r3, #4
 8000604:	bf28      	it	cs
 8000606:	2304      	movcs	r3, #4
 8000608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3304      	adds	r3, #4
 800060e:	2b06      	cmp	r3, #6
 8000610:	d902      	bls.n	8000618 <NVIC_EncodePriority+0x30>
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3b03      	subs	r3, #3
 8000616:	e000      	b.n	800061a <NVIC_EncodePriority+0x32>
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	f04f 32ff 	mov.w	r2, #4294967295
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	43da      	mvns	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	401a      	ands	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000630:	f04f 31ff 	mov.w	r1, #4294967295
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43d9      	mvns	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	4313      	orrs	r3, r2
         );
}
 8000642:	4618      	mov	r0, r3
 8000644:	3724      	adds	r7, #36	; 0x24
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800065c:	d301      	bcc.n	8000662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2301      	movs	r3, #1
 8000660:	e00f      	b.n	8000682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <SysTick_Config+0x40>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800066a:	210f      	movs	r1, #15
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f7ff ff90 	bl	8000594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <SysTick_Config+0x40>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <SysTick_Config+0x40>)
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	e000e010 	.word	0xe000e010

08000690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff2d 	bl	80004f8 <__NVIC_SetPriorityGrouping>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006b8:	f7ff ff42 	bl	8000540 <__NVIC_GetPriorityGrouping>
 80006bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	6978      	ldr	r0, [r7, #20]
 80006c4:	f7ff ff90 	bl	80005e8 <NVIC_EncodePriority>
 80006c8:	4602      	mov	r2, r0
 80006ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff5f 	bl	8000594 <__NVIC_SetPriority>
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff35 	bl	800055c <__NVIC_EnableIRQ>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ffa2 	bl	800064c <SysTick_Config>
 8000708:	4603      	mov	r3, r0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000714:	b08b      	sub	sp, #44	; 0x2c
 8000716:	af06      	add	r7, sp, #24
 8000718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e0f1      	b.n	8000908 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f005 fe75 	bl	8006428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2203      	movs	r2, #3
 8000742:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f9f2 	bl	8002b34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	687e      	ldr	r6, [r7, #4]
 8000758:	466d      	mov	r5, sp
 800075a:	f106 0410 	add.w	r4, r6, #16
 800075e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	602b      	str	r3, [r5, #0]
 8000766:	1d33      	adds	r3, r6, #4
 8000768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800076a:	6838      	ldr	r0, [r7, #0]
 800076c:	f002 f9bc 	bl	8002ae8 <USB_CoreInit>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2202      	movs	r2, #2
 800077a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e0c2      	b.n	8000908 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f002 f9ed 	bl	8002b68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e040      	b.n	8000816 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	440b      	add	r3, r1
 80007a4:	3301      	adds	r3, #1
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	440b      	add	r3, r1
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	440b      	add	r3, r1
 80007ce:	3303      	adds	r3, #3
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	3338      	adds	r3, #56	; 0x38
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	333c      	adds	r3, #60	; 0x3c
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3340      	adds	r3, #64	; 0x40
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3301      	adds	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	d3b9      	bcc.n	8000794 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e044      	b.n	80008b0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800084e:	7bfa      	ldrb	r2, [r7, #15]
 8000850:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000852:	7bfa      	ldrb	r2, [r7, #15]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	440b      	add	r3, r1
 8000860:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3b5      	bcc.n	8000826 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	687e      	ldr	r6, [r7, #4]
 80008c2:	466d      	mov	r5, sp
 80008c4:	f106 0410 	add.w	r4, r6, #16
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	602b      	str	r3, [r5, #0]
 80008d0:	1d33      	adds	r3, r6, #4
 80008d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f002 f953 	bl	8002b80 <USB_DevInit>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d005      	beq.n	80008ec <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00d      	b.n	8000908 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f004 f96f 	bl	8004be4 <USB_DevDisconnect>

  return HAL_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000910 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800091e:	2b01      	cmp	r3, #1
 8000920:	d101      	bne.n	8000926 <HAL_PCD_Start+0x16>
 8000922:	2302      	movs	r3, #2
 8000924:	e016      	b.n	8000954 <HAL_PCD_Start+0x44>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f002 f8e8 	bl	8002b08 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000938:	2101      	movs	r1, #1
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f005 ffc3 	bl	80068c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f004 f943 	bl	8004bd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f004 f945 	bl	8004bf8 <USB_ReadInterrupts>
 800096e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fb06 	bl	8000f8c <PCD_EP_ISR_Handler>

    return;
 8000980:	e11b      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000988:	2b00      	cmp	r3, #0
 800098a:	d013      	beq.n	80009b4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000994:	b29a      	uxth	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800099e:	b292      	uxth	r2, r2
 80009a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f005 fdba 	bl	800651e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009aa:	2100      	movs	r1, #0
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f907 	bl	8000bc0 <HAL_PCD_SetAddress>

    return;
 80009b2:	e102      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00c      	beq.n	80009d8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009d0:	b292      	uxth	r2, r2
 80009d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009d6:	e0f0      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00c      	beq.n	80009fc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009f4:	b292      	uxth	r2, r2
 80009f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009fa:	e0de      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d027      	beq.n	8000a56 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0204 	bic.w	r2, r2, #4
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0208 	bic.w	r2, r2, #8
 8000a30:	b292      	uxth	r2, r2
 8000a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f005 fdaa 	bl	8006590 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a54:	e0b1      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 8085 	beq.w	8000b6c <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	77fb      	strb	r3, [r7, #31]
 8000a66:	e011      	b.n	8000a8c <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	7ffb      	ldrb	r3, [r7, #31]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	441a      	add	r2, r3
 8000a74:	7ffb      	ldrb	r3, [r7, #31]
 8000a76:	8812      	ldrh	r2, [r2, #0]
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	f107 0120 	add.w	r1, r7, #32
 8000a80:	440b      	add	r3, r1
 8000a82:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000a86:	7ffb      	ldrb	r3, [r7, #31]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	77fb      	strb	r3, [r7, #31]
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
 8000a8e:	2b07      	cmp	r3, #7
 8000a90:	d9ea      	bls.n	8000a68 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	b292      	uxth	r2, r2
 8000abe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ac2:	bf00      	nop
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f6      	beq.n	8000ac4 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	77fb      	strb	r3, [r7, #31]
 8000af2:	e010      	b.n	8000b16 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000af4:	7ffb      	ldrb	r3, [r7, #31]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	4611      	mov	r1, r2
 8000afc:	7ffa      	ldrb	r2, [r7, #31]
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	440a      	add	r2, r1
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	f107 0120 	add.w	r1, r7, #32
 8000b08:	440b      	add	r3, r1
 8000b0a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000b0e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b10:	7ffb      	ldrb	r3, [r7, #31]
 8000b12:	3301      	adds	r3, #1
 8000b14:	77fb      	strb	r3, [r7, #31]
 8000b16:	7ffb      	ldrb	r3, [r7, #31]
 8000b18:	2b07      	cmp	r3, #7
 8000b1a:	d9eb      	bls.n	8000af4 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0208 	orr.w	r2, r2, #8
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b46:	b292      	uxth	r2, r2
 8000b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f042 0204 	orr.w	r2, r2, #4
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f005 fcf9 	bl	800655c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b6a:	e026      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00f      	beq.n	8000b96 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b88:	b292      	uxth	r2, r2
 8000b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f005 fcb7 	bl	8006502 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b94:	e011      	b.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00c      	beq.n	8000bba <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000bb8:	bf00      	nop
  }
}
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d101      	bne.n	8000bda <HAL_PCD_SetAddress+0x1a>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e013      	b.n	8000c02 <HAL_PCD_SetAddress+0x42>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	78fa      	ldrb	r2, [r7, #3]
 8000be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	78fa      	ldrb	r2, [r7, #3]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 ffd9 	bl	8004baa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	4608      	mov	r0, r1
 8000c14:	4611      	mov	r1, r2
 8000c16:	461a      	mov	r2, r3
 8000c18:	4603      	mov	r3, r0
 8000c1a:	70fb      	strb	r3, [r7, #3]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	803b      	strh	r3, [r7, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da0e      	bge.n	8000c4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	705a      	strb	r2, [r3, #1]
 8000c4c:	e00e      	b.n	8000c6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f003 0207 	and.w	r2, r3, #7
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c78:	883a      	ldrh	r2, [r7, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	78ba      	ldrb	r2, [r7, #2]
 8000c82:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c84:	78bb      	ldrb	r3, [r7, #2]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d102      	bne.n	8000c90 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <HAL_PCD_EP_Open+0x94>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e00e      	b.n	8000cbc <HAL_PCD_EP_Open+0xb2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 ff87 	bl	8002bc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000cba:	7afb      	ldrb	r3, [r7, #11]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da0e      	bge.n	8000cf6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	705a      	strb	r2, [r3, #1]
 8000cf4:	e00e      	b.n	8000d14 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f003 0207 	and.w	r2, r3, #7
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2200      	movs	r2, #0
 8000d12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <HAL_PCD_EP_Close+0x6a>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e00e      	b.n	8000d4c <HAL_PCD_EP_Close+0x88>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68f9      	ldr	r1, [r7, #12]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 faff 	bl	8003340 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	460b      	mov	r3, r1
 8000d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	f003 0207 	and.w	r2, r3, #7
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2200      	movs	r2, #0
 8000d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6979      	ldr	r1, [r7, #20]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fcb6 	bl	8003718 <USB_EPStartXfer>

  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6979      	ldr	r1, [r7, #20]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fc7f 	bl	8003718 <USB_EPStartXfer>

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	f003 0207 	and.w	r2, r3, #7
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d901      	bls.n	8000e42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e04c      	b.n	8000edc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da0e      	bge.n	8000e68 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	705a      	strb	r2, [r3, #1]
 8000e66:	e00c      	b.n	8000e82 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2201      	movs	r2, #1
 8000e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_PCD_EP_SetStall+0x7e>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e01c      	b.n	8000edc <HAL_PCD_EP_SetStall+0xb8>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68f9      	ldr	r1, [r7, #12]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fd7d 	bl	80049b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d108      	bne.n	8000ed2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4610      	mov	r0, r2
 8000ece:	f003 fea2 	bl	8004c16 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 020f 	and.w	r2, r3, #15
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d901      	bls.n	8000f02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e040      	b.n	8000f84 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da0e      	bge.n	8000f28 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	705a      	strb	r2, [r3, #1]
 8000f26:	e00e      	b.n	8000f46 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	f003 0207 	and.w	r2, r3, #7
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d101      	bne.n	8000f66 <HAL_PCD_EP_ClrStall+0x82>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e00e      	b.n	8000f84 <HAL_PCD_EP_ClrStall+0xa0>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68f9      	ldr	r1, [r7, #12]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fd6b 	bl	8004a50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b096      	sub	sp, #88	; 0x58
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f94:	e3bf      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000fb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 8179 	bne.w	80012ac <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d152      	bne.n	800106c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd6:	81fb      	strh	r3, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3328      	adds	r3, #40	; 0x28
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	3302      	adds	r3, #2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	4413      	add	r3, r2
 800100e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800101a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800101c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	441a      	add	r2, r3
 8001026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001028:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800102a:	2100      	movs	r1, #0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f005 fa4e 	bl	80064ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 836b 	beq.w	8001716 <PCD_EP_ISR_Handler+0x78a>
 8001040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	f040 8366 	bne.w	8001716 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800106a:	e354      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800107e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001086:	2b00      	cmp	r3, #0
 8001088:	d034      	beq.n	80010f4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	3306      	adds	r3, #6
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80010c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f003 fdf4 	bl	8004cb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010da:	4013      	ands	r3, r2
 80010dc:	823b      	strh	r3, [r7, #16]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	8a3a      	ldrh	r2, [r7, #16]
 80010e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010e8:	b292      	uxth	r2, r2
 80010ea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f005 f9c1 	bl	8006474 <HAL_PCD_SetupStageCallback>
 80010f2:	e310      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f280 830c 	bge.w	8001716 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29a      	uxth	r2, r3
 8001106:	f640 738f 	movw	r3, #3983	; 0xf8f
 800110a:	4013      	ands	r3, r2
 800110c:	83fb      	strh	r3, [r7, #30]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	8bfa      	ldrh	r2, [r7, #30]
 8001114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001118:	b292      	uxth	r2, r2
 800111a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	3306      	adds	r3, #6
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4413      	add	r3, r2
 800113a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001146:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d019      	beq.n	8001184 <PCD_EP_ISR_Handler+0x1f8>
 8001150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d015      	beq.n	8001184 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800115e:	6959      	ldr	r1, [r3, #20]
 8001160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001162:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001166:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001168:	b29b      	uxth	r3, r3
 800116a:	f003 fda4 	bl	8004cb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800116e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	441a      	add	r2, r3
 8001178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f005 f98a 	bl	8006498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800118e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 82bd 	bne.w	8001716 <PCD_EP_ISR_Handler+0x78a>
 800119c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80011a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80011a8:	f000 82b5 	beq.w	8001716 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4413      	add	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	801a      	strh	r2, [r3, #0]
 80011dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b3e      	cmp	r3, #62	; 0x3e
 80011e2:	d91d      	bls.n	8001220 <PCD_EP_ISR_Handler+0x294>
 80011e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	095b      	lsrs	r3, r3, #5
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
 80011ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <PCD_EP_ISR_Handler+0x272>
 80011f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fa:	3b01      	subs	r3, #1
 80011fc:	647b      	str	r3, [r7, #68]	; 0x44
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001206:	b29b      	uxth	r3, r3
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	b29b      	uxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001218:	b29a      	uxth	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	801a      	strh	r2, [r3, #0]
 800121e:	e026      	b.n	800126e <PCD_EP_ISR_Handler+0x2e2>
 8001220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <PCD_EP_ISR_Handler+0x2b2>
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001236:	b29a      	uxth	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	801a      	strh	r2, [r3, #0]
 800123c:	e017      	b.n	800126e <PCD_EP_ISR_Handler+0x2e2>
 800123e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
 8001246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <PCD_EP_ISR_Handler+0x2cc>
 8001252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001254:	3301      	adds	r3, #1
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29a      	uxth	r2, r3
 800125e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001260:	b29b      	uxth	r3, r3
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	b29b      	uxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b29a      	uxth	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800127a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800127e:	827b      	strh	r3, [r7, #18]
 8001280:	8a7b      	ldrh	r3, [r7, #18]
 8001282:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001286:	827b      	strh	r3, [r7, #18]
 8001288:	8a7b      	ldrh	r3, [r7, #18]
 800128a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800128e:	827b      	strh	r3, [r7, #18]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	8a7b      	ldrh	r3, [r7, #18]
 8001296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800129a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800129e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	8013      	strh	r3, [r2, #0]
 80012aa:	e234      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f280 80fc 	bge.w	80014c2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012e0:	4013      	ands	r3, r2
 80012e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80012f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012fc:	b292      	uxth	r2, r2
 80012fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001300:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001318:	7b1b      	ldrb	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d125      	bne.n	800136a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	3306      	adds	r3, #6
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	4413      	add	r3, r2
 800133c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001346:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800134a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8092 	beq.w	8001478 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135a:	6959      	ldr	r1, [r3, #20]
 800135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135e:	88da      	ldrh	r2, [r3, #6]
 8001360:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001364:	f003 fca7 	bl	8004cb6 <USB_ReadPMA>
 8001368:	e086      	b.n	8001478 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136c:	78db      	ldrb	r3, [r3, #3]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d10a      	bne.n	8001388 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001372:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001376:	461a      	mov	r2, r3
 8001378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f9d9 	bl	8001732 <HAL_PCD_EP_DB_Receive>
 8001380:	4603      	mov	r3, r0
 8001382:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001386:	e077      	b.n	8001478 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800139e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	441a      	add	r2, r3
 80013b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	3302      	adds	r3, #2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	4413      	add	r3, r2
 8001404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800140e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001412:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001416:	2b00      	cmp	r3, #0
 8001418:	d02e      	beq.n	8001478 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001420:	6959      	ldr	r1, [r3, #20]
 8001422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001424:	891a      	ldrh	r2, [r3, #8]
 8001426:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800142a:	f003 fc44 	bl	8004cb6 <USB_ReadPMA>
 800142e:	e023      	b.n	8001478 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	3306      	adds	r3, #6
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001458:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800145c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001460:	2b00      	cmp	r3, #0
 8001462:	d009      	beq.n	8001478 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800146a:	6959      	ldr	r1, [r3, #20]
 800146c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800146e:	895a      	ldrh	r2, [r3, #10]
 8001470:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001474:	f003 fc1f 	bl	8004cb6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001480:	441a      	add	r2, r3
 8001482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001484:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800148e:	441a      	add	r2, r3
 8001490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001492:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <PCD_EP_ISR_Handler+0x51c>
 800149c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80014a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d206      	bcs.n	80014b6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f004 fff2 	bl	8006498 <HAL_PCD_DataOutStageCallback>
 80014b4:	e005      	b.n	80014c2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 f92b 	bl	8003718 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8123 	beq.w	8001716 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80014d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	441a      	add	r2, r3
 8001510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800151c:	b29b      	uxth	r3, r3
 800151e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	2b01      	cmp	r3, #1
 8001526:	f040 80a2 	bne.w	800166e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001532:	7b1b      	ldrb	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8093 	beq.w	8001660 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800153a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800153e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d046      	beq.n	80015d4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d126      	bne.n	800159c <PCD_EP_ISR_Handler+0x610>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800155c:	b29b      	uxth	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	4413      	add	r3, r2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	011a      	lsls	r2, r3, #4
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	4413      	add	r3, r2
 8001570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001574:	623b      	str	r3, [r7, #32]
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001580:	b29a      	uxth	r2, r3
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001594:	b29a      	uxth	r2, r3
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	801a      	strh	r2, [r3, #0]
 800159a:	e061      	b.n	8001660 <PCD_EP_ISR_Handler+0x6d4>
 800159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d15d      	bne.n	8001660 <PCD_EP_ISR_Handler+0x6d4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	4413      	add	r3, r2
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	011a      	lsls	r2, r3, #4
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	4413      	add	r3, r2
 80015c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	2200      	movs	r2, #0
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	e045      	b.n	8001660 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d126      	bne.n	8001630 <PCD_EP_ISR_Handler+0x6a4>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	4413      	add	r3, r2
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
 80015fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	011a      	lsls	r2, r3, #4
 8001600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001602:	4413      	add	r3, r2
 8001604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001614:	b29a      	uxth	r2, r3
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001628:	b29a      	uxth	r2, r3
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e017      	b.n	8001660 <PCD_EP_ISR_Handler+0x6d4>
 8001630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d113      	bne.n	8001660 <PCD_EP_ISR_Handler+0x6d4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001646:	4413      	add	r3, r2
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	011a      	lsls	r2, r3, #4
 8001650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001652:	4413      	add	r3, r2
 8001654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
 800165a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f004 ff31 	bl	80064ce <HAL_PCD_DataInStageCallback>
 800166c:	e053      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800166e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d146      	bne.n	8001708 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001682:	b29b      	uxth	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	3302      	adds	r3, #2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80016a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d907      	bls.n	80016c2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80016b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016ba:	1ad2      	subs	r2, r2, r3
 80016bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016be:	619a      	str	r2, [r3, #24]
 80016c0:	e002      	b.n	80016c8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80016c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80016c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f004 fef9 	bl	80064ce <HAL_PCD_DataInStageCallback>
 80016dc:	e01b      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80016de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016e6:	441a      	add	r2, r3
 80016e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80016ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016f4:	441a      	add	r2, r3
 80016f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001700:	4618      	mov	r0, r3
 8001702:	f002 f809 	bl	8003718 <USB_EPStartXfer>
 8001706:	e006      	b.n	8001716 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001708:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800170c:	461a      	mov	r2, r3
 800170e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f91b 	bl	800194c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21b      	sxth	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f6ff ac37 	blt.w	8000f96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3758      	adds	r7, #88	; 0x58
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b088      	sub	sp, #32
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	4613      	mov	r3, r2
 800173e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d07e      	beq.n	8001848 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	3302      	adds	r3, #2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001772:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	8b7b      	ldrh	r3, [r7, #26]
 800177a:	429a      	cmp	r2, r3
 800177c:	d306      	bcc.n	800178c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	8b7b      	ldrh	r3, [r7, #26]
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	e002      	b.n	8001792 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d123      	bne.n	80017e2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b4:	833b      	strh	r3, [r7, #24]
 80017b6:	8b3b      	ldrh	r3, [r7, #24]
 80017b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017bc:	833b      	strh	r3, [r7, #24]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	441a      	add	r2, r3
 80017cc:	8b3b      	ldrh	r3, [r7, #24]
 80017ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017de:	b29b      	uxth	r3, r3
 80017e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01f      	beq.n	800182c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001806:	82fb      	strh	r3, [r7, #22]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	441a      	add	r2, r3
 8001816:	8afb      	ldrh	r3, [r7, #22]
 8001818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800181c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001828:	b29b      	uxth	r3, r3
 800182a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800182c:	8b7b      	ldrh	r3, [r7, #26]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	6959      	ldr	r1, [r3, #20]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	891a      	ldrh	r2, [r3, #8]
 8001840:	8b7b      	ldrh	r3, [r7, #26]
 8001842:	f003 fa38 	bl	8004cb6 <USB_ReadPMA>
 8001846:	e07c      	b.n	8001942 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	3306      	adds	r3, #6
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001870:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	8b7b      	ldrh	r3, [r7, #26]
 8001878:	429a      	cmp	r2, r3
 800187a:	d306      	bcc.n	800188a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	8b7b      	ldrh	r3, [r7, #26]
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	e002      	b.n	8001890 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d123      	bne.n	80018e0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b2:	83fb      	strh	r3, [r7, #30]
 80018b4:	8bfb      	ldrh	r3, [r7, #30]
 80018b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018ba:	83fb      	strh	r3, [r7, #30]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	441a      	add	r2, r3
 80018ca:	8bfb      	ldrh	r3, [r7, #30]
 80018cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	b29b      	uxth	r3, r3
 80018de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11f      	bne.n	800192a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001904:	83bb      	strh	r3, [r7, #28]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	441a      	add	r2, r3
 8001914:	8bbb      	ldrh	r3, [r7, #28]
 8001916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800191a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001926:	b29b      	uxth	r3, r3
 8001928:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800192a:	8b7b      	ldrh	r3, [r7, #26]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	895a      	ldrh	r2, [r3, #10]
 800193c:	8b7b      	ldrh	r3, [r7, #26]
 800193e:	f003 f9ba 	bl	8004cb6 <USB_ReadPMA>
    }
  }

  return count;
 8001942:	8b7b      	ldrh	r3, [r7, #26]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0a4      	sub	sp, #144	; 0x90
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 81dd 	beq.w	8001d20 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	3302      	adds	r3, #2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	4413      	add	r3, r2
 8001984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800199a:	429a      	cmp	r2, r3
 800199c:	d907      	bls.n	80019ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80019a6:	1ad2      	subs	r2, r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	619a      	str	r2, [r3, #24]
 80019ac:	e002      	b.n	80019b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 80b9 	bne.w	8001b30 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d126      	bne.n	8001a14 <HAL_PCD_EP_DB_Transmit+0xc8>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	4413      	add	r3, r2
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	011a      	lsls	r2, r3, #4
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	4413      	add	r3, r2
 80019e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	e01a      	b.n	8001a4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	785b      	ldrb	r3, [r3, #1]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d116      	bne.n	8001a4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	4413      	add	r3, r2
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	011a      	lsls	r2, r3, #4
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
 8001a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d126      	bne.n	8001aa6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	011a      	lsls	r2, r3, #4
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	801a      	strh	r2, [r3, #0]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	801a      	strh	r2, [r3, #0]
 8001aa4:	e017      	b.n	8001ad6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	785b      	ldrb	r3, [r3, #1]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d113      	bne.n	8001ad6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	4413      	add	r3, r2
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	011a      	lsls	r2, r3, #4
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	4413      	add	r3, r2
 8001aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4619      	mov	r1, r3
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f004 fcf6 	bl	80064ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 82fc 	beq.w	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b08:	82fb      	strh	r3, [r7, #22]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	441a      	add	r2, r3
 8001b18:	8afb      	ldrh	r3, [r7, #22]
 8001b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	8013      	strh	r3, [r2, #0]
 8001b2e:	e2da      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d021      	beq.n	8001b7e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	441a      	add	r2, r3
 8001b66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 82ae 	bne.w	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b92:	441a      	add	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ba0:	441a      	add	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d30b      	bcc.n	8001bca <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bc2:	1ad2      	subs	r2, r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	621a      	str	r2, [r3, #32]
 8001bc8:	e017      	b.n	8001bfa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d108      	bne.n	8001be4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001bd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001be2:	e00a      	b.n	8001bfa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d165      	bne.n	8001cce <HAL_PCD_EP_DB_Transmit+0x382>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c16:	4413      	add	r3, r2
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	011a      	lsls	r2, r3, #4
 8001c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c22:	4413      	add	r3, r2
 8001c24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c40:	d91d      	bls.n	8001c7e <HAL_PCD_EP_DB_Transmit+0x332>
 8001c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_PCD_EP_DB_Transmit+0x310>
 8001c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	e044      	b.n	8001d08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_PCD_EP_DB_Transmit+0x350>
 8001c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	e035      	b.n	8001d08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	029b      	lsls	r3, r3, #10
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	e01c      	b.n	8001d08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d118      	bne.n	8001d08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cea:	4413      	add	r3, r2
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	011a      	lsls	r2, r3, #4
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8001cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d06:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	6959      	ldr	r1, [r3, #20]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	891a      	ldrh	r2, [r3, #8]
 8001d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f002 ff87 	bl	8004c2c <USB_WritePMA>
 8001d1e:	e1e2      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	3306      	adds	r3, #6
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d48:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d307      	bcc.n	8001d68 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	619a      	str	r2, [r3, #24]
 8001d66:	e002      	b.n	8001d6e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 80c0 	bne.w	8001ef8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d126      	bne.n	8001dce <HAL_PCD_EP_DB_Transmit+0x482>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d94:	4413      	add	r3, r2
 8001d96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	011a      	lsls	r2, r3, #4
 8001d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da0:	4413      	add	r3, r2
 8001da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001da6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dca:	801a      	strh	r2, [r3, #0]
 8001dcc:	e01a      	b.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d116      	bne.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	667b      	str	r3, [r7, #100]	; 0x64
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dea:	4413      	add	r3, r2
 8001dec:	667b      	str	r3, [r7, #100]	; 0x64
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	011a      	lsls	r2, r3, #4
 8001df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df6:	4413      	add	r3, r2
 8001df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	677b      	str	r3, [r7, #116]	; 0x74
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12b      	bne.n	8001e6a <HAL_PCD_EP_DB_Transmit+0x51e>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e26:	4413      	add	r3, r2
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	011a      	lsls	r2, r3, #4
 8001e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e4e:	801a      	strh	r2, [r3, #0]
 8001e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e017      	b.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d113      	bne.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	4413      	add	r3, r2
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	011a      	lsls	r2, r3, #4
 8001e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e92:	673b      	str	r3, [r7, #112]	; 0x70
 8001e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e96:	2200      	movs	r2, #0
 8001e98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f004 fb14 	bl	80064ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 811a 	bne.w	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	441a      	add	r2, r3
 8001ede:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	8013      	strh	r3, [r2, #0]
 8001ef6:	e0f6      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d121      	bne.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 80ca 	bne.w	80020e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f68:	441a      	add	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d30b      	bcc.n	8001f92 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8a:	1ad2      	subs	r2, r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	621a      	str	r2, [r3, #32]
 8001f90:	e017      	b.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001f9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001faa:	e00a      	b.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d165      	bne.n	800209c <HAL_PCD_EP_DB_Transmit+0x750>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	011a      	lsls	r2, r3, #4
 8001fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002002:	b29a      	uxth	r2, r3
 8002004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002006:	801a      	strh	r2, [r3, #0]
 8002008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200c:	2b3e      	cmp	r3, #62	; 0x3e
 800200e:	d91d      	bls.n	800204c <HAL_PCD_EP_DB_Transmit+0x700>
 8002010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	66bb      	str	r3, [r7, #104]	; 0x68
 8002018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002026:	3b01      	subs	r3, #1
 8002028:	66bb      	str	r3, [r7, #104]	; 0x68
 800202a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002032:	b29b      	uxth	r3, r3
 8002034:	029b      	lsls	r3, r3, #10
 8002036:	b29b      	uxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002044:	b29a      	uxth	r2, r3
 8002046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	e041      	b.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800204c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002062:	b29a      	uxth	r2, r3
 8002064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002066:	801a      	strh	r2, [r3, #0]
 8002068:	e032      	b.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800206a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	66bb      	str	r3, [r7, #104]	; 0x68
 8002072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_PCD_EP_DB_Transmit+0x738>
 800207e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002080:	3301      	adds	r3, #1
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
 8002084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29a      	uxth	r2, r3
 800208a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208c:	b29b      	uxth	r3, r3
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	b29b      	uxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b29a      	uxth	r2, r3
 8002096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	e019      	b.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d115      	bne.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x784>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	4413      	add	r3, r2
 80020b4:	657b      	str	r3, [r7, #84]	; 0x54
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	011a      	lsls	r2, r3, #4
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	4413      	add	r3, r2
 80020c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020c4:	653b      	str	r3, [r7, #80]	; 0x50
 80020c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6959      	ldr	r1, [r3, #20]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	895a      	ldrh	r2, [r3, #10]
 80020dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f002 fda3 	bl	8004c2c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002100:	82bb      	strh	r3, [r7, #20]
 8002102:	8abb      	ldrh	r3, [r7, #20]
 8002104:	f083 0310 	eor.w	r3, r3, #16
 8002108:	82bb      	strh	r3, [r7, #20]
 800210a:	8abb      	ldrh	r3, [r7, #20]
 800210c:	f083 0320 	eor.w	r3, r3, #32
 8002110:	82bb      	strh	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	8abb      	ldrh	r3, [r7, #20]
 8002122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800212a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002132:	b29b      	uxth	r3, r3
 8002134:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3790      	adds	r7, #144	; 0x90
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	817b      	strh	r3, [r7, #10]
 800214e:	4613      	mov	r3, r2
 8002150:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e009      	b.n	800218a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002176:	897a      	ldrh	r2, [r7, #10]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800218a:	893b      	ldrh	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2200      	movs	r2, #0
 8002194:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	b29a      	uxth	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	80da      	strh	r2, [r3, #6]
 800219e:	e00b      	b.n	80021b8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2201      	movs	r2, #1
 80021a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e26c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e4:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f0:	4b8f      	ldr	r3, [pc, #572]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
 80021fc:	4b8c      	ldr	r3, [pc, #560]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4b89      	ldr	r3, [pc, #548]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d06c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x12c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d168      	bne.n	80022f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e246      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x76>
 800222c:	4b80      	ldr	r3, [pc, #512]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7f      	ldr	r2, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e02e      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x98>
 8002242:	4b7b      	ldr	r3, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7a      	ldr	r2, [pc, #488]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b78      	ldr	r3, [pc, #480]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a77      	ldr	r2, [pc, #476]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0xbc>
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a71      	ldr	r2, [pc, #452]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 8002280:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b68      	ldr	r3, [pc, #416]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a67      	ldr	r2, [pc, #412]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe f8fc 	bl	800049c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe f8f8 	bl	800049c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1fa      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe4>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe f8e8 	bl	800049c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe f8e4 	bl	800049c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1e6      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x10c>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fe:	4b4c      	ldr	r3, [pc, #304]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x18c>
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b43      	ldr	r3, [pc, #268]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x176>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1ba      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4939      	ldr	r1, [pc, #228]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe f89d 	bl	800049c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe f899 	bl	800049c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e19b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4927      	ldr	r1, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe f87c 	bl	800049c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a8:	f7fe f878 	bl	800049c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e17a      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03a      	beq.n	8002448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d019      	beq.n	800240e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe f85c 	bl	800049c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe f858 	bl	800049c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e15a      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f000 fa9a 	bl	8002940 <RCC_Delay>
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_OscConfig+0x274>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7fe f842 	bl	800049c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241a:	e00f      	b.n	800243c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe f83e 	bl	800049c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d908      	bls.n	800243c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e140      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	42420000 	.word	0x42420000
 8002438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b9e      	ldr	r3, [pc, #632]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e9      	bne.n	800241c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a6 	beq.w	80025a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b97      	ldr	r3, [pc, #604]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b94      	ldr	r3, [pc, #592]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a93      	ldr	r2, [pc, #588]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a8a      	ldr	r2, [pc, #552]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7fd ffff 	bl	800049c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fd fffb 	bl	800049c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b64      	cmp	r3, #100	; 0x64
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0fd      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b81      	ldr	r3, [pc, #516]	; (80026bc <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x312>
 80024c8:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e02d      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x334>
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a72      	ldr	r2, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e01c      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_OscConfig+0x356>
 8002500:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a6c      	ldr	r2, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a69      	ldr	r2, [pc, #420]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	e00b      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a66      	ldr	r2, [pc, #408]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7fd ffaf 	bl	800049c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fd ffab 	bl	800049c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0ab      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ee      	beq.n	8002542 <HAL_RCC_OscConfig+0x37e>
 8002564:	e014      	b.n	8002590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7fd ff99 	bl	800049c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fd ff95 	bl	800049c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e095      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ee      	bne.n	800256e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002596:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8081 	beq.w	80026ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d061      	beq.n	800267c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d146      	bne.n	800264e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0x4fc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fd ff69 	bl	800049c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fd ff65 	bl	800049c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e067      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d108      	bne.n	8002608 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	492d      	ldr	r1, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a19      	ldr	r1, [r3, #32]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	430b      	orrs	r3, r1
 800261a:	4927      	ldr	r1, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x4fc>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fd ff39 	bl	800049c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fd ff35 	bl	800049c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e037      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x46a>
 800264c:	e02f      	b.n	80026ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_RCC_OscConfig+0x4fc>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fd ff22 	bl	800049c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fd ff1e 	bl	800049c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e020      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x498>
 800267a:	e018      	b.n	80026ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e013      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42420060 	.word	0x42420060

080026c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d0      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4965      	ldr	r1, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d040      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e073      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06b      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4936      	ldr	r1, [pc, #216]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b4:	f7fd fe72 	bl	800049c <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7fd fe6e 	bl	800049c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e053      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d210      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4922      	ldr	r1, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1cc>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fdd0 	bl	8000418 <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	080069ec 	.word	0x080069ec
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004

08002898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x30>
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x36>
 80028c6:	e027      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	e027      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c5b      	lsrs	r3, r3, #17
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fa:	fb02 f203 	mul.w	r2, r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e004      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0xa4>)
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	613b      	str	r3, [r7, #16]
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	613b      	str	r3, [r7, #16]
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	693b      	ldr	r3, [r7, #16]
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	007a1200 	.word	0x007a1200
 8002934:	080069fc 	.word	0x080069fc
 8002938:	08006a0c 	.word	0x08006a0c
 800293c:	003d0900 	.word	0x003d0900

08002940 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <RCC_Delay+0x34>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <RCC_Delay+0x38>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a5b      	lsrs	r3, r3, #9
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800295c:	bf00      	nop
  }
  while (Delay --);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	60fa      	str	r2, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <RCC_Delay+0x1c>
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000000 	.word	0x20000000
 8002978:	10624dd3 	.word	0x10624dd3

0800297c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d07d      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299c:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b2:	61d3      	str	r3, [r2, #28]
 80029b4:	4b49      	ldr	r3, [pc, #292]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d118      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d0:	4b43      	ldr	r3, [pc, #268]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a42      	ldr	r2, [pc, #264]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029dc:	f7fd fd5e 	bl	800049c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	e008      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fd fd5a 	bl	800049c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e06d      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d02e      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d027      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a20:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d014      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7fd fd29 	bl	800049c <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fd fd25 	bl	800049c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e036      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ee      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4917      	ldr	r1, [pc, #92]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	490b      	ldr	r1, [pc, #44]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4904      	ldr	r1, [pc, #16]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42420440 	.word	0x42420440

08002ae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ae8:	b084      	sub	sp, #16
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	f107 0014 	add.w	r0, r7, #20
 8002af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	b004      	add	sp, #16
 8002b06:	4770      	bx	lr

08002b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b80:	b084      	sub	sp, #16
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	f107 0014 	add.w	r0, r7, #20
 8002b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	b004      	add	sp, #16
 8002bbe:	4770      	bx	lr

08002bc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b09d      	sub	sp, #116	; 0x74
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	78db      	ldrb	r3, [r3, #3]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d81f      	bhi.n	8002c32 <USB_ActivateEndpoint+0x72>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <USB_ActivateEndpoint+0x38>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c25 	.word	0x08002c25
 8002c00:	08002c3b 	.word	0x08002c3b
 8002c04:	08002c17 	.word	0x08002c17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c14:	e012      	b.n	8002c3c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c1a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c1e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c22:	e00b      	b.n	8002c3c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c30:	e004      	b.n	8002c3c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002c38:	e000      	b.n	8002c3c <USB_ActivateEndpoint+0x7c>
      break;
 8002c3a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	7b1b      	ldrb	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8178 	bne.w	8002f9e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8084 	beq.w	8002dc0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	011a      	lsls	r2, r3, #4
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	88db      	ldrh	r3, [r3, #6]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	827b      	strh	r3, [r7, #18]
 8002cfa:	8a7b      	ldrh	r3, [r7, #18]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <USB_ActivateEndpoint+0x17c>
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	823b      	strh	r3, [r7, #16]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	8a3b      	ldrh	r3, [r7, #16]
 8002d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	78db      	ldrb	r3, [r3, #3]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d020      	beq.n	8002d86 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5a:	81bb      	strh	r3, [r7, #12]
 8002d5c:	89bb      	ldrh	r3, [r7, #12]
 8002d5e:	f083 0320 	eor.w	r3, r3, #32
 8002d62:	81bb      	strh	r3, [r7, #12]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	89bb      	ldrh	r3, [r7, #12]
 8002d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8013      	strh	r3, [r2, #0]
 8002d84:	e2d5      	b.n	8003332 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d9c:	81fb      	strh	r3, [r7, #14]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	89fb      	ldrh	r3, [r7, #14]
 8002daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	e2b8      	b.n	8003332 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	4413      	add	r3, r2
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	011a      	lsls	r2, r3, #4
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	88db      	ldrh	r3, [r3, #6]
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	4413      	add	r3, r2
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e2e:	d91d      	bls.n	8002e6c <USB_ActivateEndpoint+0x2ac>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <USB_ActivateEndpoint+0x28a>
 8002e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e46:	3b01      	subs	r3, #1
 8002e48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e026      	b.n	8002eba <USB_ActivateEndpoint+0x2fa>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <USB_ActivateEndpoint+0x2ca>
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	801a      	strh	r2, [r3, #0]
 8002e88:	e017      	b.n	8002eba <USB_ActivateEndpoint+0x2fa>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <USB_ActivateEndpoint+0x2e4>
 8002e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	029b      	lsls	r3, r3, #10
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01b      	beq.n	8002f0a <USB_ActivateEndpoint+0x34a>
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee8:	843b      	strh	r3, [r7, #32]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	8c3b      	ldrh	r3, [r7, #32]
 8002ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d124      	bne.n	8002f5c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f28:	83bb      	strh	r3, [r7, #28]
 8002f2a:	8bbb      	ldrh	r3, [r7, #28]
 8002f2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f30:	83bb      	strh	r3, [r7, #28]
 8002f32:	8bbb      	ldrh	r3, [r7, #28]
 8002f34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f38:	83bb      	strh	r3, [r7, #28]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	8bbb      	ldrh	r3, [r7, #28]
 8002f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	8013      	strh	r3, [r2, #0]
 8002f5a:	e1ea      	b.n	8003332 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	83fb      	strh	r3, [r7, #30]
 8002f74:	8bfb      	ldrh	r3, [r7, #30]
 8002f76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f7a:	83fb      	strh	r3, [r7, #30]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	8bfb      	ldrh	r3, [r7, #30]
 8002f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8013      	strh	r3, [r2, #0]
 8002f9c:	e1c9      	b.n	8003332 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d11e      	bne.n	8002fe4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	441a      	add	r2, r3
 8002fca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8013      	strh	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	441a      	add	r2, r3
 8003008:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800300c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301c:	b29b      	uxth	r3, r3
 800301e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	4413      	add	r3, r2
 8003032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	011a      	lsls	r2, r3, #4
 800303a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303c:	4413      	add	r3, r2
 800303e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003042:	65bb      	str	r3, [r7, #88]	; 0x58
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	891b      	ldrh	r3, [r3, #8]
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003052:	801a      	strh	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	657b      	str	r3, [r7, #84]	; 0x54
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003064:	4413      	add	r3, r2
 8003066:	657b      	str	r3, [r7, #84]	; 0x54
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	011a      	lsls	r2, r3, #4
 800306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003070:	4413      	add	r3, r2
 8003072:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003076:	653b      	str	r3, [r7, #80]	; 0x50
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	895b      	ldrh	r3, [r3, #10]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003086:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8093 	bne.w	80031b8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01b      	beq.n	80030e6 <USB_ActivateEndpoint+0x526>
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80030f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01b      	beq.n	8003136 <USB_ActivateEndpoint+0x576>
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003114:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	441a      	add	r2, r3
 8003120:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800312a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314c:	873b      	strh	r3, [r7, #56]	; 0x38
 800314e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003150:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003154:	873b      	strh	r3, [r7, #56]	; 0x38
 8003156:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003158:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800315c:	873b      	strh	r3, [r7, #56]	; 0x38
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800316a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003194:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	441a      	add	r2, r3
 80031a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	8013      	strh	r3, [r2, #0]
 80031b6:	e0bc      	b.n	8003332 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01d      	beq.n	8003210 <USB_ActivateEndpoint+0x650>
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320c:	b29b      	uxth	r3, r3
 800320e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003220:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01d      	beq.n	8003268 <USB_ActivateEndpoint+0x6a8>
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	441a      	add	r2, r3
 8003250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003264:	b29b      	uxth	r3, r3
 8003266:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d024      	beq.n	80032ba <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800328a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800328e:	f083 0320 	eor.w	r3, r3, #32
 8003292:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	8013      	strh	r3, [r2, #0]
 80032b8:	e01d      	b.n	80032f6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003332:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003336:	4618      	mov	r0, r3
 8003338:	3774      	adds	r7, #116	; 0x74
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003340:	b480      	push	{r7}
 8003342:	b08d      	sub	sp, #52	; 0x34
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	7b1b      	ldrb	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 808e 	bne.w	8003470 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d044      	beq.n	80033e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	81bb      	strh	r3, [r7, #12]
 800336a:	89bb      	ldrh	r3, [r7, #12]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <USB_DeactivateEndpoint+0x6c>
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	817b      	strh	r3, [r7, #10]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c2:	813b      	strh	r3, [r7, #8]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	893b      	ldrh	r3, [r7, #8]
 80033d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8013      	strh	r3, [r2, #0]
 80033e4:	e192      	b.n	800370c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	827b      	strh	r3, [r7, #18]
 80033f4:	8a7b      	ldrh	r3, [r7, #18]
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01b      	beq.n	8003436 <USB_DeactivateEndpoint+0xf6>
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	823b      	strh	r3, [r7, #16]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	8a3b      	ldrh	r3, [r7, #16]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800342e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344c:	81fb      	strh	r3, [r7, #14]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	89fb      	ldrh	r3, [r7, #14]
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
 800346e:	e14d      	b.n	800370c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	785b      	ldrb	r3, [r3, #1]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 80a5 	bne.w	80035c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	843b      	strh	r3, [r7, #32]
 8003488:	8c3b      	ldrh	r3, [r7, #32]
 800348a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01b      	beq.n	80034ca <USB_DeactivateEndpoint+0x18a>
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a8:	83fb      	strh	r3, [r7, #30]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	8bfb      	ldrh	r3, [r7, #30]
 80034b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	83bb      	strh	r3, [r7, #28]
 80034d8:	8bbb      	ldrh	r3, [r7, #28]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01b      	beq.n	800351a <USB_DeactivateEndpoint+0x1da>
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f8:	837b      	strh	r3, [r7, #26]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	441a      	add	r2, r3
 8003504:	8b7b      	ldrh	r3, [r7, #26]
 8003506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800350a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	833b      	strh	r3, [r7, #24]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	8b3b      	ldrh	r3, [r7, #24]
 800353e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800354e:	b29b      	uxth	r3, r3
 8003550:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	82fb      	strh	r3, [r7, #22]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	441a      	add	r2, r3
 8003574:	8afb      	ldrh	r3, [r7, #22]
 8003576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003586:	b29b      	uxth	r3, r3
 8003588:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a0:	82bb      	strh	r3, [r7, #20]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	8abb      	ldrh	r3, [r7, #20]
 80035ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]
 80035c2:	e0a3      	b.n	800370c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <USB_DeactivateEndpoint+0x2d4>
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800360c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003622:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <USB_DeactivateEndpoint+0x324>
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	853b      	strh	r3, [r7, #40]	; 0x28
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003660:	b29b      	uxth	r3, r3
 8003662:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	441a      	add	r2, r3
 8003686:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	b29b      	uxth	r3, r3
 800369a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003708:	b29b      	uxth	r3, r3
 800370a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3734      	adds	r7, #52	; 0x34
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0c2      	sub	sp, #264	; 0x108
 800371c:	af00      	add	r7, sp, #0
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	6018      	str	r0, [r3, #0]
 8003722:	463b      	mov	r3, r7
 8003724:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003726:	463b      	mov	r3, r7
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 8545 	bne.w	80041bc <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003732:	463b      	mov	r3, r7
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	463b      	mov	r3, r7
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d905      	bls.n	800374e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003742:	463b      	mov	r3, r7
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800374c:	e004      	b.n	8003758 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800374e:	463b      	mov	r3, r7
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003758:	463b      	mov	r3, r7
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	7b1b      	ldrb	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d128      	bne.n	80037b4 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003762:	463b      	mov	r3, r7
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6959      	ldr	r1, [r3, #20]
 8003768:	463b      	mov	r3, r7
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	88da      	ldrh	r2, [r3, #6]
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003772:	b29b      	uxth	r3, r3
 8003774:	1d38      	adds	r0, r7, #4
 8003776:	6800      	ldr	r0, [r0, #0]
 8003778:	f001 fa58 	bl	8004c2c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4413      	add	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	463b      	mov	r3, r7
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	011a      	lsls	r2, r3, #4
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	f000 bcdb 	b.w	800416a <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037b4:	463b      	mov	r3, r7
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	78db      	ldrb	r3, [r3, #3]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	f040 836f 	bne.w	8003e9e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037c0:	463b      	mov	r3, r7
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	463b      	mov	r3, r7
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	f240 8313 	bls.w	8003df8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	463b      	mov	r3, r7
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	463b      	mov	r3, r7
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800380e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003812:	b29b      	uxth	r3, r3
 8003814:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003816:	463b      	mov	r3, r7
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	463b      	mov	r3, r7
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	463b      	mov	r3, r7
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 816d 	beq.w	8003b1e <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 800384a:	463b      	mov	r3, r7
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d16e      	bne.n	8003932 <USB_EPStartXfer+0x21a>
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	4413      	add	r3, r2
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
 800386c:	463b      	mov	r3, r7
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	011a      	lsls	r2, r3, #4
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	4413      	add	r3, r2
 8003878:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003888:	b29a      	uxth	r2, r3
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003892:	2b3e      	cmp	r3, #62	; 0x3e
 8003894:	d921      	bls.n	80038da <USB_EPStartXfer+0x1c2>
 8003896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <USB_EPStartXfer+0x19e>
 80038ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038b0:	3b01      	subs	r3, #1
 80038b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	029b      	lsls	r3, r3, #10
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e047      	b.n	800396a <USB_EPStartXfer+0x252>
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <USB_EPStartXfer+0x1e0>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	e038      	b.n	800396a <USB_EPStartXfer+0x252>
 80038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <USB_EPStartXfer+0x200>
 800390e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003912:	3301      	adds	r3, #1
 8003914:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29a      	uxth	r2, r3
 800391e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003922:	b29b      	uxth	r3, r3
 8003924:	029b      	lsls	r3, r3, #10
 8003926:	b29b      	uxth	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b29a      	uxth	r2, r3
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	e01b      	b.n	800396a <USB_EPStartXfer+0x252>
 8003932:	463b      	mov	r3, r7
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d116      	bne.n	800396a <USB_EPStartXfer+0x252>
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	4413      	add	r3, r2
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
 800394e:	463b      	mov	r3, r7
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	4413      	add	r3, r2
 800395a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003964:	b29a      	uxth	r2, r3
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800396a:	463b      	mov	r3, r7
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	895b      	ldrh	r3, [r3, #10]
 8003970:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003974:	463b      	mov	r3, r7
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6959      	ldr	r1, [r3, #20]
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	b29b      	uxth	r3, r3
 8003980:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003984:	1d38      	adds	r0, r7, #4
 8003986:	6800      	ldr	r0, [r0, #0]
 8003988:	f001 f950 	bl	8004c2c <USB_WritePMA>
            ep->xfer_buff += len;
 800398c:	463b      	mov	r3, r7
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003996:	441a      	add	r2, r3
 8003998:	463b      	mov	r3, r7
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800399e:	463b      	mov	r3, r7
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	463b      	mov	r3, r7
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d909      	bls.n	80039c2 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 80039ae:	463b      	mov	r3, r7
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	463b      	mov	r3, r7
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	621a      	str	r2, [r3, #32]
 80039c0:	e008      	b.n	80039d4 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80039c2:	463b      	mov	r3, r7
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80039cc:	463b      	mov	r3, r7
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039d4:	463b      	mov	r3, r7
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d16e      	bne.n	8003abc <USB_EPStartXfer+0x3a4>
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	4413      	add	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	463b      	mov	r3, r7
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	011a      	lsls	r2, r3, #4
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	4413      	add	r3, r2
 8003a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a1e:	d921      	bls.n	8003a64 <USB_EPStartXfer+0x34c>
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <USB_EPStartXfer+0x328>
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	029b      	lsls	r3, r3, #10
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	e04a      	b.n	8003afa <USB_EPStartXfer+0x3e2>
 8003a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <USB_EPStartXfer+0x36a>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	801a      	strh	r2, [r3, #0]
 8003a80:	e03b      	b.n	8003afa <USB_EPStartXfer+0x3e2>
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <USB_EPStartXfer+0x38a>
 8003a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	029b      	lsls	r3, r3, #10
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	801a      	strh	r2, [r3, #0]
 8003aba:	e01e      	b.n	8003afa <USB_EPStartXfer+0x3e2>
 8003abc:	463b      	mov	r3, r7
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d119      	bne.n	8003afa <USB_EPStartXfer+0x3e2>
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	4413      	add	r3, r2
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	463b      	mov	r3, r7
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003afa:	463b      	mov	r3, r7
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	891b      	ldrh	r3, [r3, #8]
 8003b00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b04:	463b      	mov	r3, r7
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6959      	ldr	r1, [r3, #20]
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b14:	1d38      	adds	r0, r7, #4
 8003b16:	6800      	ldr	r0, [r0, #0]
 8003b18:	f001 f888 	bl	8004c2c <USB_WritePMA>
 8003b1c:	e325      	b.n	800416a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b1e:	463b      	mov	r3, r7
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d16e      	bne.n	8003c06 <USB_EPStartXfer+0x4ee>
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3c:	4413      	add	r3, r2
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b40:	463b      	mov	r3, r7
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	011a      	lsls	r2, r3, #4
 8003b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
 8003b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b66:	2b3e      	cmp	r3, #62	; 0x3e
 8003b68:	d921      	bls.n	8003bae <USB_EPStartXfer+0x496>
 8003b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <USB_EPStartXfer+0x472>
 8003b80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b84:	3b01      	subs	r3, #1
 8003b86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	029b      	lsls	r3, r3, #10
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	e04a      	b.n	8003c44 <USB_EPStartXfer+0x52c>
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <USB_EPStartXfer+0x4b4>
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e03b      	b.n	8003c44 <USB_EPStartXfer+0x52c>
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d004      	beq.n	8003bec <USB_EPStartXfer+0x4d4>
 8003be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003be6:	3301      	adds	r3, #1
 8003be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	e01e      	b.n	8003c44 <USB_EPStartXfer+0x52c>
 8003c06:	463b      	mov	r3, r7
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d119      	bne.n	8003c44 <USB_EPStartXfer+0x52c>
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c24:	4413      	add	r3, r2
 8003c26:	653b      	str	r3, [r7, #80]	; 0x50
 8003c28:	463b      	mov	r3, r7
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c44:	463b      	mov	r3, r7
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	891b      	ldrh	r3, [r3, #8]
 8003c4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c4e:	463b      	mov	r3, r7
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6959      	ldr	r1, [r3, #20]
 8003c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003c5e:	1d38      	adds	r0, r7, #4
 8003c60:	6800      	ldr	r0, [r0, #0]
 8003c62:	f000 ffe3 	bl	8004c2c <USB_WritePMA>
            ep->xfer_buff += len;
 8003c66:	463b      	mov	r3, r7
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c70:	441a      	add	r2, r3
 8003c72:	463b      	mov	r3, r7
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c78:	463b      	mov	r3, r7
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	463b      	mov	r3, r7
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d909      	bls.n	8003c9c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8003c88:	463b      	mov	r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	463b      	mov	r3, r7
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	621a      	str	r2, [r3, #32]
 8003c9a:	e008      	b.n	8003cae <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d16e      	bne.n	8003d9c <USB_EPStartXfer+0x684>
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	4413      	add	r3, r2
 8003cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	011a      	lsls	r2, r3, #4
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	801a      	strh	r2, [r3, #0]
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8003cfe:	d921      	bls.n	8003d44 <USB_EPStartXfer+0x62c>
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <USB_EPStartXfer+0x608>
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	029b      	lsls	r3, r3, #10
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4313      	orrs	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	e047      	b.n	8003dd4 <USB_EPStartXfer+0x6bc>
 8003d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <USB_EPStartXfer+0x64a>
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	801a      	strh	r2, [r3, #0]
 8003d60:	e038      	b.n	8003dd4 <USB_EPStartXfer+0x6bc>
 8003d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <USB_EPStartXfer+0x66a>
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	029b      	lsls	r3, r3, #10
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	e01b      	b.n	8003dd4 <USB_EPStartXfer+0x6bc>
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d116      	bne.n	8003dd4 <USB_EPStartXfer+0x6bc>
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	4413      	add	r3, r2
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
 8003db8:	463b      	mov	r3, r7
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	011a      	lsls	r2, r3, #4
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	895b      	ldrh	r3, [r3, #10]
 8003dda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dde:	463b      	mov	r3, r7
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6959      	ldr	r1, [r3, #20]
 8003de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003dee:	1d38      	adds	r0, r7, #4
 8003df0:	6800      	ldr	r0, [r0, #0]
 8003df2:	f000 ff1b 	bl	8004c2c <USB_WritePMA>
 8003df6:	e1b8      	b.n	800416a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003df8:	463b      	mov	r3, r7
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	463b      	mov	r3, r7
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	463b      	mov	r3, r7
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5a:	4413      	add	r3, r2
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5e:	463b      	mov	r3, r7
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	011a      	lsls	r2, r3, #4
 8003e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e68:	4413      	add	r3, r2
 8003e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	891b      	ldrh	r3, [r3, #8]
 8003e80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e84:	463b      	mov	r3, r7
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6959      	ldr	r1, [r3, #20]
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003e94:	1d38      	adds	r0, r7, #4
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	f000 fec8 	bl	8004c2c <USB_WritePMA>
 8003e9c:	e165      	b.n	800416a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea8:	1ad2      	subs	r2, r2, r3
 8003eaa:	463b      	mov	r3, r7
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80a5 	beq.w	8004016 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d16e      	bne.n	8003fba <USB_EPStartXfer+0x8a2>
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee2:	1d3b      	adds	r3, r7, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef0:	4413      	add	r3, r2
 8003ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	011a      	lsls	r2, r3, #4
 8003efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003efe:	4413      	add	r3, r2
 8003f00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f04:	667b      	str	r3, [r7, #100]	; 0x64
 8003f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f14:	801a      	strh	r2, [r3, #0]
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f1c:	d921      	bls.n	8003f62 <USB_EPStartXfer+0x84a>
 8003f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <USB_EPStartXfer+0x826>
 8003f34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	e047      	b.n	8003ff2 <USB_EPStartXfer+0x8da>
 8003f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <USB_EPStartXfer+0x868>
 8003f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e038      	b.n	8003ff2 <USB_EPStartXfer+0x8da>
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <USB_EPStartXfer+0x888>
 8003f96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	029b      	lsls	r3, r3, #10
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e01b      	b.n	8003ff2 <USB_EPStartXfer+0x8da>
 8003fba:	463b      	mov	r3, r7
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d116      	bne.n	8003ff2 <USB_EPStartXfer+0x8da>
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd2:	4413      	add	r3, r2
 8003fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	011a      	lsls	r2, r3, #4
 8003fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	895b      	ldrh	r3, [r3, #10]
 8003ff8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6959      	ldr	r1, [r3, #20]
 8004002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004006:	b29b      	uxth	r3, r3
 8004008:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800400c:	1d38      	adds	r0, r7, #4
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	f000 fe0c 	bl	8004c2c <USB_WritePMA>
 8004014:	e0a9      	b.n	800416a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004016:	463b      	mov	r3, r7
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d16e      	bne.n	80040fe <USB_EPStartXfer+0x9e6>
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004034:	4413      	add	r3, r2
 8004036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004038:	463b      	mov	r3, r7
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	011a      	lsls	r2, r3, #4
 8004040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004042:	4413      	add	r3, r2
 8004044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004048:	67bb      	str	r3, [r7, #120]	; 0x78
 800404a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004054:	b29a      	uxth	r2, r3
 8004056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405e:	2b3e      	cmp	r3, #62	; 0x3e
 8004060:	d921      	bls.n	80040a6 <USB_EPStartXfer+0x98e>
 8004062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <USB_EPStartXfer+0x96a>
 8004078:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800407c:	3b01      	subs	r3, #1
 800407e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29a      	uxth	r2, r3
 8004088:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800408c:	b29b      	uxth	r3, r3
 800408e:	029b      	lsls	r3, r3, #10
 8004090:	b29b      	uxth	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e050      	b.n	8004148 <USB_EPStartXfer+0xa30>
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <USB_EPStartXfer+0x9ac>
 80040ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	e041      	b.n	8004148 <USB_EPStartXfer+0xa30>
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <USB_EPStartXfer+0x9cc>
 80040da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040de:	3301      	adds	r3, #1
 80040e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e024      	b.n	8004148 <USB_EPStartXfer+0xa30>
 80040fe:	463b      	mov	r3, r7
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d11f      	bne.n	8004148 <USB_EPStartXfer+0xa30>
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004120:	4413      	add	r3, r2
 8004122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004126:	463b      	mov	r3, r7
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	011a      	lsls	r2, r3, #4
 800412e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004132:	4413      	add	r3, r2
 8004134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004140:	b29a      	uxth	r2, r3
 8004142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004146:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	891b      	ldrh	r3, [r3, #8]
 800414e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004152:	463b      	mov	r3, r7
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6959      	ldr	r1, [r3, #20]
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800415c:	b29b      	uxth	r3, r3
 800415e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004162:	1d38      	adds	r0, r7, #4
 8004164:	6800      	ldr	r0, [r0, #0]
 8004166:	f000 fd61 	bl	8004c2c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	463b      	mov	r3, r7
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	f083 0310 	eor.w	r3, r3, #16
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	f083 0320 	eor.w	r3, r3, #32
 8004194:	817b      	strh	r3, [r7, #10]
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	463b      	mov	r3, r7
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	8013      	strh	r3, [r2, #0]
 80041ba:	e3f3      	b.n	80049a4 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041bc:	463b      	mov	r3, r7
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	7b1b      	ldrb	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 809c 	bne.w	8004300 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041c8:	463b      	mov	r3, r7
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	463b      	mov	r3, r7
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d90e      	bls.n	80041f6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80041d8:	463b      	mov	r3, r7
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ec:	1ad2      	subs	r2, r2, r3
 80041ee:	463b      	mov	r3, r7
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	619a      	str	r2, [r3, #24]
 80041f4:	e008      	b.n	8004208 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80041f6:	463b      	mov	r3, r7
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004200:	463b      	mov	r3, r7
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004220:	4413      	add	r3, r2
 8004222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004226:	463b      	mov	r3, r7
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	011a      	lsls	r2, r3, #4
 800422e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004232:	4413      	add	r3, r2
 8004234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800423c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004248:	b29a      	uxth	r2, r3
 800424a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004254:	2b3e      	cmp	r3, #62	; 0x3e
 8004256:	d923      	bls.n	80042a0 <USB_EPStartXfer+0xb88>
 8004258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <USB_EPStartXfer+0xb60>
 800426e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004272:	3b01      	subs	r3, #1
 8004274:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004284:	b29b      	uxth	r3, r3
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	b29b      	uxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004296:	b29a      	uxth	r2, r3
 8004298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	e353      	b.n	8004948 <USB_EPStartXfer+0x1230>
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10c      	bne.n	80042c2 <USB_EPStartXfer+0xbaa>
 80042a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	e342      	b.n	8004948 <USB_EPStartXfer+0x1230>
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <USB_EPStartXfer+0xbca>
 80042d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	e323      	b.n	8004948 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	2b02      	cmp	r3, #2
 8004308:	f040 81a9 	bne.w	800465e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800430c:	463b      	mov	r3, r7
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 8082 	bne.w	800441c <USB_EPStartXfer+0xd04>
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004330:	4413      	add	r3, r2
 8004332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004336:	463b      	mov	r3, r7
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004342:	4413      	add	r3, r2
 8004344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800434c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004358:	b29a      	uxth	r2, r3
 800435a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	463b      	mov	r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b3e      	cmp	r3, #62	; 0x3e
 8004368:	d925      	bls.n	80043b6 <USB_EPStartXfer+0xc9e>
 800436a:	463b      	mov	r3, r7
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004376:	463b      	mov	r3, r7
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <USB_EPStartXfer+0xc76>
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004388:	3b01      	subs	r3, #1
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800438e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29a      	uxth	r2, r3
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	b29b      	uxth	r3, r3
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4313      	orrs	r3, r2
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	e058      	b.n	8004468 <USB_EPStartXfer+0xd50>
 80043b6:	463b      	mov	r3, r7
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10c      	bne.n	80043da <USB_EPStartXfer+0xcc2>
 80043c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	e046      	b.n	8004468 <USB_EPStartXfer+0xd50>
 80043da:	463b      	mov	r3, r7
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043e6:	463b      	mov	r3, r7
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <USB_EPStartXfer+0xce6>
 80043f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f8:	3301      	adds	r3, #1
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29a      	uxth	r2, r3
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	b29b      	uxth	r3, r3
 800440c:	029b      	lsls	r3, r3, #10
 800440e:	b29b      	uxth	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	b29a      	uxth	r2, r3
 8004414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	e025      	b.n	8004468 <USB_EPStartXfer+0xd50>
 800441c:	463b      	mov	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d120      	bne.n	8004468 <USB_EPStartXfer+0xd50>
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004436:	b29b      	uxth	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800443e:	4413      	add	r3, r2
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004444:	463b      	mov	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004450:	4413      	add	r3, r2
 8004452:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800445a:	463b      	mov	r3, r7
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	b29a      	uxth	r2, r3
 8004462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004470:	463b      	mov	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 8082 	bne.w	8004580 <USB_EPStartXfer+0xe68>
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448c:	b29b      	uxth	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004494:	4413      	add	r3, r2
 8004496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	011a      	lsls	r2, r3, #4
 80044a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a6:	4413      	add	r3, r2
 80044a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044bc:	b29a      	uxth	r2, r3
 80044be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	463b      	mov	r3, r7
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b3e      	cmp	r3, #62	; 0x3e
 80044cc:	d925      	bls.n	800451a <USB_EPStartXfer+0xe02>
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044da:	463b      	mov	r3, r7
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <USB_EPStartXfer+0xdda>
 80044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ec:	3b01      	subs	r3, #1
 80044ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fe:	b29b      	uxth	r3, r3
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	b29b      	uxth	r3, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004510:	b29a      	uxth	r2, r3
 8004512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e054      	b.n	80045c4 <USB_EPStartXfer+0xeac>
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10c      	bne.n	800453e <USB_EPStartXfer+0xe26>
 8004524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004534:	b29a      	uxth	r2, r3
 8004536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e042      	b.n	80045c4 <USB_EPStartXfer+0xeac>
 800453e:	463b      	mov	r3, r7
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800454a:	463b      	mov	r3, r7
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <USB_EPStartXfer+0xe4a>
 8004558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455c:	3301      	adds	r3, #1
 800455e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29a      	uxth	r2, r3
 800456a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456e:	b29b      	uxth	r3, r3
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	b29b      	uxth	r3, r3
 8004574:	4313      	orrs	r3, r2
 8004576:	b29a      	uxth	r2, r3
 8004578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	e021      	b.n	80045c4 <USB_EPStartXfer+0xeac>
 8004580:	463b      	mov	r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d11c      	bne.n	80045c4 <USB_EPStartXfer+0xeac>
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800459a:	4413      	add	r3, r2
 800459c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	011a      	lsls	r2, r3, #4
 80045a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045ac:	4413      	add	r3, r2
 80045ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045b6:	463b      	mov	r3, r7
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80045c4:	463b      	mov	r3, r7
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 81bc 	beq.w	8004948 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	463b      	mov	r3, r7
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <USB_EPStartXfer+0xee4>
 80045f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 819f 	bne.w	8004948 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800460a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8198 	bne.w	8004948 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004654:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]
 800465c:	e174      	b.n	8004948 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	78db      	ldrb	r3, [r3, #3]
 8004664:	2b01      	cmp	r3, #1
 8004666:	f040 816d 	bne.w	8004944 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90e      	bls.n	8004698 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	e008      	b.n	80046aa <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8004698:	463b      	mov	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80046a2:	463b      	mov	r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80046aa:	463b      	mov	r3, r7
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d17b      	bne.n	80047ac <USB_EPStartXfer+0x1094>
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046bc:	1d3b      	adds	r3, r7, #4
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046cc:	4413      	add	r3, r2
 80046ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046d2:	463b      	mov	r3, r7
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046de:	4413      	add	r3, r2
 80046e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004700:	2b3e      	cmp	r3, #62	; 0x3e
 8004702:	d923      	bls.n	800474c <USB_EPStartXfer+0x1034>
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800470e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <USB_EPStartXfer+0x100c>
 800471a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471e:	3b01      	subs	r3, #1
 8004720:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29a      	uxth	r2, r3
 800472c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004730:	b29b      	uxth	r3, r3
 8004732:	029b      	lsls	r3, r3, #10
 8004734:	b29b      	uxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b29b      	uxth	r3, r3
 800473a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004742:	b29a      	uxth	r2, r3
 8004744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004748:	801a      	strh	r2, [r3, #0]
 800474a:	e054      	b.n	80047f6 <USB_EPStartXfer+0x10de>
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10c      	bne.n	800476e <USB_EPStartXfer+0x1056>
 8004754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004764:	b29a      	uxth	r2, r3
 8004766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	e043      	b.n	80047f6 <USB_EPStartXfer+0x10de>
 800476e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <USB_EPStartXfer+0x1076>
 8004784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004788:	3301      	adds	r3, #1
 800478a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800478e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29a      	uxth	r2, r3
 8004796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479a:	b29b      	uxth	r3, r3
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	e024      	b.n	80047f6 <USB_EPStartXfer+0x10de>
 80047ac:	463b      	mov	r3, r7
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11f      	bne.n	80047f6 <USB_EPStartXfer+0x10de>
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ce:	4413      	add	r3, r2
 80047d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	011a      	lsls	r2, r3, #4
 80047dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047e0:	4413      	add	r3, r2
 80047e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d17b      	bne.n	8004900 <USB_EPStartXfer+0x11e8>
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004818:	b29b      	uxth	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004820:	4413      	add	r3, r2
 8004822:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004826:	463b      	mov	r3, r7
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004832:	4413      	add	r3, r2
 8004834:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800483c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004848:	b29a      	uxth	r2, r3
 800484a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004854:	2b3e      	cmp	r3, #62	; 0x3e
 8004856:	d923      	bls.n	80048a0 <USB_EPStartXfer+0x1188>
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <USB_EPStartXfer+0x1160>
 800486e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004872:	3b01      	subs	r3, #1
 8004874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29a      	uxth	r2, r3
 8004880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004884:	b29b      	uxth	r3, r3
 8004886:	029b      	lsls	r3, r3, #10
 8004888:	b29b      	uxth	r3, r3
 800488a:	4313      	orrs	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004896:	b29a      	uxth	r2, r3
 8004898:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e053      	b.n	8004948 <USB_EPStartXfer+0x1230>
 80048a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10c      	bne.n	80048c2 <USB_EPStartXfer+0x11aa>
 80048a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e042      	b.n	8004948 <USB_EPStartXfer+0x1230>
 80048c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <USB_EPStartXfer+0x11ca>
 80048d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048dc:	3301      	adds	r3, #1
 80048de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048fc:	801a      	strh	r2, [r3, #0]
 80048fe:	e023      	b.n	8004948 <USB_EPStartXfer+0x1230>
 8004900:	463b      	mov	r3, r7
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d11e      	bne.n	8004948 <USB_EPStartXfer+0x1230>
 800490a:	1d3b      	adds	r3, r7, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800491a:	4413      	add	r3, r2
 800491c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004920:	463b      	mov	r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	011a      	lsls	r2, r3, #4
 8004928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800492c:	4413      	add	r3, r2
 800492e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493a:	b29a      	uxth	r2, r3
 800493c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	e001      	b.n	8004948 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e02e      	b.n	80049a6 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	463b      	mov	r3, r7
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004966:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800496a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800496e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004972:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004976:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800497a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d020      	beq.n	8004a04 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d8:	81bb      	strh	r3, [r7, #12]
 80049da:	89bb      	ldrh	r3, [r7, #12]
 80049dc:	f083 0310 	eor.w	r3, r3, #16
 80049e0:	81bb      	strh	r3, [r7, #12]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	89bb      	ldrh	r3, [r7, #12]
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
 8004a02:	e01f      	b.n	8004a44 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	81fb      	strh	r3, [r7, #14]
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a22:	81fb      	strh	r3, [r7, #14]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7b1b      	ldrb	r3, [r3, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 809d 	bne.w	8004b9e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d04c      	beq.n	8004b06 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	823b      	strh	r3, [r7, #16]
 8004a7a:	8a3b      	ldrh	r3, [r7, #16]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <USB_EPClearStall+0x6c>
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	81fb      	strh	r3, [r7, #14]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	78db      	ldrb	r3, [r3, #3]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d06c      	beq.n	8004b9e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ada:	81bb      	strh	r3, [r7, #12]
 8004adc:	89bb      	ldrh	r3, [r7, #12]
 8004ade:	f083 0320 	eor.w	r3, r3, #32
 8004ae2:	81bb      	strh	r3, [r7, #12]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	89bb      	ldrh	r3, [r7, #12]
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]
 8004b04:	e04b      	b.n	8004b9e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	82fb      	strh	r3, [r7, #22]
 8004b14:	8afb      	ldrh	r3, [r7, #22]
 8004b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01b      	beq.n	8004b56 <USB_EPClearStall+0x106>
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	82bb      	strh	r3, [r7, #20]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	8abb      	ldrh	r3, [r7, #20]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	827b      	strh	r3, [r7, #18]
 8004b6e:	8a7b      	ldrh	r3, [r7, #18]
 8004b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b74:	827b      	strh	r3, [r7, #18]
 8004b76:	8a7b      	ldrh	r3, [r7, #18]
 8004b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b7c:	827b      	strh	r3, [r7, #18]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	8a7b      	ldrh	r3, [r7, #18]
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b08b      	sub	sp, #44	; 0x2c
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	80fb      	strh	r3, [r7, #6]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c42:	88bb      	ldrh	r3, [r7, #4]
 8004c44:	3301      	adds	r3, #1
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	005a      	lsls	r2, r3, #1
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	e01e      	b.n	8004ca4 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b21b      	sxth	r3, r3
 8004c7e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	8a7a      	ldrh	r2, [r7, #18]
 8004c84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	3302      	adds	r3, #2
 8004c90:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3301      	adds	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1dd      	bne.n	8004c66 <USB_WritePMA+0x3a>
  }
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	372c      	adds	r7, #44	; 0x2c
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b08b      	sub	sp, #44	; 0x2c
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	80fb      	strh	r3, [r7, #6]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004ccc:	88bb      	ldrh	r3, [r7, #4]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	005a      	lsls	r2, r3, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	e01b      	b.n	8004d28 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	3302      	adds	r3, #2
 8004d20:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	3b01      	subs	r3, #1
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e0      	bne.n	8004cf0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	701a      	strb	r2, [r3, #0]
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	372c      	adds	r7, #44	; 0x2c
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d60:	2304      	movs	r3, #4
 8004d62:	2203      	movs	r2, #3
 8004d64:	2181      	movs	r1, #129	; 0x81
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 fc83 	bl	8006672 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004d72:	2010      	movs	r0, #16
 8004d74:	f001 fd92 	bl	800689c <USBD_static_malloc>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e005      	b.n	8004d9a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d94:	2200      	movs	r2, #0
 8004d96:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004dae:	2181      	movs	r1, #129	; 0x81
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 fc84 	bl	80066be <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 fd71 	bl	80068b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d045      	beq.n	8004e9e <USBD_HID_Setup+0xba>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	f040 80d3 	bne.w	8004fbe <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	3b02      	subs	r3, #2
 8004e1e:	2b09      	cmp	r3, #9
 8004e20:	d835      	bhi.n	8004e8e <USBD_HID_Setup+0xaa>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <USBD_HID_Setup+0x44>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e7f 	.word	0x08004e7f
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e8f 	.word	0x08004e8f
 8004e34:	08004e8f 	.word	0x08004e8f
 8004e38:	08004e8f 	.word	0x08004e8f
 8004e3c:	08004e8f 	.word	0x08004e8f
 8004e40:	08004e8f 	.word	0x08004e8f
 8004e44:	08004e8f 	.word	0x08004e8f
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e51 	.word	0x08004e51
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	885b      	ldrh	r3, [r3, #2]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	601a      	str	r2, [r3, #0]
          break;
 8004e5c:	e01e      	b.n	8004e9c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2201      	movs	r2, #1
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 f944 	bl	80060f2 <USBD_CtlSendData>
          break;
 8004e6a:	e017      	b.n	8004e9c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	885b      	ldrh	r3, [r3, #2]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]
          break;
 8004e7c:	e00e      	b.n	8004e9c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2201      	movs	r2, #1
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 f933 	bl	80060f2 <USBD_CtlSendData>
          break;
 8004e8c:	e006      	b.n	8004e9c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f8c4 	bl	800601e <USBD_CtlError>
          ret = USBD_FAIL;
 8004e96:	2302      	movs	r3, #2
 8004e98:	75fb      	strb	r3, [r7, #23]
          break;
 8004e9a:	bf00      	nop
      }
      break;
 8004e9c:	e096      	b.n	8004fcc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	f200 8083 	bhi.w	8004fae <USBD_HID_Setup+0x1ca>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <USBD_HID_Setup+0xcc>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee1 	.word	0x08004ee1
 8004eb4:	08004faf 	.word	0x08004faf
 8004eb8:	08004faf 	.word	0x08004faf
 8004ebc:	08004faf 	.word	0x08004faf
 8004ec0:	08004faf 	.word	0x08004faf
 8004ec4:	08004faf 	.word	0x08004faf
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004faf 	.word	0x08004faf
 8004ed0:	08004faf 	.word	0x08004faf
 8004ed4:	08004faf 	.word	0x08004faf
 8004ed8:	08004f61 	.word	0x08004f61
 8004edc:	08004f89 	.word	0x08004f89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d107      	bne.n	8004efa <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004eea:	f107 030e 	add.w	r3, r7, #14
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f001 f8fd 	bl	80060f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ef8:	e060      	b.n	8004fbc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 f88e 	bl	800601e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f02:	2302      	movs	r3, #2
 8004f04:	75fb      	strb	r3, [r7, #23]
          break;
 8004f06:	e059      	b.n	8004fbc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	885b      	ldrh	r3, [r3, #2]
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b22      	cmp	r3, #34	; 0x22
 8004f12:	d108      	bne.n	8004f26 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	88db      	ldrh	r3, [r3, #6]
 8004f18:	2b3f      	cmp	r3, #63	; 0x3f
 8004f1a:	bf28      	it	cs
 8004f1c:	233f      	movcs	r3, #63	; 0x3f
 8004f1e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <USBD_HID_Setup+0x1f4>)
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e015      	b.n	8004f52 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	885b      	ldrh	r3, [r3, #2]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b21      	cmp	r3, #33	; 0x21
 8004f30:	d108      	bne.n	8004f44 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <USBD_HID_Setup+0x1f8>)
 8004f34:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	2b09      	cmp	r3, #9
 8004f3c:	bf28      	it	cs
 8004f3e:	2309      	movcs	r3, #9
 8004f40:	83fb      	strh	r3, [r7, #30]
 8004f42:	e006      	b.n	8004f52 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 f869 	bl	800601e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f50:	e034      	b.n	8004fbc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8004f52:	8bfb      	ldrh	r3, [r7, #30]
 8004f54:	461a      	mov	r2, r3
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 f8ca 	bl	80060f2 <USBD_CtlSendData>
          break;
 8004f5e:	e02d      	b.n	8004fbc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d107      	bne.n	8004f7a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f001 f8bd 	bl	80060f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f78:	e020      	b.n	8004fbc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 f84e 	bl	800601e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f82:	2302      	movs	r3, #2
 8004f84:	75fb      	strb	r3, [r7, #23]
          break;
 8004f86:	e019      	b.n	8004fbc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d106      	bne.n	8004fa0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	885b      	ldrh	r3, [r3, #2]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f9e:	e00d      	b.n	8004fbc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 f83b 	bl	800601e <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	75fb      	strb	r3, [r7, #23]
          break;
 8004fac:	e006      	b.n	8004fbc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f834 	bl	800601e <USBD_CtlError>
          ret = USBD_FAIL;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fba:	bf00      	nop
      }
      break;
 8004fbc:	e006      	b.n	8004fcc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 f82c 	bl	800601e <USBD_CtlError>
      ret = USBD_FAIL;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fca:	bf00      	nop
  }

  return ret;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200000c8 	.word	0x200000c8
 8004fdc:	200000b0 	.word	0x200000b0

08004fe0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d10c      	bne.n	800501a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	7b1b      	ldrb	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2201      	movs	r2, #1
 800500c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	2181      	movs	r1, #129	; 0x81
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 fbfa 	bl	800680e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2222      	movs	r2, #34	; 0x22
 8005030:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005032:	4b03      	ldr	r3, [pc, #12]	; (8005040 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000044 	.word	0x20000044

08005044 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2222      	movs	r2, #34	; 0x22
 8005050:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000068 	.word	0x20000068

08005064 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2222      	movs	r2, #34	; 0x22
 8005070:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005072:	4b03      	ldr	r3, [pc, #12]	; (8005080 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	2000008c 	.word	0x2000008c

08005084 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005096:	2200      	movs	r2, #0
 8005098:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
	...

080050a8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	220a      	movs	r2, #10
 80050b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80050b6:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	200000bc 	.word	0x200000bc

080050c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050dc:	2302      	movs	r3, #2
 80050de:	e01a      	b.n	8005116 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f001 fa4c 	bl	80065ac <USBD_LL_Init>

  return USBD_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e001      	b.n	8005144 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005140:	2302      	movs	r3, #2
 8005142:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 fa6f 	bl	800663c <USBD_LL_Start>

  return USBD_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005188:	2302      	movs	r3, #2
 800518a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	4611      	mov	r1, r2
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	4611      	mov	r1, r2
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3

  return USBD_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fed7 	bl	8005fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	2b02      	cmp	r3, #2
 800521a:	d016      	beq.n	800524a <USBD_LL_SetupStage+0x6a>
 800521c:	2b02      	cmp	r3, #2
 800521e:	d81c      	bhi.n	800525a <USBD_LL_SetupStage+0x7a>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <USBD_LL_SetupStage+0x4a>
 8005224:	2b01      	cmp	r3, #1
 8005226:	d008      	beq.n	800523a <USBD_LL_SetupStage+0x5a>
 8005228:	e017      	b.n	800525a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9ca 	bl	80055cc <USBD_StdDevReq>
      break;
 8005238:	e01a      	b.n	8005270 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa2c 	bl	80056a0 <USBD_StdItfReq>
      break;
 8005248:	e012      	b.n	8005270 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa6c 	bl	8005730 <USBD_StdEPReq>
      break;
 8005258:	e00a      	b.n	8005270 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005264:	b2db      	uxtb	r3, r3
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fa47 	bl	80066fc <USBD_LL_StallEP>
      break;
 800526e:	bf00      	nop
  }

  return USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	460b      	mov	r3, r1
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d14b      	bne.n	8005326 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005294:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800529c:	2b03      	cmp	r3, #3
 800529e:	d134      	bne.n	800530a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d919      	bls.n	80052e0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d203      	bcs.n	80052ce <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	e002      	b.n	80052d4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 ff38 	bl	800614e <USBD_CtlContinueRx>
 80052de:	e038      	b.n	8005352 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d105      	bne.n	8005302 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 ff35 	bl	8006172 <USBD_CtlSendStatus>
 8005308:	e023      	b.n	8005352 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005310:	2b05      	cmp	r3, #5
 8005312:	d11e      	bne.n	8005352 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800531c:	2100      	movs	r1, #0
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f001 f9ec 	bl	80066fc <USBD_LL_StallEP>
 8005324:	e015      	b.n	8005352 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005338:	2b03      	cmp	r3, #3
 800533a:	d108      	bne.n	800534e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	7afa      	ldrb	r2, [r7, #11]
 8005346:	4611      	mov	r1, r2
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	4798      	blx	r3
 800534c:	e001      	b.n	8005352 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800534e:	2302      	movs	r3, #2
 8005350:	e000      	b.n	8005354 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	460b      	mov	r3, r1
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800536a:	7afb      	ldrb	r3, [r7, #11]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d17f      	bne.n	8005470 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3314      	adds	r3, #20
 8005374:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800537c:	2b02      	cmp	r3, #2
 800537e:	d15c      	bne.n	800543a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d915      	bls.n	80053b8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fec0 	bl	800612a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053aa:	2300      	movs	r3, #0
 80053ac:	2200      	movs	r2, #0
 80053ae:	2100      	movs	r1, #0
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f001 fa4f 	bl	8006854 <USBD_LL_PrepareReceive>
 80053b6:	e04e      	b.n	8005456 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	6912      	ldr	r2, [r2, #16]
 80053c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80053c4:	fb02 f201 	mul.w	r2, r2, r1
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11c      	bne.n	8005408 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d316      	bcc.n	8005408 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d20f      	bcs.n	8005408 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fe9c 	bl	800612a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053fa:	2300      	movs	r3, #0
 80053fc:	2200      	movs	r2, #0
 80053fe:	2100      	movs	r1, #0
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f001 fa27 	bl	8006854 <USBD_LL_PrepareReceive>
 8005406:	e026      	b.n	8005456 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800541a:	2b03      	cmp	r3, #3
 800541c:	d105      	bne.n	800542a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f001 f965 	bl	80066fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 feb0 	bl	8006198 <USBD_CtlReceiveStatus>
 8005438:	e00d      	b.n	8005456 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005440:	2b04      	cmp	r3, #4
 8005442:	d004      	beq.n	800544e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f001 f953 	bl	80066fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d11d      	bne.n	800549c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff fe81 	bl	8005168 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800546e:	e015      	b.n	800549c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005482:	2b03      	cmp	r3, #3
 8005484:	d108      	bne.n	8005498 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	7afa      	ldrb	r2, [r7, #11]
 8005490:	4611      	mov	r1, r2
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	4798      	blx	r3
 8005496:	e001      	b.n	800549c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005498:	2302      	movs	r3, #2
 800549a:	e000      	b.n	800549e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054ae:	2340      	movs	r3, #64	; 0x40
 80054b0:	2200      	movs	r2, #0
 80054b2:	2100      	movs	r1, #0
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 f8dc 	bl	8006672 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2240      	movs	r2, #64	; 0x40
 80054c6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	2200      	movs	r2, #0
 80054ce:	2180      	movs	r1, #128	; 0x80
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f8ce 	bl	8006672 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2240      	movs	r2, #64	; 0x40
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6852      	ldr	r2, [r2, #4]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	4611      	mov	r1, r2
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
  }

  return USBD_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr

0800556e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557c:	2b04      	cmp	r3, #4
 800557e:	d105      	bne.n	800558c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d10b      	bne.n	80055c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055e2:	2b40      	cmp	r3, #64	; 0x40
 80055e4:	d005      	beq.n	80055f2 <USBD_StdDevReq+0x26>
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d84f      	bhi.n	800568a <USBD_StdDevReq+0xbe>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <USBD_StdDevReq+0x36>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d14b      	bne.n	800568a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
      break;
 8005600:	e048      	b.n	8005694 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	2b09      	cmp	r3, #9
 8005608:	d839      	bhi.n	800567e <USBD_StdDevReq+0xb2>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <USBD_StdDevReq+0x44>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005661 	.word	0x08005661
 8005614:	08005675 	.word	0x08005675
 8005618:	0800567f 	.word	0x0800567f
 800561c:	0800566b 	.word	0x0800566b
 8005620:	0800567f 	.word	0x0800567f
 8005624:	08005643 	.word	0x08005643
 8005628:	08005639 	.word	0x08005639
 800562c:	0800567f 	.word	0x0800567f
 8005630:	08005657 	.word	0x08005657
 8005634:	0800564d 	.word	0x0800564d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9dc 	bl	80059f8 <USBD_GetDescriptor>
          break;
 8005640:	e022      	b.n	8005688 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fb3f 	bl	8005cc8 <USBD_SetAddress>
          break;
 800564a:	e01d      	b.n	8005688 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fb7e 	bl	8005d50 <USBD_SetConfig>
          break;
 8005654:	e018      	b.n	8005688 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fc07 	bl	8005e6c <USBD_GetConfig>
          break;
 800565e:	e013      	b.n	8005688 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc37 	bl	8005ed6 <USBD_GetStatus>
          break;
 8005668:	e00e      	b.n	8005688 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fc65 	bl	8005f3c <USBD_SetFeature>
          break;
 8005672:	e009      	b.n	8005688 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc74 	bl	8005f64 <USBD_ClrFeature>
          break;
 800567c:	e004      	b.n	8005688 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fccc 	bl	800601e <USBD_CtlError>
          break;
 8005686:	bf00      	nop
      }
      break;
 8005688:	e004      	b.n	8005694 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fcc6 	bl	800601e <USBD_CtlError>
      break;
 8005692:	bf00      	nop
  }

  return ret;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop

080056a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d005      	beq.n	80056c6 <USBD_StdItfReq+0x26>
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d82e      	bhi.n	800571c <USBD_StdItfReq+0x7c>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <USBD_StdItfReq+0x26>
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d12a      	bne.n	800571c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	3b01      	subs	r3, #1
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d81d      	bhi.n	800570e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	889b      	ldrh	r3, [r3, #4]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d813      	bhi.n	8005704 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	88db      	ldrh	r3, [r3, #6]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d110      	bne.n	8005718 <USBD_StdItfReq+0x78>
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fd38 	bl	8006172 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005702:	e009      	b.n	8005718 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fc89 	bl	800601e <USBD_CtlError>
          break;
 800570c:	e004      	b.n	8005718 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fc84 	bl	800601e <USBD_CtlError>
          break;
 8005716:	e000      	b.n	800571a <USBD_StdItfReq+0x7a>
          break;
 8005718:	bf00      	nop
      }
      break;
 800571a:	e004      	b.n	8005726 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fc7d 	bl	800601e <USBD_CtlError>
      break;
 8005724:	bf00      	nop
  }

  return USBD_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	889b      	ldrh	r3, [r3, #4]
 8005742:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d007      	beq.n	8005760 <USBD_StdEPReq+0x30>
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	f200 8146 	bhi.w	80059e2 <USBD_StdEPReq+0x2b2>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <USBD_StdEPReq+0x40>
 800575a:	2b20      	cmp	r3, #32
 800575c:	f040 8141 	bne.w	80059e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
      break;
 800576e:	e13d      	b.n	80059ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005778:	2b20      	cmp	r3, #32
 800577a:	d10a      	bne.n	8005792 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
 800578a:	4603      	mov	r3, r0
 800578c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	e12d      	b.n	80059ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d007      	beq.n	80057aa <USBD_StdEPReq+0x7a>
 800579a:	2b03      	cmp	r3, #3
 800579c:	f300 811b 	bgt.w	80059d6 <USBD_StdEPReq+0x2a6>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d072      	beq.n	800588a <USBD_StdEPReq+0x15a>
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d03a      	beq.n	800581e <USBD_StdEPReq+0xee>
 80057a8:	e115      	b.n	80059d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d002      	beq.n	80057ba <USBD_StdEPReq+0x8a>
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d015      	beq.n	80057e4 <USBD_StdEPReq+0xb4>
 80057b8:	e02b      	b.n	8005812 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <USBD_StdEPReq+0xaa>
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d009      	beq.n	80057da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 ff96 	bl	80066fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 ff92 	bl	80066fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057d8:	e020      	b.n	800581c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fc1e 	bl	800601e <USBD_CtlError>
              break;
 80057e2:	e01b      	b.n	800581c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	885b      	ldrh	r3, [r3, #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10e      	bne.n	800580a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <USBD_StdEPReq+0xda>
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d008      	beq.n	800580a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	88db      	ldrh	r3, [r3, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005800:	7bbb      	ldrb	r3, [r7, #14]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 ff79 	bl	80066fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fcb1 	bl	8006172 <USBD_CtlSendStatus>

              break;
 8005810:	e004      	b.n	800581c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fc02 	bl	800601e <USBD_CtlError>
              break;
 800581a:	bf00      	nop
          }
          break;
 800581c:	e0e0      	b.n	80059e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005824:	2b02      	cmp	r3, #2
 8005826:	d002      	beq.n	800582e <USBD_StdEPReq+0xfe>
 8005828:	2b03      	cmp	r3, #3
 800582a:	d015      	beq.n	8005858 <USBD_StdEPReq+0x128>
 800582c:	e026      	b.n	800587c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00c      	beq.n	800584e <USBD_StdEPReq+0x11e>
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d009      	beq.n	800584e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 ff5c 	bl	80066fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 ff58 	bl	80066fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800584c:	e01c      	b.n	8005888 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fbe4 	bl	800601e <USBD_CtlError>
              break;
 8005856:	e017      	b.n	8005888 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	885b      	ldrh	r3, [r3, #2]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d112      	bne.n	8005886 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005866:	2b00      	cmp	r3, #0
 8005868:	d004      	beq.n	8005874 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800586a:	7bbb      	ldrb	r3, [r7, #14]
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 ff63 	bl	800673a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fc7c 	bl	8006172 <USBD_CtlSendStatus>
              }
              break;
 800587a:	e004      	b.n	8005886 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fbcd 	bl	800601e <USBD_CtlError>
              break;
 8005884:	e000      	b.n	8005888 <USBD_StdEPReq+0x158>
              break;
 8005886:	bf00      	nop
          }
          break;
 8005888:	e0aa      	b.n	80059e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005890:	2b02      	cmp	r3, #2
 8005892:	d002      	beq.n	800589a <USBD_StdEPReq+0x16a>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d032      	beq.n	80058fe <USBD_StdEPReq+0x1ce>
 8005898:	e097      	b.n	80059ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <USBD_StdEPReq+0x180>
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d004      	beq.n	80058b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fbb8 	bl	800601e <USBD_CtlError>
                break;
 80058ae:	e091      	b.n	80059d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	da0b      	bge.n	80058d0 <USBD_StdEPReq+0x1a0>
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	3310      	adds	r3, #16
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	3304      	adds	r3, #4
 80058ce:	e00b      	b.n	80058e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	3304      	adds	r3, #4
 80058e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2202      	movs	r2, #2
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fbfb 	bl	80060f2 <USBD_CtlSendData>
              break;
 80058fc:	e06a      	b.n	80059d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005902:	2b00      	cmp	r3, #0
 8005904:	da11      	bge.n	800592a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	3318      	adds	r3, #24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d117      	bne.n	8005950 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb7b 	bl	800601e <USBD_CtlError>
                  break;
 8005928:	e054      	b.n	80059d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800592a:	7bbb      	ldrb	r3, [r7, #14]
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb68 	bl	800601e <USBD_CtlError>
                  break;
 800594e:	e041      	b.n	80059d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da0b      	bge.n	8005970 <USBD_StdEPReq+0x240>
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	3310      	adds	r3, #16
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	3304      	adds	r3, #4
 800596e:	e00b      	b.n	8005988 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	3304      	adds	r3, #4
 8005988:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <USBD_StdEPReq+0x266>
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d103      	bne.n	800599e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	e00e      	b.n	80059bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800599e:	7bbb      	ldrb	r3, [r7, #14]
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fee8 	bl	8006778 <USBD_LL_IsStallEP>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e002      	b.n	80059bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2202      	movs	r2, #2
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fb95 	bl	80060f2 <USBD_CtlSendData>
              break;
 80059c8:	e004      	b.n	80059d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb26 	bl	800601e <USBD_CtlError>
              break;
 80059d2:	bf00      	nop
          }
          break;
 80059d4:	e004      	b.n	80059e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb20 	bl	800601e <USBD_CtlError>
          break;
 80059de:	bf00      	nop
      }
      break;
 80059e0:	e004      	b.n	80059ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fb1a 	bl	800601e <USBD_CtlError>
      break;
 80059ea:	bf00      	nop
  }

  return ret;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	885b      	ldrh	r3, [r3, #2]
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	f200 8128 	bhi.w	8005c6e <USBD_GetDescriptor+0x276>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <USBD_GetDescriptor+0x2c>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005a99 	.word	0x08005a99
 8005a30:	08005c6f 	.word	0x08005c6f
 8005a34:	08005c6f 	.word	0x08005c6f
 8005a38:	08005c0f 	.word	0x08005c0f
 8005a3c:	08005c3b 	.word	0x08005c3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	7c12      	ldrb	r2, [r2, #16]
 8005a4c:	f107 0108 	add.w	r1, r7, #8
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
 8005a54:	60f8      	str	r0, [r7, #12]
      break;
 8005a56:	e112      	b.n	8005c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7c1b      	ldrb	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10d      	bne.n	8005a7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	f107 0208 	add.w	r2, r7, #8
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
 8005a70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	2202      	movs	r2, #2
 8005a78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a7a:	e100      	b.n	8005c7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	f107 0208 	add.w	r2, r7, #8
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3301      	adds	r3, #1
 8005a92:	2202      	movs	r2, #2
 8005a94:	701a      	strb	r2, [r3, #0]
      break;
 8005a96:	e0f2      	b.n	8005c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	885b      	ldrh	r3, [r3, #2]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	f200 80ac 	bhi.w	8005bfc <USBD_GetDescriptor+0x204>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <USBD_GetDescriptor+0xb4>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ac5 	.word	0x08005ac5
 8005ab0:	08005af9 	.word	0x08005af9
 8005ab4:	08005b2d 	.word	0x08005b2d
 8005ab8:	08005b61 	.word	0x08005b61
 8005abc:	08005b95 	.word	0x08005b95
 8005ac0:	08005bc9 	.word	0x08005bc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	7c12      	ldrb	r2, [r2, #16]
 8005adc:	f107 0108 	add.w	r1, r7, #8
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ae6:	e091      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa97 	bl	800601e <USBD_CtlError>
            err++;
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	3301      	adds	r3, #1
 8005af4:	72fb      	strb	r3, [r7, #11]
          break;
 8005af6:	e089      	b.n	8005c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	7c12      	ldrb	r2, [r2, #16]
 8005b10:	f107 0108 	add.w	r1, r7, #8
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1a:	e077      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa7d 	bl	800601e <USBD_CtlError>
            err++;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	3301      	adds	r3, #1
 8005b28:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2a:	e06f      	b.n	8005c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	7c12      	ldrb	r2, [r2, #16]
 8005b44:	f107 0108 	add.w	r1, r7, #8
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b4e:	e05d      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa63 	bl	800601e <USBD_CtlError>
            err++;
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b5e:	e055      	b.n	8005c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	7c12      	ldrb	r2, [r2, #16]
 8005b78:	f107 0108 	add.w	r1, r7, #8
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b82:	e043      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa49 	bl	800601e <USBD_CtlError>
            err++;
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	72fb      	strb	r3, [r7, #11]
          break;
 8005b92:	e03b      	b.n	8005c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	7c12      	ldrb	r2, [r2, #16]
 8005bac:	f107 0108 	add.w	r1, r7, #8
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
 8005bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bb6:	e029      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa2f 	bl	800601e <USBD_CtlError>
            err++;
 8005bc0:	7afb      	ldrb	r3, [r7, #11]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bc6:	e021      	b.n	8005c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	7c12      	ldrb	r2, [r2, #16]
 8005be0:	f107 0108 	add.w	r1, r7, #8
 8005be4:	4610      	mov	r0, r2
 8005be6:	4798      	blx	r3
 8005be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bea:	e00f      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa15 	bl	800601e <USBD_CtlError>
            err++;
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfa:	e007      	b.n	8005c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa0d 	bl	800601e <USBD_CtlError>
          err++;
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	3301      	adds	r3, #1
 8005c08:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005c0a:	e038      	b.n	8005c7e <USBD_GetDescriptor+0x286>
 8005c0c:	e037      	b.n	8005c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7c1b      	ldrb	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	f107 0208 	add.w	r2, r7, #8
 8005c22:	4610      	mov	r0, r2
 8005c24:	4798      	blx	r3
 8005c26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c28:	e029      	b.n	8005c7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9f6 	bl	800601e <USBD_CtlError>
        err++;
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	3301      	adds	r3, #1
 8005c36:	72fb      	strb	r3, [r7, #11]
      break;
 8005c38:	e021      	b.n	8005c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7c1b      	ldrb	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f107 0208 	add.w	r2, r7, #8
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4798      	blx	r3
 8005c52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	2207      	movs	r2, #7
 8005c5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c5c:	e00f      	b.n	8005c7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f9dc 	bl	800601e <USBD_CtlError>
        err++;
 8005c66:	7afb      	ldrb	r3, [r7, #11]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c6c:	e007      	b.n	8005c7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f9d4 	bl	800601e <USBD_CtlError>
      err++;
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c7c:	bf00      	nop
  }

  if (err != 0U)
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11c      	bne.n	8005cbe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d011      	beq.n	8005cae <USBD_GetDescriptor+0x2b6>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	88db      	ldrh	r3, [r3, #6]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	88da      	ldrh	r2, [r3, #6]
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bf28      	it	cs
 8005c9c:	4613      	movcs	r3, r2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ca2:	893b      	ldrh	r3, [r7, #8]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa22 	bl	80060f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	88db      	ldrh	r3, [r3, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa5b 	bl	8006172 <USBD_CtlSendStatus>
 8005cbc:	e000      	b.n	8005cc0 <USBD_GetDescriptor+0x2c8>
    return;
 8005cbe:	bf00      	nop
    }
  }
}
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop

08005cc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	889b      	ldrh	r3, [r3, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d130      	bne.n	8005d3c <USBD_SetAddress+0x74>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	88db      	ldrh	r3, [r3, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d12c      	bne.n	8005d3c <USBD_SetAddress+0x74>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	885b      	ldrh	r3, [r3, #2]
 8005ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce8:	d828      	bhi.n	8005d3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	885b      	ldrh	r3, [r3, #2]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d104      	bne.n	8005d0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f98b 	bl	800601e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d08:	e01d      	b.n	8005d46 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7bfa      	ldrb	r2, [r7, #15]
 8005d0e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fd5a 	bl	80067d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fa28 	bl	8006172 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d30:	e009      	b.n	8005d46 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3a:	e004      	b.n	8005d46 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f96d 	bl	800601e <USBD_CtlError>
  }
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	885b      	ldrh	r3, [r3, #2]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d64:	4b40      	ldr	r3, [pc, #256]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d904      	bls.n	8005d76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f955 	bl	800601e <USBD_CtlError>
 8005d74:	e075      	b.n	8005e62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d002      	beq.n	8005d86 <USBD_SetConfig+0x36>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d023      	beq.n	8005dcc <USBD_SetConfig+0x7c>
 8005d84:	e062      	b.n	8005e4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d86:	4b38      	ldr	r3, [pc, #224]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01a      	beq.n	8005dc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <USBD_SetConfig+0x118>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <USBD_SetConfig+0x118>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff f9e8 	bl	800517c <USBD_SetClassConfig>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d104      	bne.n	8005dbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f932 	bl	800601e <USBD_CtlError>
            return;
 8005dba:	e052      	b.n	8005e62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9d8 	bl	8006172 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dc2:	e04e      	b.n	8005e62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f9d4 	bl	8006172 <USBD_CtlSendStatus>
        break;
 8005dca:	e04a      	b.n	8005e62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005dcc:	4b26      	ldr	r3, [pc, #152]	; (8005e68 <USBD_SetConfig+0x118>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d112      	bne.n	8005dfa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005ddc:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <USBD_SetConfig+0x118>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005de6:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <USBD_SetConfig+0x118>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff f9e4 	bl	80051ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9bd 	bl	8006172 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005df8:	e033      	b.n	8005e62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <USBD_SetConfig+0x118>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d01d      	beq.n	8005e44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff f9d2 	bl	80051ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <USBD_SetConfig+0x118>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <USBD_SetConfig+0x118>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff f9a8 	bl	800517c <USBD_SetClassConfig>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d104      	bne.n	8005e3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8f2 	bl	800601e <USBD_CtlError>
            return;
 8005e3a:	e012      	b.n	8005e62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f998 	bl	8006172 <USBD_CtlSendStatus>
        break;
 8005e42:	e00e      	b.n	8005e62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f994 	bl	8006172 <USBD_CtlSendStatus>
        break;
 8005e4a:	e00a      	b.n	8005e62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8e5 	bl	800601e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <USBD_SetConfig+0x118>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff f9ad 	bl	80051ba <USBD_ClrClassConfig>
        break;
 8005e60:	bf00      	nop
    }
  }
}
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	2000017c 	.word	0x2000017c

08005e6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	88db      	ldrh	r3, [r3, #6]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d004      	beq.n	8005e88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8cc 	bl	800601e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e86:	e022      	b.n	8005ece <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	dc02      	bgt.n	8005e98 <USBD_GetConfig+0x2c>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	dc03      	bgt.n	8005e9e <USBD_GetConfig+0x32>
 8005e96:	e015      	b.n	8005ec4 <USBD_GetConfig+0x58>
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d00b      	beq.n	8005eb4 <USBD_GetConfig+0x48>
 8005e9c:	e012      	b.n	8005ec4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f920 	bl	80060f2 <USBD_CtlSendData>
        break;
 8005eb2:	e00c      	b.n	8005ece <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f918 	bl	80060f2 <USBD_CtlSendData>
        break;
 8005ec2:	e004      	b.n	8005ece <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f8a9 	bl	800601e <USBD_CtlError>
        break;
 8005ecc:	bf00      	nop
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d81e      	bhi.n	8005f2a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	88db      	ldrh	r3, [r3, #6]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d004      	beq.n	8005efe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f891 	bl	800601e <USBD_CtlError>
        break;
 8005efc:	e01a      	b.n	8005f34 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d005      	beq.n	8005f1a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f043 0202 	orr.w	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	2202      	movs	r2, #2
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f8e5 	bl	80060f2 <USBD_CtlSendData>
      break;
 8005f28:	e004      	b.n	8005f34 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f876 	bl	800601e <USBD_CtlError>
      break;
 8005f32:	bf00      	nop
  }
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	885b      	ldrh	r3, [r3, #2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d106      	bne.n	8005f5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f90b 	bl	8006172 <USBD_CtlSendStatus>
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f74:	3b01      	subs	r3, #1
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d80b      	bhi.n	8005f92 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	885b      	ldrh	r3, [r3, #2]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d10c      	bne.n	8005f9c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8f1 	bl	8006172 <USBD_CtlSendStatus>
      }
      break;
 8005f90:	e004      	b.n	8005f9c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f842 	bl	800601e <USBD_CtlError>
      break;
 8005f9a:	e000      	b.n	8005f9e <USBD_ClrFeature+0x3a>
      break;
 8005f9c:	bf00      	nop
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785a      	ldrb	r2, [r3, #1]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	3303      	adds	r3, #3
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	3305      	adds	r3, #5
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	3306      	adds	r3, #6
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	3307      	adds	r3, #7
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	b29b      	uxth	r3, r3
 800600c:	4413      	add	r3, r2
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	80da      	strh	r2, [r3, #6]

}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006028:	2180      	movs	r1, #128	; 0x80
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fb66 	bl	80066fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006030:	2100      	movs	r1, #0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb62 	bl	80066fc <USBD_LL_StallEP>
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d032      	beq.n	80060bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f834 	bl	80060c4 <USBD_GetLen>
 800605c:	4603      	mov	r3, r0
 800605e:	3301      	adds	r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	75fa      	strb	r2, [r7, #23]
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	75fa      	strb	r2, [r7, #23]
 8006082:	461a      	mov	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4413      	add	r3, r2
 8006088:	2203      	movs	r2, #3
 800608a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800608c:	e012      	b.n	80060b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	60fa      	str	r2, [r7, #12]
 8006094:	7dfa      	ldrb	r2, [r7, #23]
 8006096:	1c51      	adds	r1, r2, #1
 8006098:	75f9      	strb	r1, [r7, #23]
 800609a:	4611      	mov	r1, r2
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	440a      	add	r2, r1
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	75fa      	strb	r2, [r7, #23]
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e8      	bne.n	800608e <USBD_GetString+0x4e>
    }
  }
}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80060d0:	e005      	b.n	80060de <USBD_GetLen+0x1a>
  {
    len++;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	3301      	adds	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3301      	adds	r3, #1
 80060dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f5      	bne.n	80060d2 <USBD_GetLen+0xe>
  }

  return len;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	4613      	mov	r3, r2
 80060fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2202      	movs	r2, #2
 8006104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006108:	88fa      	ldrh	r2, [r7, #6]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	2100      	movs	r1, #0
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fb77 	bl	800680e <USBD_LL_Transmit>

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	4613      	mov	r3, r2
 8006136:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	2100      	movs	r1, #0
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fb65 	bl	800680e <USBD_LL_Transmit>

  return USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	4613      	mov	r3, r2
 800615a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	2100      	movs	r1, #0
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fb76 	bl	8006854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2204      	movs	r2, #4
 800617e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006182:	2300      	movs	r3, #0
 8006184:	2200      	movs	r2, #0
 8006186:	2100      	movs	r1, #0
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fb40 	bl	800680e <USBD_LL_Transmit>

  return USBD_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2205      	movs	r2, #5
 80061a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061a8:	2300      	movs	r3, #0
 80061aa:	2200      	movs	r2, #0
 80061ac:	2100      	movs	r1, #0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fb50 	bl	8006854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061c4:	2200      	movs	r2, #0
 80061c6:	490e      	ldr	r1, [pc, #56]	; (8006200 <MX_USB_DEVICE_Init+0x40>)
 80061c8:	480e      	ldr	r0, [pc, #56]	; (8006204 <MX_USB_DEVICE_Init+0x44>)
 80061ca:	f7fe ff7d 	bl	80050c8 <USBD_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061d4:	f7fa f874 	bl	80002c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <MX_USB_DEVICE_Init+0x48>)
 80061da:	480a      	ldr	r0, [pc, #40]	; (8006204 <MX_USB_DEVICE_Init+0x44>)
 80061dc:	f7fe ff9f 	bl	800511e <USBD_RegisterClass>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061e6:	f7fa f86b 	bl	80002c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061ea:	4806      	ldr	r0, [pc, #24]	; (8006204 <MX_USB_DEVICE_Init+0x44>)
 80061ec:	f7fe ffb0 	bl	8005150 <USBD_Start>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80061f6:	f7fa f863 	bl	80002c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000108 	.word	0x20000108
 8006204:	20000198 	.word	0x20000198
 8006208:	2000000c 	.word	0x2000000c

0800620c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	6039      	str	r1, [r7, #0]
 8006216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2212      	movs	r2, #18
 800621c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800621e:	4b03      	ldr	r3, [pc, #12]	; (800622c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000124 	.word	0x20000124

08006230 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	6039      	str	r1, [r7, #0]
 800623a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2204      	movs	r2, #4
 8006240:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006242:	4b03      	ldr	r3, [pc, #12]	; (8006250 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000138 	.word	0x20000138

08006254 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	6039      	str	r1, [r7, #0]
 800625e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4907      	ldr	r1, [pc, #28]	; (8006288 <USBD_FS_ProductStrDescriptor+0x34>)
 800626a:	4808      	ldr	r0, [pc, #32]	; (800628c <USBD_FS_ProductStrDescriptor+0x38>)
 800626c:	f7ff fee8 	bl	8006040 <USBD_GetString>
 8006270:	e004      	b.n	800627c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	4904      	ldr	r1, [pc, #16]	; (8006288 <USBD_FS_ProductStrDescriptor+0x34>)
 8006276:	4805      	ldr	r0, [pc, #20]	; (800628c <USBD_FS_ProductStrDescriptor+0x38>)
 8006278:	f7ff fee2 	bl	8006040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000045c 	.word	0x2000045c
 800628c:	080069a4 	.word	0x080069a4

08006290 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	4904      	ldr	r1, [pc, #16]	; (80062b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062a0:	4804      	ldr	r0, [pc, #16]	; (80062b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062a2:	f7ff fecd 	bl	8006040 <USBD_GetString>
  return USBD_StrDesc;
 80062a6:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	2000045c 	.word	0x2000045c
 80062b4:	080069bc 	.word	0x080069bc

080062b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	6039      	str	r1, [r7, #0]
 80062c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	221a      	movs	r2, #26
 80062c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062ca:	f000 f843 	bl	8006354 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062ce:	4b02      	ldr	r3, [pc, #8]	; (80062d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	2000013c 	.word	0x2000013c

080062dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	6039      	str	r1, [r7, #0]
 80062e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d105      	bne.n	80062fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	4907      	ldr	r1, [pc, #28]	; (8006310 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062f2:	4808      	ldr	r0, [pc, #32]	; (8006314 <USBD_FS_ConfigStrDescriptor+0x38>)
 80062f4:	f7ff fea4 	bl	8006040 <USBD_GetString>
 80062f8:	e004      	b.n	8006304 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4904      	ldr	r1, [pc, #16]	; (8006310 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062fe:	4805      	ldr	r0, [pc, #20]	; (8006314 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006300:	f7ff fe9e 	bl	8006040 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	2000045c 	.word	0x2000045c
 8006314:	080069d0 	.word	0x080069d0

08006318 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	6039      	str	r1, [r7, #0]
 8006322:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4907      	ldr	r1, [pc, #28]	; (800634c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800632e:	4808      	ldr	r0, [pc, #32]	; (8006350 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006330:	f7ff fe86 	bl	8006040 <USBD_GetString>
 8006334:	e004      	b.n	8006340 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	4904      	ldr	r1, [pc, #16]	; (800634c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800633a:	4805      	ldr	r0, [pc, #20]	; (8006350 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800633c:	f7ff fe80 	bl	8006040 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	2000045c 	.word	0x2000045c
 8006350:	080069dc 	.word	0x080069dc

08006354 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <Get_SerialNum+0x44>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <Get_SerialNum+0x48>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <Get_SerialNum+0x4c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800637a:	2208      	movs	r2, #8
 800637c:	4909      	ldr	r1, [pc, #36]	; (80063a4 <Get_SerialNum+0x50>)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f814 	bl	80063ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006384:	2204      	movs	r2, #4
 8006386:	4908      	ldr	r1, [pc, #32]	; (80063a8 <Get_SerialNum+0x54>)
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f000 f80f 	bl	80063ac <IntToUnicode>
  }
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	1ffff7e8 	.word	0x1ffff7e8
 800639c:	1ffff7ec 	.word	0x1ffff7ec
 80063a0:	1ffff7f0 	.word	0x1ffff7f0
 80063a4:	2000013e 	.word	0x2000013e
 80063a8:	2000014e 	.word	0x2000014e

080063ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
 80063c2:	e027      	b.n	8006414 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	0f1b      	lsrs	r3, r3, #28
 80063c8:	2b09      	cmp	r3, #9
 80063ca:	d80b      	bhi.n	80063e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	0f1b      	lsrs	r3, r3, #28
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4619      	mov	r1, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	440b      	add	r3, r1
 80063dc:	3230      	adds	r2, #48	; 0x30
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e00a      	b.n	80063fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	0f1b      	lsrs	r3, r3, #28
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4619      	mov	r1, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	440b      	add	r3, r1
 80063f4:	3237      	adds	r2, #55	; 0x37
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	3301      	adds	r3, #1
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	4413      	add	r3, r2
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	3301      	adds	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
 8006414:	7dfa      	ldrb	r2, [r7, #23]
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	429a      	cmp	r2, r3
 800641a:	d3d3      	bcc.n	80063c4 <IntToUnicode+0x18>
  }
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <HAL_PCD_MspInit+0x44>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d113      	bne.n	8006462 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <HAL_PCD_MspInit+0x48>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <HAL_PCD_MspInit+0x48>)
 8006440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006444:	61d3      	str	r3, [r2, #28]
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_PCD_MspInit+0x48>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006452:	2200      	movs	r2, #0
 8006454:	2100      	movs	r1, #0
 8006456:	2014      	movs	r0, #20
 8006458:	f7fa f925 	bl	80006a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800645c:	2014      	movs	r0, #20
 800645e:	f7fa f93e 	bl	80006de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40005c00 	.word	0x40005c00
 8006470:	40021000 	.word	0x40021000

08006474 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7fe fea8 	bl	80051e0 <USBD_LL_SetupStage>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	440b      	add	r3, r1
 80064b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	4619      	mov	r1, r3
 80064c2:	f7fe feda 	bl	800527a <USBD_LL_DataOutStage>
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	440b      	add	r3, r1
 80064ee:	333c      	adds	r3, #60	; 0x3c
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f7fe ff31 	bl	800535c <USBD_LL_DataInStage>
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff f841 	bl	8005598 <USBD_LL_SOF>
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d001      	beq.n	8006536 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006532:	f7f9 fec5 	bl	80002c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800653c:	7bfa      	ldrb	r2, [r7, #15]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe fff1 	bl	8005528 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe ffaa 	bl	80054a6 <USBD_LL_Reset>
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe ffeb 	bl	8005546 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <HAL_PCD_SuspendCallback+0x30>)
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	4a03      	ldr	r2, [pc, #12]	; (800658c <HAL_PCD_SuspendCallback+0x30>)
 800657e:	f043 0306 	orr.w	r3, r3, #6
 8006582:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe ffe5 	bl	800556e <USBD_LL_Resume>
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80065b4:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <USBD_LL_Init+0x88>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <USBD_LL_Init+0x88>)
 80065c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80065c4:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <USBD_LL_Init+0x88>)
 80065c6:	4a1c      	ldr	r2, [pc, #112]	; (8006638 <USBD_LL_Init+0x8c>)
 80065c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80065ca:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <USBD_LL_Init+0x88>)
 80065cc:	2208      	movs	r2, #8
 80065ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80065d0:	4b18      	ldr	r3, [pc, #96]	; (8006634 <USBD_LL_Init+0x88>)
 80065d2:	2202      	movs	r2, #2
 80065d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80065d6:	4b17      	ldr	r3, [pc, #92]	; (8006634 <USBD_LL_Init+0x88>)
 80065d8:	2200      	movs	r2, #0
 80065da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <USBD_LL_Init+0x88>)
 80065de:	2200      	movs	r2, #0
 80065e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <USBD_LL_Init+0x88>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80065e8:	4812      	ldr	r0, [pc, #72]	; (8006634 <USBD_LL_Init+0x88>)
 80065ea:	f7fa f892 	bl	8000712 <HAL_PCD_Init>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80065f4:	f7f9 fe64 	bl	80002c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065fe:	2318      	movs	r3, #24
 8006600:	2200      	movs	r2, #0
 8006602:	2100      	movs	r1, #0
 8006604:	f7fb fd9c 	bl	8002140 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800660e:	2358      	movs	r3, #88	; 0x58
 8006610:	2200      	movs	r2, #0
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	f7fb fd94 	bl	8002140 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800661e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006622:	2200      	movs	r2, #0
 8006624:	2181      	movs	r1, #129	; 0x81
 8006626:	f7fb fd8b 	bl	8002140 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000065c 	.word	0x2000065c
 8006638:	40005c00 	.word	0x40005c00

0800663c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006652:	4618      	mov	r0, r3
 8006654:	f7fa f95c 	bl	8000910 <HAL_PCD_Start>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f93c 	bl	80068dc <USBD_Get_USB_Status>
 8006664:	4603      	mov	r3, r0
 8006666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006668:	7bbb      	ldrb	r3, [r7, #14]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	461a      	mov	r2, r3
 8006680:	4603      	mov	r3, r0
 8006682:	70fb      	strb	r3, [r7, #3]
 8006684:	460b      	mov	r3, r1
 8006686:	70bb      	strb	r3, [r7, #2]
 8006688:	4613      	mov	r3, r2
 800668a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800669a:	78bb      	ldrb	r3, [r7, #2]
 800669c:	883a      	ldrh	r2, [r7, #0]
 800669e:	78f9      	ldrb	r1, [r7, #3]
 80066a0:	f7fa fab3 	bl	8000c0a <HAL_PCD_EP_Open>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f916 	bl	80068dc <USBD_Get_USB_Status>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066d8:	78fa      	ldrb	r2, [r7, #3]
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fa faf1 	bl	8000cc4 <HAL_PCD_EP_Close>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 f8f7 	bl	80068dc <USBD_Get_USB_Status>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	4611      	mov	r1, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f7fa fb82 	bl	8000e24 <HAL_PCD_EP_SetStall>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 f8d8 	bl	80068dc <USBD_Get_USB_Status>
 800672c:	4603      	mov	r3, r0
 800672e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006730:	7bbb      	ldrb	r3, [r7, #14]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f7fa fbc3 	bl	8000ee4 <HAL_PCD_EP_ClrStall>
 800675e:	4603      	mov	r3, r0
 8006760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	4618      	mov	r0, r3
 8006766:	f000 f8b9 	bl	80068dc <USBD_Get_USB_Status>
 800676a:	4603      	mov	r3, r0
 800676c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800676e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800678a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800678c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006790:	2b00      	cmp	r3, #0
 8006792:	da0c      	bge.n	80067ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	440b      	add	r3, r1
 80067a8:	3302      	adds	r3, #2
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	e00b      	b.n	80067c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	440b      	add	r3, r1
 80067c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80067c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fa f9e6 	bl	8000bc0 <HAL_PCD_SetAddress>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f86e 	bl	80068dc <USBD_Get_USB_Status>
 8006800:	4603      	mov	r3, r0
 8006802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006804:	7bbb      	ldrb	r3, [r7, #14]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	461a      	mov	r2, r3
 800681a:	460b      	mov	r3, r1
 800681c:	72fb      	strb	r3, [r7, #11]
 800681e:	4613      	mov	r3, r2
 8006820:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006830:	893b      	ldrh	r3, [r7, #8]
 8006832:	7af9      	ldrb	r1, [r7, #11]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	f7fa fabe 	bl	8000db6 <HAL_PCD_EP_Transmit>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f84b 	bl	80068dc <USBD_Get_USB_Status>
 8006846:	4603      	mov	r3, r0
 8006848:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800684a:	7dbb      	ldrb	r3, [r7, #22]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	461a      	mov	r2, r3
 8006860:	460b      	mov	r3, r1
 8006862:	72fb      	strb	r3, [r7, #11]
 8006864:	4613      	mov	r3, r2
 8006866:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	7af9      	ldrb	r1, [r7, #11]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	f7fa fa6a 	bl	8000d54 <HAL_PCD_EP_Receive>
 8006880:	4603      	mov	r3, r0
 8006882:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f828 	bl	80068dc <USBD_Get_USB_Status>
 800688c:	4603      	mov	r3, r0
 800688e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006890:	7dbb      	ldrb	r3, [r7, #22]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80068a4:	4b02      	ldr	r3, [pc, #8]	; (80068b0 <USBD_static_malloc+0x14>)
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr
 80068b0:	20000180 	.word	0x20000180

080068b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr

080068c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d817      	bhi.n	8006920 <USBD_Get_USB_Status+0x44>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <USBD_Get_USB_Status+0x1c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006909 	.word	0x08006909
 80068fc:	0800690f 	.word	0x0800690f
 8006900:	08006915 	.word	0x08006915
 8006904:	0800691b 	.word	0x0800691b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
    break;
 800690c:	e00b      	b.n	8006926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	73fb      	strb	r3, [r7, #15]
    break;
 8006912:	e008      	b.n	8006926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
    break;
 8006918:	e005      	b.n	8006926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800691a:	2302      	movs	r3, #2
 800691c:	73fb      	strb	r3, [r7, #15]
    break;
 800691e:	e002      	b.n	8006926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006920:	2302      	movs	r3, #2
 8006922:	73fb      	strb	r3, [r7, #15]
    break;
 8006924:	bf00      	nop
  }
  return usb_status;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop

08006934 <__libc_init_array>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	2600      	movs	r6, #0
 8006938:	4d0c      	ldr	r5, [pc, #48]	; (800696c <__libc_init_array+0x38>)
 800693a:	4c0d      	ldr	r4, [pc, #52]	; (8006970 <__libc_init_array+0x3c>)
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	42a6      	cmp	r6, r4
 8006942:	d109      	bne.n	8006958 <__libc_init_array+0x24>
 8006944:	f000 f822 	bl	800698c <_init>
 8006948:	2600      	movs	r6, #0
 800694a:	4d0a      	ldr	r5, [pc, #40]	; (8006974 <__libc_init_array+0x40>)
 800694c:	4c0a      	ldr	r4, [pc, #40]	; (8006978 <__libc_init_array+0x44>)
 800694e:	1b64      	subs	r4, r4, r5
 8006950:	10a4      	asrs	r4, r4, #2
 8006952:	42a6      	cmp	r6, r4
 8006954:	d105      	bne.n	8006962 <__libc_init_array+0x2e>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	f855 3b04 	ldr.w	r3, [r5], #4
 800695c:	4798      	blx	r3
 800695e:	3601      	adds	r6, #1
 8006960:	e7ee      	b.n	8006940 <__libc_init_array+0xc>
 8006962:	f855 3b04 	ldr.w	r3, [r5], #4
 8006966:	4798      	blx	r3
 8006968:	3601      	adds	r6, #1
 800696a:	e7f2      	b.n	8006952 <__libc_init_array+0x1e>
 800696c:	08006a10 	.word	0x08006a10
 8006970:	08006a10 	.word	0x08006a10
 8006974:	08006a10 	.word	0x08006a10
 8006978:	08006a14 	.word	0x08006a14

0800697c <memset>:
 800697c:	4603      	mov	r3, r0
 800697e:	4402      	add	r2, r0
 8006980:	4293      	cmp	r3, r2
 8006982:	d100      	bne.n	8006986 <memset+0xa>
 8006984:	4770      	bx	lr
 8006986:	f803 1b01 	strb.w	r1, [r3], #1
 800698a:	e7f9      	b.n	8006980 <memset+0x4>

0800698c <_init>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr

08006998 <_fini>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr
