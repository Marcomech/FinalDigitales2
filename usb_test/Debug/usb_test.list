
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a04  08006a04  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08006a04  08006a04  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a04  08006a04  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08006a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  08006b64  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08006b64  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb0d  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c8  00000000  00000000  0002fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  00032e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a8  00000000  00000000  00033690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8ec  00000000  00000000  0004c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848d8  00000000  00000000  00059024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd8fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000dd950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08006980 	.word	0x08006980

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08006980 	.word	0x08006980

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f946 	bl	80003e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f88a 	bl	8000270 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 f82a 	bl	80061b4 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	keyboardhid.KeyCode1 = 0x0B;
 8000160:	4b14      	ldr	r3, [pc, #80]	; (80001b4 <main+0x68>)
 8000162:	220b      	movs	r2, #11
 8000164:	709a      	strb	r2, [r3, #2]
	keyboardhid.KeyCode2 = 0x12;
 8000166:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <main+0x68>)
 8000168:	2212      	movs	r2, #18
 800016a:	70da      	strb	r2, [r3, #3]
	keyboardhid.KeyCode3 = 0x0F;
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <main+0x68>)
 800016e:	220f      	movs	r2, #15
 8000170:	711a      	strb	r2, [r3, #4]
	keyboardhid.KeyCode4 = 0x04;
 8000172:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <main+0x68>)
 8000174:	2204      	movs	r2, #4
 8000176:	715a      	strb	r2, [r3, #5]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000178:	2208      	movs	r2, #8
 800017a:	490e      	ldr	r1, [pc, #56]	; (80001b4 <main+0x68>)
 800017c:	480e      	ldr	r0, [pc, #56]	; (80001b8 <main+0x6c>)
 800017e:	f004 ff29 	bl	8004fd4 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000182:	2032      	movs	r0, #50	; 0x32
 8000184:	f000 f98e 	bl	80004a4 <HAL_Delay>
	keyboardhid.KeyCode1 = 0x00;
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <main+0x68>)
 800018a:	2200      	movs	r2, #0
 800018c:	709a      	strb	r2, [r3, #2]
	keyboardhid.KeyCode2 = 0x00;
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <main+0x68>)
 8000190:	2200      	movs	r2, #0
 8000192:	70da      	strb	r2, [r3, #3]
	keyboardhid.KeyCode3 = 0x00;
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <main+0x68>)
 8000196:	2200      	movs	r2, #0
 8000198:	711a      	strb	r2, [r3, #4]
	keyboardhid.KeyCode4 = 0x00;
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <main+0x68>)
 800019c:	2200      	movs	r2, #0
 800019e:	715a      	strb	r2, [r3, #5]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80001a0:	2208      	movs	r2, #8
 80001a2:	4904      	ldr	r1, [pc, #16]	; (80001b4 <main+0x68>)
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <main+0x6c>)
 80001a6:	f004 ff15 	bl	8004fd4 <USBD_HID_SendReport>
	HAL_Delay(1000);
 80001aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ae:	f000 f979 	bl	80004a4 <HAL_Delay>
	keyboardhid.KeyCode1 = 0x0B;
 80001b2:	e7d5      	b.n	8000160 <main+0x14>
 80001b4:	20000174 	.word	0x20000174
 80001b8:	20000198 	.word	0x20000198

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f006 fbd0 	bl	8006970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f001 ffd0 	bl	80021b8 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f849 	bl	80002b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fa3a 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f833 	bl	80002b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024e:	2310      	movs	r3, #16
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f002 fb89 	bl	8002970 <HAL_RCCEx_PeriphCLKConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000264:	f000 f826 	bl	80002b4 <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3750      	adds	r7, #80	; 0x50
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <MX_GPIO_Init+0x40>)
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0320 	and.w	r3, r3, #32
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <MX_GPIO_Init+0x40>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0304 	and.w	r3, r3, #4
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000

080002b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b8:	b672      	cpsid	i
}
 80002ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002bc:	e7fe      	b.n	80002bc <Error_Handler+0x8>
	...

080002c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <HAL_MspInit+0x5c>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a14      	ldr	r2, [pc, #80]	; (800031c <HAL_MspInit+0x5c>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_MspInit+0x5c>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_MspInit+0x5c>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <HAL_MspInit+0x5c>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_MspInit+0x5c>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <HAL_MspInit+0x60>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_MspInit+0x60>)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	40010000 	.word	0x40010000

08000324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <NMI_Handler+0x4>

0800032a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <HardFault_Handler+0x4>

08000330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <MemManage_Handler+0x4>

08000336 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <BusFault_Handler+0x4>

0800033c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <UsageFault_Handler+0x4>

08000342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036a:	f000 f87f 	bl	800046c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800037a:	f000 fae9 	bl	8000950 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000065c 	.word	0x2000065c

08000388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000394:	f7ff fff8 	bl	8000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800039a:	490c      	ldr	r1, [pc, #48]	; (80003cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003b0:	4c09      	ldr	r4, [pc, #36]	; (80003d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f006 fab3 	bl	8006928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff fec3 	bl	800014c <main>
  bx lr
 80003c6:	4770      	bx	lr
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80003d0:	08006a0c 	.word	0x08006a0c
  ldr r2, =_sbss
 80003d4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80003d8:	2000094c 	.word	0x2000094c

080003dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC1_2_IRQHandler>
	...

080003e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <HAL_Init+0x28>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a07      	ldr	r2, [pc, #28]	; (8000408 <HAL_Init+0x28>)
 80003ea:	f043 0310 	orr.w	r3, r3, #16
 80003ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f0:	2003      	movs	r0, #3
 80003f2:	f000 f947 	bl	8000684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 f808 	bl	800040c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003fc:	f7ff ff60 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40022000 	.word	0x40022000

0800040c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_InitTick+0x54>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_InitTick+0x58>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000422:	fbb3 f3f1 	udiv	r3, r3, r1
 8000426:	fbb2 f3f3 	udiv	r3, r2, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f95f 	bl	80006ee <HAL_SYSTICK_Config>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	e00e      	b.n	8000458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b0f      	cmp	r3, #15
 800043e:	d80a      	bhi.n	8000456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000440:	2200      	movs	r2, #0
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	f04f 30ff 	mov.w	r0, #4294967295
 8000448:	f000 f927 	bl	800069a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800044c:	4a06      	ldr	r2, [pc, #24]	; (8000468 <HAL_InitTick+0x5c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000452:	2300      	movs	r3, #0
 8000454:	e000      	b.n	8000458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000456:	2301      	movs	r3, #1
}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000000 	.word	0x20000000
 8000464:	20000008 	.word	0x20000008
 8000468:	20000004 	.word	0x20000004

0800046c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_IncTick+0x1c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_IncTick+0x20>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4413      	add	r3, r2
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <HAL_IncTick+0x20>)
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	20000008 	.word	0x20000008
 800048c:	20000194 	.word	0x20000194

08000490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return uwTick;
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <HAL_GetTick+0x10>)
 8000496:	681b      	ldr	r3, [r3, #0]
}
 8000498:	4618      	mov	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000194 	.word	0x20000194

080004a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004ac:	f7ff fff0 	bl	8000490 <HAL_GetTick>
 80004b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004bc:	d005      	beq.n	80004ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_Delay+0x44>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004ca:	bf00      	nop
 80004cc:	f7ff ffe0 	bl	8000490 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d8f7      	bhi.n	80004cc <HAL_Delay+0x28>
  {
  }
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000008 	.word	0x20000008

080004ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f003 0307 	and.w	r3, r3, #7
 80004fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <__NVIC_SetPriorityGrouping+0x44>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000508:	4013      	ands	r3, r2
 800050a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800051e:	4a04      	ldr	r2, [pc, #16]	; (8000530 <__NVIC_SetPriorityGrouping+0x44>)
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	60d3      	str	r3, [r2, #12]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <__NVIC_GetPriorityGrouping+0x18>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	f003 0307 	and.w	r3, r3, #7
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	db0b      	blt.n	800057a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 021f 	and.w	r2, r3, #31
 8000568:	4906      	ldr	r1, [pc, #24]	; (8000584 <__NVIC_EnableIRQ+0x34>)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	095b      	lsrs	r3, r3, #5
 8000570:	2001      	movs	r0, #1
 8000572:	fa00 f202 	lsl.w	r2, r0, r2
 8000576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	e000e100 	.word	0xe000e100

08000588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	db0a      	blt.n	80005b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	490c      	ldr	r1, [pc, #48]	; (80005d4 <__NVIC_SetPriority+0x4c>)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	0112      	lsls	r2, r2, #4
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	440b      	add	r3, r1
 80005ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b0:	e00a      	b.n	80005c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <__NVIC_SetPriority+0x50>)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f003 030f 	and.w	r3, r3, #15
 80005be:	3b04      	subs	r3, #4
 80005c0:	0112      	lsls	r2, r2, #4
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	440b      	add	r3, r1
 80005c6:	761a      	strb	r2, [r3, #24]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	f1c3 0307 	rsb	r3, r3, #7
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	bf28      	it	cs
 80005fa:	2304      	movcs	r3, #4
 80005fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3304      	adds	r3, #4
 8000602:	2b06      	cmp	r3, #6
 8000604:	d902      	bls.n	800060c <NVIC_EncodePriority+0x30>
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3b03      	subs	r3, #3
 800060a:	e000      	b.n	800060e <NVIC_EncodePriority+0x32>
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	43da      	mvns	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	401a      	ands	r2, r3
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43d9      	mvns	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	4313      	orrs	r3, r2
         );
}
 8000636:	4618      	mov	r0, r3
 8000638:	3724      	adds	r7, #36	; 0x24
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f7ff ff90 	bl	8000588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff2d 	bl	80004ec <__NVIC_SetPriorityGrouping>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4603      	mov	r3, r0
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ac:	f7ff ff42 	bl	8000534 <__NVIC_GetPriorityGrouping>
 80006b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	6978      	ldr	r0, [r7, #20]
 80006b8:	f7ff ff90 	bl	80005dc <NVIC_EncodePriority>
 80006bc:	4602      	mov	r2, r0
 80006be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff5f 	bl	8000588 <__NVIC_SetPriority>
}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff35 	bl	8000550 <__NVIC_EnableIRQ>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ffa2 	bl	8000640 <SysTick_Config>
 80006fc:	4603      	mov	r3, r0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000708:	b08b      	sub	sp, #44	; 0x2c
 800070a:	af06      	add	r7, sp, #24
 800070c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	e0f1      	b.n	80008fc <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d106      	bne.n	8000732 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f005 fe75 	bl	800641c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2203      	movs	r2, #3
 8000736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f9f2 	bl	8002b28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	687e      	ldr	r6, [r7, #4]
 800074c:	466d      	mov	r5, sp
 800074e:	f106 0410 	add.w	r4, r6, #16
 8000752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	602b      	str	r3, [r5, #0]
 800075a:	1d33      	adds	r3, r6, #4
 800075c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800075e:	6838      	ldr	r0, [r7, #0]
 8000760:	f002 f9bc 	bl	8002adc <USB_CoreInit>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d005      	beq.n	8000776 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2202      	movs	r2, #2
 800076e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e0c2      	b.n	80008fc <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f002 f9ed 	bl	8002b5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	e040      	b.n	800080a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	440b      	add	r3, r1
 8000798:	3301      	adds	r3, #1
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	440b      	add	r3, r1
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	440b      	add	r3, r1
 80007c2:	3303      	adds	r3, #3
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007c8:	7bfa      	ldrb	r2, [r7, #15]
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3338      	adds	r3, #56	; 0x38
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	333c      	adds	r3, #60	; 0x3c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007f0:	7bfa      	ldrb	r2, [r7, #15]
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	3340      	adds	r3, #64	; 0x40
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3b9      	bcc.n	8000788 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e044      	b.n	80008a4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	f203 1369 	addw	r3, r3, #361	; 0x169
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	440b      	add	r3, r1
 800083e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	440b      	add	r3, r1
 800086a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	440b      	add	r3, r1
 8000880:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	440b      	add	r3, r1
 8000896:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d3b5      	bcc.n	800081a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	687e      	ldr	r6, [r7, #4]
 80008b6:	466d      	mov	r5, sp
 80008b8:	f106 0410 	add.w	r4, r6, #16
 80008bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	602b      	str	r3, [r5, #0]
 80008c4:	1d33      	adds	r3, r6, #4
 80008c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008c8:	6838      	ldr	r0, [r7, #0]
 80008ca:	f002 f953 	bl	8002b74 <USB_DevInit>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d005      	beq.n	80008e0 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2202      	movs	r2, #2
 80008d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e00d      	b.n	80008fc <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2201      	movs	r2, #1
 80008ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 f96f 	bl	8004bd8 <USB_DevDisconnect>

  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000904 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000912:	2b01      	cmp	r3, #1
 8000914:	d101      	bne.n	800091a <HAL_PCD_Start+0x16>
 8000916:	2302      	movs	r3, #2
 8000918:	e016      	b.n	8000948 <HAL_PCD_Start+0x44>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2201      	movs	r2, #1
 800091e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f002 f8e8 	bl	8002afc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800092c:	2101      	movs	r1, #1
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f005 ffc3 	bl	80068ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f004 f943 	bl	8004bc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f004 f945 	bl	8004bec <USB_ReadInterrupts>
 8000962:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 fb06 	bl	8000f80 <PCD_EP_ISR_Handler>

    return;
 8000974:	e11b      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800097c:	2b00      	cmp	r3, #0
 800097e:	d013      	beq.n	80009a8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000988:	b29a      	uxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000992:	b292      	uxth	r2, r2
 8000994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f005 fdba 	bl	8006512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800099e:	2100      	movs	r1, #0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f907 	bl	8000bb4 <HAL_PCD_SetAddress>

    return;
 80009a6:	e102      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00c      	beq.n	80009cc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009c4:	b292      	uxth	r2, r2
 80009c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009ca:	e0f0      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00c      	beq.n	80009f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009de:	b29a      	uxth	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009e8:	b292      	uxth	r2, r2
 80009ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009ee:	e0de      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d027      	beq.n	8000a4a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 0204 	bic.w	r2, r2, #4
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 0208 	bic.w	r2, r2, #8
 8000a24:	b292      	uxth	r2, r2
 8000a26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f005 fdaa 	bl	8006584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a42:	b292      	uxth	r2, r2
 8000a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a48:	e0b1      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f000 8085 	beq.w	8000b60 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	77fb      	strb	r3, [r7, #31]
 8000a5a:	e011      	b.n	8000a80 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	7ffb      	ldrb	r3, [r7, #31]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	441a      	add	r2, r3
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	8812      	ldrh	r2, [r2, #0]
 8000a6c:	b292      	uxth	r2, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	f107 0120 	add.w	r1, r7, #32
 8000a74:	440b      	add	r3, r1
 8000a76:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000a7a:	7ffb      	ldrb	r3, [r7, #31]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	77fb      	strb	r3, [r7, #31]
 8000a80:	7ffb      	ldrb	r3, [r7, #31]
 8000a82:	2b07      	cmp	r3, #7
 8000a84:	d9ea      	bls.n	8000a5c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0201 	orr.w	r2, r2, #1
 8000a98:	b292      	uxth	r2, r2
 8000a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ab6:	bf00      	nop
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f6      	beq.n	8000ab8 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000adc:	b292      	uxth	r2, r2
 8000ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	77fb      	strb	r3, [r7, #31]
 8000ae6:	e010      	b.n	8000b0a <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	4611      	mov	r1, r2
 8000af0:	7ffa      	ldrb	r2, [r7, #31]
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	440a      	add	r2, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	f107 0120 	add.w	r1, r7, #32
 8000afc:	440b      	add	r3, r1
 8000afe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000b02:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	3301      	adds	r3, #1
 8000b08:	77fb      	strb	r3, [r7, #31]
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	2b07      	cmp	r3, #7
 8000b0e:	d9eb      	bls.n	8000ae8 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 0208 	orr.w	r2, r2, #8
 8000b22:	b292      	uxth	r2, r2
 8000b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f042 0204 	orr.w	r2, r2, #4
 8000b52:	b292      	uxth	r2, r2
 8000b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f005 fcf9 	bl	8006550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b5e:	e026      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00f      	beq.n	8000b8a <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b7c:	b292      	uxth	r2, r2
 8000b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f005 fcb7 	bl	80064f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b88:	e011      	b.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00c      	beq.n	8000bae <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000bac:	bf00      	nop
  }
}
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d101      	bne.n	8000bce <HAL_PCD_SetAddress+0x1a>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e013      	b.n	8000bf6 <HAL_PCD_SetAddress+0x42>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 ffd9 	bl	8004b9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	4608      	mov	r0, r1
 8000c08:	4611      	mov	r1, r2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	70fb      	strb	r3, [r7, #3]
 8000c10:	460b      	mov	r3, r1
 8000c12:	803b      	strh	r3, [r7, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da0e      	bge.n	8000c42 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	705a      	strb	r2, [r3, #1]
 8000c40:	e00e      	b.n	8000c60 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	f003 0207 	and.w	r2, r3, #7
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c6c:	883a      	ldrh	r2, [r7, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	78ba      	ldrb	r2, [r7, #2]
 8000c76:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c78:	78bb      	ldrb	r3, [r7, #2]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d102      	bne.n	8000c84 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_PCD_EP_Open+0x94>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e00e      	b.n	8000cb0 <HAL_PCD_EP_Open+0xb2>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68f9      	ldr	r1, [r7, #12]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 ff87 	bl	8002bb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000cae:	7afb      	ldrb	r3, [r7, #11]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da0e      	bge.n	8000cea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	705a      	strb	r2, [r3, #1]
 8000ce8:	e00e      	b.n	8000d08 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	f003 0207 	and.w	r2, r3, #7
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2200      	movs	r2, #0
 8000d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <HAL_PCD_EP_Close+0x6a>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e00e      	b.n	8000d40 <HAL_PCD_EP_Close+0x88>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68f9      	ldr	r1, [r7, #12]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 faff 	bl	8003334 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	460b      	mov	r3, r1
 8000d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	f003 0207 	and.w	r2, r3, #7
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2200      	movs	r2, #0
 8000d86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6979      	ldr	r1, [r7, #20]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fcb6 	bl	800370c <USB_EPStartXfer>

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	460b      	mov	r3, r1
 8000db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2201      	movs	r2, #1
 8000df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6979      	ldr	r1, [r7, #20]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fc7f 	bl	800370c <USB_EPStartXfer>

  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	f003 0207 	and.w	r2, r3, #7
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d901      	bls.n	8000e36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e04c      	b.n	8000ed0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	da0e      	bge.n	8000e5c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2201      	movs	r2, #1
 8000e58:	705a      	strb	r2, [r3, #1]
 8000e5a:	e00c      	b.n	8000e76 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_PCD_EP_SetStall+0x7e>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e01c      	b.n	8000ed0 <HAL_PCD_EP_SetStall+0xb8>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68f9      	ldr	r1, [r7, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fd7d 	bl	80049a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d108      	bne.n	8000ec6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	f003 fea2 	bl	8004c0a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	f003 020f 	and.w	r2, r3, #15
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d901      	bls.n	8000ef6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e040      	b.n	8000f78 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	da0e      	bge.n	8000f1c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2201      	movs	r2, #1
 8000f18:	705a      	strb	r2, [r3, #1]
 8000f1a:	e00e      	b.n	8000f3a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	f003 0207 	and.w	r2, r3, #7
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_PCD_EP_ClrStall+0x82>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e00e      	b.n	8000f78 <HAL_PCD_EP_ClrStall+0xa0>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fd6b 	bl	8004a44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b096      	sub	sp, #88	; 0x58
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f88:	e3bf      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000fa4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f040 8179 	bne.w	80012a0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d152      	bne.n	8001060 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	81fb      	strh	r3, [r7, #14]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3328      	adds	r3, #40	; 0x28
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	4413      	add	r3, r2
 8001002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800100c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	441a      	add	r2, r3
 800101a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800101c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f005 fa4e 	bl	80064c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 836b 	beq.w	800170a <PCD_EP_ISR_Handler+0x78a>
 8001034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8366 	bne.w	800170a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b292      	uxth	r2, r2
 8001052:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800105e:	e354      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001066:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107a:	2b00      	cmp	r3, #0
 800107c:	d034      	beq.n	80010e8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	3306      	adds	r3, #6
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	4413      	add	r3, r2
 800109c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80010b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010bc:	b29b      	uxth	r3, r3
 80010be:	f003 fdf4 	bl	8004caa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010ce:	4013      	ands	r3, r2
 80010d0:	823b      	strh	r3, [r7, #16]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	8a3a      	ldrh	r2, [r7, #16]
 80010d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010dc:	b292      	uxth	r2, r2
 80010de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f005 f9c1 	bl	8006468 <HAL_PCD_SetupStageCallback>
 80010e6:	e310      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f280 830c 	bge.w	800170a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010fe:	4013      	ands	r3, r2
 8001100:	83fb      	strh	r3, [r7, #30]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	8bfa      	ldrh	r2, [r7, #30]
 8001108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800110c:	b292      	uxth	r2, r2
 800110e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	3306      	adds	r3, #6
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	4413      	add	r3, r2
 800112e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800113a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800113c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d019      	beq.n	8001178 <PCD_EP_ISR_Handler+0x1f8>
 8001144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d015      	beq.n	8001178 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001152:	6959      	ldr	r1, [r3, #20]
 8001154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001156:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800115a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800115c:	b29b      	uxth	r3, r3
 800115e:	f003 fda4 	bl	8004caa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	441a      	add	r2, r3
 800116c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800116e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f005 f98a 	bl	800648c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 82bd 	bne.w	800170a <PCD_EP_ISR_Handler+0x78a>
 8001190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001194:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800119c:	f000 82b5 	beq.w	800170a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4413      	add	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b3e      	cmp	r3, #62	; 0x3e
 80011d6:	d91d      	bls.n	8001214 <PCD_EP_ISR_Handler+0x294>
 80011d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
 80011e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <PCD_EP_ISR_Handler+0x272>
 80011ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ee:	3b01      	subs	r3, #1
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b29b      	uxth	r3, r3
 8001204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800120c:	b29a      	uxth	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	e026      	b.n	8001262 <PCD_EP_ISR_Handler+0x2e2>
 8001214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10a      	bne.n	8001232 <PCD_EP_ISR_Handler+0x2b2>
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800122a:	b29a      	uxth	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	e017      	b.n	8001262 <PCD_EP_ISR_Handler+0x2e2>
 8001232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	647b      	str	r3, [r7, #68]	; 0x44
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <PCD_EP_ISR_Handler+0x2cc>
 8001246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001248:	3301      	adds	r3, #1
 800124a:	647b      	str	r3, [r7, #68]	; 0x44
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001254:	b29b      	uxth	r3, r3
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	b29b      	uxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b29a      	uxth	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800126e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001272:	827b      	strh	r3, [r7, #18]
 8001274:	8a7b      	ldrh	r3, [r7, #18]
 8001276:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800127a:	827b      	strh	r3, [r7, #18]
 800127c:	8a7b      	ldrh	r3, [r7, #18]
 800127e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001282:	827b      	strh	r3, [r7, #18]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	8a7b      	ldrh	r3, [r7, #18]
 800128a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800128e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129a:	b29b      	uxth	r3, r3
 800129c:	8013      	strh	r3, [r2, #0]
 800129e:	e234      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f280 80fc 	bge.w	80014b6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012d4:	4013      	ands	r3, r2
 80012d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80012ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012f0:	b292      	uxth	r2, r2
 80012f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012f4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800130a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800130c:	7b1b      	ldrb	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d125      	bne.n	800135e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4413      	add	r3, r2
 8001326:	3306      	adds	r3, #6
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	4413      	add	r3, r2
 8001330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800133a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800133e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8092 	beq.w	800146c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134e:	6959      	ldr	r1, [r3, #20]
 8001350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001352:	88da      	ldrh	r2, [r3, #6]
 8001354:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001358:	f003 fca7 	bl	8004caa <USB_ReadPMA>
 800135c:	e086      	b.n	800146c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800135e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d10a      	bne.n	800137c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001366:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800136a:	461a      	mov	r2, r3
 800136c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f9d9 	bl	8001726 <HAL_PCD_EP_DB_Receive>
 8001374:	4603      	mov	r3, r0
 8001376:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800137a:	e077      	b.n	800146c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001396:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	441a      	add	r2, r3
 80013a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013bc:	b29b      	uxth	r3, r3
 80013be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d024      	beq.n	8001424 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	3302      	adds	r3, #2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001402:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001406:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800140a:	2b00      	cmp	r3, #0
 800140c:	d02e      	beq.n	800146c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001414:	6959      	ldr	r1, [r3, #20]
 8001416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001418:	891a      	ldrh	r2, [r3, #8]
 800141a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800141e:	f003 fc44 	bl	8004caa <USB_ReadPMA>
 8001422:	e023      	b.n	800146c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	3306      	adds	r3, #6
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800144c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001450:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145e:	6959      	ldr	r1, [r3, #20]
 8001460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001462:	895a      	ldrh	r2, [r3, #10]
 8001464:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001468:	f003 fc1f 	bl	8004caa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800146c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001474:	441a      	add	r2, r3
 8001476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001478:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800147a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001482:	441a      	add	r2, r3
 8001484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001486:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <PCD_EP_ISR_Handler+0x51c>
 8001490:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d206      	bcs.n	80014aa <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800149c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f004 fff2 	bl	800648c <HAL_PCD_DataOutStageCallback>
 80014a8:	e005      	b.n	80014b6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 f92b 	bl	800370c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8123 	beq.w	800170a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80014c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	441a      	add	r2, r3
 8001504:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800150c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001510:	b29b      	uxth	r3, r3
 8001512:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001516:	78db      	ldrb	r3, [r3, #3]
 8001518:	2b01      	cmp	r3, #1
 800151a:	f040 80a2 	bne.w	8001662 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800151e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001526:	7b1b      	ldrb	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8093 	beq.w	8001654 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800152e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d046      	beq.n	80015c8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800153a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d126      	bne.n	8001590 <PCD_EP_ISR_Handler+0x610>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4413      	add	r3, r2
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	011a      	lsls	r2, r3, #4
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	4413      	add	r3, r2
 8001564:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001574:	b29a      	uxth	r2, r3
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001588:	b29a      	uxth	r2, r3
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	801a      	strh	r2, [r3, #0]
 800158e:	e061      	b.n	8001654 <PCD_EP_ISR_Handler+0x6d4>
 8001590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d15d      	bne.n	8001654 <PCD_EP_ISR_Handler+0x6d4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	4413      	add	r3, r2
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	011a      	lsls	r2, r3, #4
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	4413      	add	r3, r2
 80015ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	e045      	b.n	8001654 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d126      	bne.n	8001624 <PCD_EP_ISR_Handler+0x6a4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ea:	4413      	add	r3, r2
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
 80015ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	011a      	lsls	r2, r3, #4
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	4413      	add	r3, r2
 80015f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
 80015fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001608:	b29a      	uxth	r2, r3
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800161c:	b29a      	uxth	r2, r3
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	e017      	b.n	8001654 <PCD_EP_ISR_Handler+0x6d4>
 8001624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d113      	bne.n	8001654 <PCD_EP_ISR_Handler+0x6d4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163a:	4413      	add	r3, r2
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800163e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	011a      	lsls	r2, r3, #4
 8001644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001646:	4413      	add	r3, r2
 8001648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f004 ff31 	bl	80064c2 <HAL_PCD_DataInStageCallback>
 8001660:	e053      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001662:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d146      	bne.n	80016fc <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001676:	b29b      	uxth	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	3302      	adds	r3, #2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001696:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d907      	bls.n	80016b6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80016a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b2:	619a      	str	r2, [r3, #24]
 80016b4:	e002      	b.n	80016bc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80016b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80016bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f004 fef9 	bl	80064c2 <HAL_PCD_DataInStageCallback>
 80016d0:	e01b      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80016d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016da:	441a      	add	r2, r3
 80016dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016de:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016e8:	441a      	add	r2, r3
 80016ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f809 	bl	800370c <USB_EPStartXfer>
 80016fa:	e006      	b.n	800170a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80016fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001700:	461a      	mov	r2, r3
 8001702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f91b 	bl	8001940 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001712:	b29b      	uxth	r3, r3
 8001714:	b21b      	sxth	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	f6ff ac37 	blt.w	8000f8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3758      	adds	r7, #88	; 0x58
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b088      	sub	sp, #32
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	4613      	mov	r3, r2
 8001732:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d07e      	beq.n	800183c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	3302      	adds	r3, #2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001766:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	699a      	ldr	r2, [r3, #24]
 800176c:	8b7b      	ldrh	r3, [r7, #26]
 800176e:	429a      	cmp	r2, r3
 8001770:	d306      	bcc.n	8001780 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	8b7b      	ldrh	r3, [r7, #26]
 8001778:	1ad2      	subs	r2, r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	e002      	b.n	8001786 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d123      	bne.n	80017d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a8:	833b      	strh	r3, [r7, #24]
 80017aa:	8b3b      	ldrh	r3, [r7, #24]
 80017ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017b0:	833b      	strh	r3, [r7, #24]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	441a      	add	r2, r3
 80017c0:	8b3b      	ldrh	r3, [r7, #24]
 80017c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01f      	beq.n	8001820 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	82fb      	strh	r3, [r7, #22]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	441a      	add	r2, r3
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800181c:	b29b      	uxth	r3, r3
 800181e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001820:	8b7b      	ldrh	r3, [r7, #26]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8087 	beq.w	8001936 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	6959      	ldr	r1, [r3, #20]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	891a      	ldrh	r2, [r3, #8]
 8001834:	8b7b      	ldrh	r3, [r7, #26]
 8001836:	f003 fa38 	bl	8004caa <USB_ReadPMA>
 800183a:	e07c      	b.n	8001936 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	3306      	adds	r3, #6
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001864:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	8b7b      	ldrh	r3, [r7, #26]
 800186c:	429a      	cmp	r2, r3
 800186e:	d306      	bcc.n	800187e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	8b7b      	ldrh	r3, [r7, #26]
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	619a      	str	r2, [r3, #24]
 800187c:	e002      	b.n	8001884 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d123      	bne.n	80018d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a6:	83fb      	strh	r3, [r7, #30]
 80018a8:	8bfb      	ldrh	r3, [r7, #30]
 80018aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018ae:	83fb      	strh	r3, [r7, #30]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	441a      	add	r2, r3
 80018be:	8bfb      	ldrh	r3, [r7, #30]
 80018c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11f      	bne.n	800191e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f8:	83bb      	strh	r3, [r7, #28]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	441a      	add	r2, r3
 8001908:	8bbb      	ldrh	r3, [r7, #28]
 800190a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800190e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800191a:	b29b      	uxth	r3, r3
 800191c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800191e:	8b7b      	ldrh	r3, [r7, #26]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	6959      	ldr	r1, [r3, #20]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	895a      	ldrh	r2, [r3, #10]
 8001930:	8b7b      	ldrh	r3, [r7, #26]
 8001932:	f003 f9ba 	bl	8004caa <USB_ReadPMA>
    }
  }

  return count;
 8001936:	8b7b      	ldrh	r3, [r7, #26]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0a4      	sub	sp, #144	; 0x90
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 81dd 	beq.w	8001d14 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	3302      	adds	r3, #2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001982:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800198e:	429a      	cmp	r2, r3
 8001990:	d907      	bls.n	80019a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800199a:	1ad2      	subs	r2, r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	619a      	str	r2, [r3, #24]
 80019a0:	e002      	b.n	80019a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 80b9 	bne.w	8001b24 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d126      	bne.n	8001a08 <HAL_PCD_EP_DB_Transmit+0xc8>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	4413      	add	r3, r2
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	011a      	lsls	r2, r3, #4
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	4413      	add	r3, r2
 80019dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e01a      	b.n	8001a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d116      	bne.n	8001a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a24:	4413      	add	r3, r2
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	011a      	lsls	r2, r3, #4
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	4413      	add	r3, r2
 8001a32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
 8001a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	785b      	ldrb	r3, [r3, #1]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d126      	bne.n	8001a9a <HAL_PCD_EP_DB_Transmit+0x15a>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	4413      	add	r3, r2
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	011a      	lsls	r2, r3, #4
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	801a      	strh	r2, [r3, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	801a      	strh	r2, [r3, #0]
 8001a98:	e017      	b.n	8001aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d113      	bne.n	8001aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	4413      	add	r3, r2
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	011a      	lsls	r2, r3, #4
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	4413      	add	r3, r2
 8001abe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f004 fcf6 	bl	80064c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 82fc 	beq.w	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afc:	82fb      	strh	r3, [r7, #22]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	441a      	add	r2, r3
 8001b0c:	8afb      	ldrh	r3, [r7, #22]
 8001b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	8013      	strh	r3, [r2, #0]
 8001b22:	e2da      	b.n	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d021      	beq.n	8001b72 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b48:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	441a      	add	r2, r3
 8001b5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	f040 82ae 	bne.w	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b86:	441a      	add	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b94:	441a      	add	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	6a1a      	ldr	r2, [r3, #32]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d30b      	bcc.n	8001bbe <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6a1a      	ldr	r2, [r3, #32]
 8001bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	621a      	str	r2, [r3, #32]
 8001bbc:	e017      	b.n	8001bee <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d108      	bne.n	8001bd8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001bc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bd6:	e00a      	b.n	8001bee <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d165      	bne.n	8001cc2 <HAL_PCD_EP_DB_Transmit+0x382>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	011a      	lsls	r2, r3, #4
 8001c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c16:	4413      	add	r3, r2
 8001c18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c32:	2b3e      	cmp	r3, #62	; 0x3e
 8001c34:	d91d      	bls.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x332>
 8001c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <HAL_PCD_EP_DB_Transmit+0x310>
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e044      	b.n	8001cfc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <HAL_PCD_EP_DB_Transmit+0x350>
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	e035      	b.n	8001cfc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_PCD_EP_DB_Transmit+0x36a>
 8001ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	801a      	strh	r2, [r3, #0]
 8001cc0:	e01c      	b.n	8001cfc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d118      	bne.n	8001cfc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cde:	4413      	add	r3, r2
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	011a      	lsls	r2, r3, #4
 8001ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cea:	4413      	add	r3, r2
 8001cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8001cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6959      	ldr	r1, [r3, #20]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	891a      	ldrh	r2, [r3, #8]
 8001d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f002 ff87 	bl	8004c20 <USB_WritePMA>
 8001d12:	e1e2      	b.n	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	3306      	adds	r3, #6
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d307      	bcc.n	8001d5c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	619a      	str	r2, [r3, #24]
 8001d5a:	e002      	b.n	8001d62 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 80c0 	bne.w	8001eec <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d126      	bne.n	8001dc2 <HAL_PCD_EP_DB_Transmit+0x482>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d88:	4413      	add	r3, r2
 8001d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	011a      	lsls	r2, r3, #4
 8001d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d94:	4413      	add	r3, r2
 8001d96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dbe:	801a      	strh	r2, [r3, #0]
 8001dc0:	e01a      	b.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d116      	bne.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	667b      	str	r3, [r7, #100]	; 0x64
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dde:	4413      	add	r3, r2
 8001de0:	667b      	str	r3, [r7, #100]	; 0x64
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	011a      	lsls	r2, r3, #4
 8001de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dea:	4413      	add	r3, r2
 8001dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001df0:	663b      	str	r3, [r7, #96]	; 0x60
 8001df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001df4:	2200      	movs	r2, #0
 8001df6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	677b      	str	r3, [r7, #116]	; 0x74
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	785b      	ldrb	r3, [r3, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12b      	bne.n	8001e5e <HAL_PCD_EP_DB_Transmit+0x51e>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1a:	4413      	add	r3, r2
 8001e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	011a      	lsls	r2, r3, #4
 8001e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e017      	b.n	8001e8e <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	785b      	ldrb	r3, [r3, #1]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d113      	bne.n	8001e8e <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e74:	4413      	add	r3, r2
 8001e76:	677b      	str	r3, [r7, #116]	; 0x74
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	011a      	lsls	r2, r3, #4
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	4413      	add	r3, r2
 8001e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e86:	673b      	str	r3, [r7, #112]	; 0x70
 8001e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f004 fb14 	bl	80064c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 811a 	bne.w	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	441a      	add	r2, r3
 8001ed2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	8013      	strh	r3, [r2, #0]
 8001eea:	e0f6      	b.n	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d121      	bne.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 80ca 	bne.w	80020da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f4e:	441a      	add	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f5c:	441a      	add	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d30b      	bcc.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	e017      	b.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001f8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f9e:	e00a      	b.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	657b      	str	r3, [r7, #84]	; 0x54
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d165      	bne.n	8002090 <HAL_PCD_EP_DB_Transmit+0x750>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd8:	4413      	add	r3, r2
 8001fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	011a      	lsls	r2, r3, #4
 8001fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002000:	2b3e      	cmp	r3, #62	; 0x3e
 8002002:	d91d      	bls.n	8002040 <HAL_PCD_EP_DB_Transmit+0x700>
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68
 800200c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201a:	3b01      	subs	r3, #1
 800201c:	66bb      	str	r3, [r7, #104]	; 0x68
 800201e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
 8002024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002026:	b29b      	uxth	r3, r3
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	b29b      	uxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002038:	b29a      	uxth	r2, r3
 800203a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	e041      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002056:	b29a      	uxth	r2, r3
 8002058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800205a:	801a      	strh	r2, [r3, #0]
 800205c:	e032      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x784>
 800205e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	66bb      	str	r3, [r7, #104]	; 0x68
 8002066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_PCD_EP_DB_Transmit+0x738>
 8002072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002074:	3301      	adds	r3, #1
 8002076:	66bb      	str	r3, [r7, #104]	; 0x68
 8002078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29a      	uxth	r2, r3
 800207e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002080:	b29b      	uxth	r3, r3
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	b29b      	uxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b29a      	uxth	r2, r3
 800208a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	e019      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d115      	bne.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a6:	4413      	add	r3, r2
 80020a8:	657b      	str	r3, [r7, #84]	; 0x54
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	011a      	lsls	r2, r3, #4
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	4413      	add	r3, r2
 80020b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020b8:	653b      	str	r3, [r7, #80]	; 0x50
 80020ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6959      	ldr	r1, [r3, #20]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	895a      	ldrh	r2, [r3, #10]
 80020d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f002 fda3 	bl	8004c20 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020f4:	82bb      	strh	r3, [r7, #20]
 80020f6:	8abb      	ldrh	r3, [r7, #20]
 80020f8:	f083 0310 	eor.w	r3, r3, #16
 80020fc:	82bb      	strh	r3, [r7, #20]
 80020fe:	8abb      	ldrh	r3, [r7, #20]
 8002100:	f083 0320 	eor.w	r3, r3, #32
 8002104:	82bb      	strh	r3, [r7, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	8abb      	ldrh	r3, [r7, #20]
 8002116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800211a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002126:	b29b      	uxth	r3, r3
 8002128:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3790      	adds	r7, #144	; 0x90
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	4613      	mov	r3, r2
 8002144:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002146:	897b      	ldrh	r3, [r7, #10]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e009      	b.n	800217e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800216a:	897a      	ldrh	r2, [r7, #10]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800217e:	893b      	ldrh	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2200      	movs	r2, #0
 8002188:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	b29a      	uxth	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	80da      	strh	r2, [r3, #6]
 8002192:	e00b      	b.n	80021ac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2201      	movs	r2, #1
 8002198:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	b29a      	uxth	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e26c      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e246      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe f8fc 	bl	8000490 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe f8f8 	bl	8000490 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1fa      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe f8e8 	bl	8000490 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe f8e4 	bl	8000490 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1e6      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1ba      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe f89d 	bl	8000490 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe f899 	bl	8000490 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e19b      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe f87c 	bl	8000490 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe f878 	bl	8000490 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e17a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe f85c 	bl	8000490 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe f858 	bl	8000490 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e15a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 fa9a 	bl	8002934 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe f842 	bl	8000490 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe f83e 	bl	8000490 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e140      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b9e      	ldr	r3, [pc, #632]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b97      	ldr	r3, [pc, #604]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b94      	ldr	r3, [pc, #592]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a93      	ldr	r2, [pc, #588]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b91      	ldr	r3, [pc, #580]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a8a      	ldr	r2, [pc, #552]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fd ffff 	bl	8000490 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fd fffb 	bl	8000490 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0fd      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a69      	ldr	r2, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fd ffaf 	bl	8000490 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fd ffab 	bl	8000490 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ab      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fd ff99 	bl	8000490 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fd ff95 	bl	8000490 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e095      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a47      	ldr	r2, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8081 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fd ff69 	bl	8000490 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fd ff65 	bl	8000490 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e067      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	492d      	ldr	r1, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	4927      	ldr	r1, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fd ff39 	bl	8000490 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fd ff35 	bl	8000490 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e037      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e02f      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fd ff22 	bl	8000490 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fd ff1e 	bl	8000490 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e020      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	42420060 	.word	0x42420060

080026b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d0      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4965      	ldr	r1, [pc, #404]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b8      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	494d      	ldr	r1, [pc, #308]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d040      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d115      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e073      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06b      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4936      	ldr	r1, [pc, #216]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7fd fe72 	bl	8000490 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fd fe6e 	bl	8000490 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e053      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d210      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	4922      	ldr	r1, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e032      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4916      	ldr	r1, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002846:	f000 f821 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490a      	ldr	r1, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1cc>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fdd0 	bl	800040c <HAL_InitTick>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	080069e0 	.word	0x080069e0
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x30>
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ba:	e027      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	613b      	str	r3, [r7, #16]
      break;
 80028c0:	e027      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0c9b      	lsrs	r3, r3, #18
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCC_GetSysClockFreq+0x94>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0c5b      	lsrs	r3, r3, #17
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ee:	fb02 f203 	mul.w	r2, r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e004      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	613b      	str	r3, [r7, #16]
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	693b      	ldr	r3, [r7, #16]
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	007a1200 	.word	0x007a1200
 8002928:	080069f0 	.word	0x080069f0
 800292c:	08006a00 	.word	0x08006a00
 8002930:	003d0900 	.word	0x003d0900

08002934 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <RCC_Delay+0x34>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <RCC_Delay+0x38>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0a5b      	lsrs	r3, r3, #9
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002950:	bf00      	nop
  }
  while (Delay --);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e5a      	subs	r2, r3, #1
 8002956:	60fa      	str	r2, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f9      	bne.n	8002950 <RCC_Delay+0x1c>
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20000000 	.word	0x20000000
 800296c:	10624dd3 	.word	0x10624dd3

08002970 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d07d      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002990:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a6:	61d3      	str	r3, [r2, #28]
 80029a8:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b4:	2301      	movs	r3, #1
 80029b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d118      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d0:	f7fd fd5e 	bl	8000490 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	e008      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7fd fd5a 	bl	8000490 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e06d      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d027      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a2a:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fd fd29 	bl	8000490 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fd fd25 	bl	8000490 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e036      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ee      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4917      	ldr	r1, [pc, #92]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	490b      	ldr	r1, [pc, #44]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42420440 	.word	0x42420440

08002adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002adc:	b084      	sub	sp, #16
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	f107 0014 	add.w	r0, r7, #20
 8002aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	b004      	add	sp, #16
 8002afa:	4770      	bx	lr

08002afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b74:	b084      	sub	sp, #16
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	f107 0014 	add.w	r0, r7, #20
 8002b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	b004      	add	sp, #16
 8002bb2:	4770      	bx	lr

08002bb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b09d      	sub	sp, #116	; 0x74
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	78db      	ldrb	r3, [r3, #3]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d81f      	bhi.n	8002c26 <USB_ActivateEndpoint+0x72>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <USB_ActivateEndpoint+0x38>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c19 	.word	0x08002c19
 8002bf4:	08002c2f 	.word	0x08002c2f
 8002bf8:	08002c0b 	.word	0x08002c0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002bfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c08:	e012      	b.n	8002c30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c16:	e00b      	b.n	8002c30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c24:	e004      	b.n	8002c30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002c2c:	e000      	b.n	8002c30 <USB_ActivateEndpoint+0x7c>
      break;
 8002c2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	441a      	add	r2, r3
 8002c80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	7b1b      	ldrb	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 8178 	bne.w	8002f92 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8084 	beq.w	8002db4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	88db      	ldrh	r3, [r3, #6]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	827b      	strh	r3, [r7, #18]
 8002cee:	8a7b      	ldrh	r3, [r7, #18]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <USB_ActivateEndpoint+0x17c>
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	823b      	strh	r3, [r7, #16]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	8a3b      	ldrh	r3, [r7, #16]
 8002d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	78db      	ldrb	r3, [r3, #3]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d020      	beq.n	8002d7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	81bb      	strh	r3, [r7, #12]
 8002d50:	89bb      	ldrh	r3, [r7, #12]
 8002d52:	f083 0320 	eor.w	r3, r3, #32
 8002d56:	81bb      	strh	r3, [r7, #12]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	89bb      	ldrh	r3, [r7, #12]
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]
 8002d78:	e2d5      	b.n	8003326 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d90:	81fb      	strh	r3, [r7, #14]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]
 8002db2:	e2b8      	b.n	8003326 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	4413      	add	r3, r2
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	011a      	lsls	r2, r3, #4
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	88db      	ldrh	r3, [r3, #6]
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	4413      	add	r3, r2
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	011a      	lsls	r2, r3, #4
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	4413      	add	r3, r2
 8002e06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	801a      	strh	r2, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b3e      	cmp	r3, #62	; 0x3e
 8002e22:	d91d      	bls.n	8002e60 <USB_ActivateEndpoint+0x2ac>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <USB_ActivateEndpoint+0x28a>
 8002e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	029b      	lsls	r3, r3, #10
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	e026      	b.n	8002eae <USB_ActivateEndpoint+0x2fa>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <USB_ActivateEndpoint+0x2ca>
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	e017      	b.n	8002eae <USB_ActivateEndpoint+0x2fa>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <USB_ActivateEndpoint+0x2e4>
 8002e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e94:	3301      	adds	r3, #1
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01b      	beq.n	8002efe <USB_ActivateEndpoint+0x34a>
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002edc:	843b      	strh	r3, [r7, #32]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	8c3b      	ldrh	r3, [r7, #32]
 8002eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d124      	bne.n	8002f50 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1c:	83bb      	strh	r3, [r7, #28]
 8002f1e:	8bbb      	ldrh	r3, [r7, #28]
 8002f20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f24:	83bb      	strh	r3, [r7, #28]
 8002f26:	8bbb      	ldrh	r3, [r7, #28]
 8002f28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f2c:	83bb      	strh	r3, [r7, #28]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	8bbb      	ldrh	r3, [r7, #28]
 8002f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8013      	strh	r3, [r2, #0]
 8002f4e:	e1ea      	b.n	8003326 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	83fb      	strh	r3, [r7, #30]
 8002f68:	8bfb      	ldrh	r3, [r7, #30]
 8002f6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f6e:	83fb      	strh	r3, [r7, #30]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	8bfb      	ldrh	r3, [r7, #30]
 8002f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8013      	strh	r3, [r2, #0]
 8002f90:	e1c9      	b.n	8003326 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	78db      	ldrb	r3, [r3, #3]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d11e      	bne.n	8002fd8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	441a      	add	r2, r3
 8002ffc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003010:	b29b      	uxth	r3, r3
 8003012:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003024:	4413      	add	r3, r2
 8003026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	011a      	lsls	r2, r3, #4
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	4413      	add	r3, r2
 8003032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003036:	65bb      	str	r3, [r7, #88]	; 0x58
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	891b      	ldrh	r3, [r3, #8]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	657b      	str	r3, [r7, #84]	; 0x54
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003058:	4413      	add	r3, r2
 800305a:	657b      	str	r3, [r7, #84]	; 0x54
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	011a      	lsls	r2, r3, #4
 8003062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003064:	4413      	add	r3, r2
 8003066:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800306a:	653b      	str	r3, [r7, #80]	; 0x50
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	895b      	ldrh	r3, [r3, #10]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	b29b      	uxth	r3, r3
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 8093 	bne.w	80031ac <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003096:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01b      	beq.n	80030da <USB_ActivateEndpoint+0x526>
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	441a      	add	r2, r3
 80030c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80030c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80030e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01b      	beq.n	800312a <USB_ActivateEndpoint+0x576>
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003108:	877b      	strh	r3, [r7, #58]	; 0x3a
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	441a      	add	r2, r3
 8003114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003126:	b29b      	uxth	r3, r3
 8003128:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003140:	873b      	strh	r3, [r7, #56]	; 0x38
 8003142:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003144:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003148:	873b      	strh	r3, [r7, #56]	; 0x38
 800314a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800314c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003150:	873b      	strh	r3, [r7, #56]	; 0x38
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	441a      	add	r2, r3
 800315c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800315e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003188:	86fb      	strh	r3, [r7, #54]	; 0x36
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8013      	strh	r3, [r2, #0]
 80031aa:	e0bc      	b.n	8003326 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01d      	beq.n	8003204 <USB_ActivateEndpoint+0x650>
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003200:	b29b      	uxth	r3, r3
 8003202:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003214:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01d      	beq.n	800325c <USB_ActivateEndpoint+0x6a8>
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003258:	b29b      	uxth	r3, r3
 800325a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	78db      	ldrb	r3, [r3, #3]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d024      	beq.n	80032ae <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800327e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003282:	f083 0320 	eor.w	r3, r3, #32
 8003286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	441a      	add	r2, r3
 8003294:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800329c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	8013      	strh	r3, [r2, #0]
 80032ac:	e01d      	b.n	80032ea <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800332a:	4618      	mov	r0, r3
 800332c:	3774      	adds	r7, #116	; 0x74
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003334:	b480      	push	{r7}
 8003336:	b08d      	sub	sp, #52	; 0x34
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	7b1b      	ldrb	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 808e 	bne.w	8003464 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d044      	beq.n	80033da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	81bb      	strh	r3, [r7, #12]
 800335e:	89bb      	ldrh	r3, [r7, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <USB_DeactivateEndpoint+0x6c>
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	817b      	strh	r3, [r7, #10]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b6:	813b      	strh	r3, [r7, #8]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	893b      	ldrh	r3, [r7, #8]
 80033c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	8013      	strh	r3, [r2, #0]
 80033d8:	e192      	b.n	8003700 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	827b      	strh	r3, [r7, #18]
 80033e8:	8a7b      	ldrh	r3, [r7, #18]
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01b      	beq.n	800342a <USB_DeactivateEndpoint+0xf6>
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	823b      	strh	r3, [r7, #16]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	8a3b      	ldrh	r3, [r7, #16]
 8003416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	b29b      	uxth	r3, r3
 8003428:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	81fb      	strh	r3, [r7, #14]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]
 8003462:	e14d      	b.n	8003700 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f040 80a5 	bne.w	80035b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	843b      	strh	r3, [r7, #32]
 800347c:	8c3b      	ldrh	r3, [r7, #32]
 800347e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01b      	beq.n	80034be <USB_DeactivateEndpoint+0x18a>
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	83fb      	strh	r3, [r7, #30]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	8bfb      	ldrh	r3, [r7, #30]
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	83bb      	strh	r3, [r7, #28]
 80034cc:	8bbb      	ldrh	r3, [r7, #28]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01b      	beq.n	800350e <USB_DeactivateEndpoint+0x1da>
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	837b      	strh	r3, [r7, #26]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8b7b      	ldrh	r3, [r7, #26]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003524:	833b      	strh	r3, [r7, #24]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	8b3b      	ldrh	r3, [r7, #24]
 8003532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	82fb      	strh	r3, [r7, #22]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	441a      	add	r2, r3
 8003568:	8afb      	ldrh	r3, [r7, #22]
 800356a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357a:	b29b      	uxth	r3, r3
 800357c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003594:	82bb      	strh	r3, [r7, #20]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	441a      	add	r2, r3
 80035a0:	8abb      	ldrh	r3, [r7, #20]
 80035a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8013      	strh	r3, [r2, #0]
 80035b6:	e0a3      	b.n	8003700 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <USB_DeactivateEndpoint+0x2d4>
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	441a      	add	r2, r3
 80035f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	b29b      	uxth	r3, r3
 8003606:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <USB_DeactivateEndpoint+0x324>
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	853b      	strh	r3, [r7, #40]	; 0x28
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	441a      	add	r2, r3
 800367a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800367c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	b29b      	uxth	r3, r3
 800368e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	847b      	strh	r3, [r7, #34]	; 0x22
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3734      	adds	r7, #52	; 0x34
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b0c2      	sub	sp, #264	; 0x108
 8003710:	af00      	add	r7, sp, #0
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	6018      	str	r0, [r3, #0]
 8003716:	463b      	mov	r3, r7
 8003718:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800371a:	463b      	mov	r3, r7
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 8545 	bne.w	80041b0 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003726:	463b      	mov	r3, r7
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	463b      	mov	r3, r7
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	429a      	cmp	r2, r3
 8003734:	d905      	bls.n	8003742 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003736:	463b      	mov	r3, r7
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003740:	e004      	b.n	800374c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003742:	463b      	mov	r3, r7
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800374c:	463b      	mov	r3, r7
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	7b1b      	ldrb	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d128      	bne.n	80037a8 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003756:	463b      	mov	r3, r7
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6959      	ldr	r1, [r3, #20]
 800375c:	463b      	mov	r3, r7
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	88da      	ldrh	r2, [r3, #6]
 8003762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003766:	b29b      	uxth	r3, r3
 8003768:	1d38      	adds	r0, r7, #4
 800376a:	6800      	ldr	r0, [r0, #0]
 800376c:	f001 fa58 	bl	8004c20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	463b      	mov	r3, r7
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	011a      	lsls	r2, r3, #4
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	f000 bcdb 	b.w	800415e <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037a8:	463b      	mov	r3, r7
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	78db      	ldrb	r3, [r3, #3]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	f040 836f 	bne.w	8003e92 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037b4:	463b      	mov	r3, r7
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	463b      	mov	r3, r7
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	f240 8313 	bls.w	8003dec <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	463b      	mov	r3, r7
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	463b      	mov	r3, r7
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003806:	b29b      	uxth	r3, r3
 8003808:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800380a:	463b      	mov	r3, r7
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	463b      	mov	r3, r7
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	463b      	mov	r3, r7
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 816d 	beq.w	8003b12 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
 800383e:	463b      	mov	r3, r7
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	785b      	ldrb	r3, [r3, #1]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d16e      	bne.n	8003926 <USB_EPStartXfer+0x21a>
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	4413      	add	r3, r2
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003860:	463b      	mov	r3, r7
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	011a      	lsls	r2, r3, #4
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	4413      	add	r3, r2
 800386c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387c:	b29a      	uxth	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003886:	2b3e      	cmp	r3, #62	; 0x3e
 8003888:	d921      	bls.n	80038ce <USB_EPStartXfer+0x1c2>
 800388a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <USB_EPStartXfer+0x19e>
 80038a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038a4:	3b01      	subs	r3, #1
 80038a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	e047      	b.n	800395e <USB_EPStartXfer+0x252>
 80038ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <USB_EPStartXfer+0x1e0>
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	e038      	b.n	800395e <USB_EPStartXfer+0x252>
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <USB_EPStartXfer+0x200>
 8003902:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003906:	3301      	adds	r3, #1
 8003908:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29a      	uxth	r2, r3
 8003912:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003916:	b29b      	uxth	r3, r3
 8003918:	029b      	lsls	r3, r3, #10
 800391a:	b29b      	uxth	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	b29a      	uxth	r2, r3
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	e01b      	b.n	800395e <USB_EPStartXfer+0x252>
 8003926:	463b      	mov	r3, r7
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d116      	bne.n	800395e <USB_EPStartXfer+0x252>
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003938:	b29b      	uxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	4413      	add	r3, r2
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
 8003942:	463b      	mov	r3, r7
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	011a      	lsls	r2, r3, #4
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	4413      	add	r3, r2
 800394e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003958:	b29a      	uxth	r2, r3
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	895b      	ldrh	r3, [r3, #10]
 8003964:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003968:	463b      	mov	r3, r7
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6959      	ldr	r1, [r3, #20]
 800396e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003972:	b29b      	uxth	r3, r3
 8003974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003978:	1d38      	adds	r0, r7, #4
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	f001 f950 	bl	8004c20 <USB_WritePMA>
            ep->xfer_buff += len;
 8003980:	463b      	mov	r3, r7
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398a:	441a      	add	r2, r3
 800398c:	463b      	mov	r3, r7
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003992:	463b      	mov	r3, r7
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	463b      	mov	r3, r7
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d909      	bls.n	80039b6 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 80039a2:	463b      	mov	r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ac:	1ad2      	subs	r2, r2, r3
 80039ae:	463b      	mov	r3, r7
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	621a      	str	r2, [r3, #32]
 80039b4:	e008      	b.n	80039c8 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80039b6:	463b      	mov	r3, r7
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80039c0:	463b      	mov	r3, r7
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2200      	movs	r2, #0
 80039c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039c8:	463b      	mov	r3, r7
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d16e      	bne.n	8003ab0 <USB_EPStartXfer+0x3a4>
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4413      	add	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	463b      	mov	r3, r7
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	011a      	lsls	r2, r3, #4
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4413      	add	r3, r2
 80039f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a10:	2b3e      	cmp	r3, #62	; 0x3e
 8003a12:	d921      	bls.n	8003a58 <USB_EPStartXfer+0x34c>
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <USB_EPStartXfer+0x328>
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	029b      	lsls	r3, r3, #10
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	e04a      	b.n	8003aee <USB_EPStartXfer+0x3e2>
 8003a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <USB_EPStartXfer+0x36a>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	e03b      	b.n	8003aee <USB_EPStartXfer+0x3e2>
 8003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <USB_EPStartXfer+0x38a>
 8003a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a90:	3301      	adds	r3, #1
 8003a92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	029b      	lsls	r3, r3, #10
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e01e      	b.n	8003aee <USB_EPStartXfer+0x3e2>
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d119      	bne.n	8003aee <USB_EPStartXfer+0x3e2>
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	4413      	add	r3, r2
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011a      	lsls	r2, r3, #4
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	4413      	add	r3, r2
 8003ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003aee:	463b      	mov	r3, r7
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	891b      	ldrh	r3, [r3, #8]
 8003af4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003af8:	463b      	mov	r3, r7
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6959      	ldr	r1, [r3, #20]
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b08:	1d38      	adds	r0, r7, #4
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	f001 f888 	bl	8004c20 <USB_WritePMA>
 8003b10:	e325      	b.n	800415e <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b12:	463b      	mov	r3, r7
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d16e      	bne.n	8003bfa <USB_EPStartXfer+0x4ee>
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	4413      	add	r3, r2
 8003b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b34:	463b      	mov	r3, r7
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	011a      	lsls	r2, r3, #4
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3e:	4413      	add	r3, r2
 8003b40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
 8003b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b5c:	d921      	bls.n	8003ba2 <USB_EPStartXfer+0x496>
 8003b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <USB_EPStartXfer+0x472>
 8003b74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	e04a      	b.n	8003c38 <USB_EPStartXfer+0x52c>
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <USB_EPStartXfer+0x4b4>
 8003baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	e03b      	b.n	8003c38 <USB_EPStartXfer+0x52c>
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <USB_EPStartXfer+0x4d4>
 8003bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	029b      	lsls	r3, r3, #10
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e01e      	b.n	8003c38 <USB_EPStartXfer+0x52c>
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d119      	bne.n	8003c38 <USB_EPStartXfer+0x52c>
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	653b      	str	r3, [r7, #80]	; 0x50
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	4413      	add	r3, r2
 8003c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	011a      	lsls	r2, r3, #4
 8003c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c26:	4413      	add	r3, r2
 8003c28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c38:	463b      	mov	r3, r7
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	891b      	ldrh	r3, [r3, #8]
 8003c3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c42:	463b      	mov	r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6959      	ldr	r1, [r3, #20]
 8003c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003c52:	1d38      	adds	r0, r7, #4
 8003c54:	6800      	ldr	r0, [r0, #0]
 8003c56:	f000 ffe3 	bl	8004c20 <USB_WritePMA>
            ep->xfer_buff += len;
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c64:	441a      	add	r2, r3
 8003c66:	463b      	mov	r3, r7
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	463b      	mov	r3, r7
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d909      	bls.n	8003c90 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8003c7c:	463b      	mov	r3, r7
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	463b      	mov	r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	621a      	str	r2, [r3, #32]
 8003c8e:	e008      	b.n	8003ca2 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c90:	463b      	mov	r3, r7
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca8:	463b      	mov	r3, r7
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d16e      	bne.n	8003d90 <USB_EPStartXfer+0x684>
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	4413      	add	r3, r2
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cca:	463b      	mov	r3, r7
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	011a      	lsls	r2, r3, #4
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8003cf2:	d921      	bls.n	8003d38 <USB_EPStartXfer+0x62c>
 8003cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <USB_EPStartXfer+0x608>
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e047      	b.n	8003dc8 <USB_EPStartXfer+0x6bc>
 8003d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <USB_EPStartXfer+0x64a>
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	e038      	b.n	8003dc8 <USB_EPStartXfer+0x6bc>
 8003d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <USB_EPStartXfer+0x66a>
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	3301      	adds	r3, #1
 8003d72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	029b      	lsls	r3, r3, #10
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4313      	orrs	r3, r2
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	e01b      	b.n	8003dc8 <USB_EPStartXfer+0x6bc>
 8003d90:	463b      	mov	r3, r7
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d116      	bne.n	8003dc8 <USB_EPStartXfer+0x6bc>
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	4413      	add	r3, r2
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40
 8003dac:	463b      	mov	r3, r7
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	011a      	lsls	r2, r3, #4
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	4413      	add	r3, r2
 8003db8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003dc8:	463b      	mov	r3, r7
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	895b      	ldrh	r3, [r3, #10]
 8003dce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6959      	ldr	r1, [r3, #20]
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003de2:	1d38      	adds	r0, r7, #4
 8003de4:	6800      	ldr	r0, [r0, #0]
 8003de6:	f000 ff1b 	bl	8004c20 <USB_WritePMA>
 8003dea:	e1b8      	b.n	800415e <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003dec:	463b      	mov	r3, r7
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	463b      	mov	r3, r7
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4e:	4413      	add	r3, r2
 8003e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e52:	463b      	mov	r3, r7
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	011a      	lsls	r2, r3, #4
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e6e:	463b      	mov	r3, r7
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	891b      	ldrh	r3, [r3, #8]
 8003e74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e78:	463b      	mov	r3, r7
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003e88:	1d38      	adds	r0, r7, #4
 8003e8a:	6800      	ldr	r0, [r0, #0]
 8003e8c:	f000 fec8 	bl	8004c20 <USB_WritePMA>
 8003e90:	e165      	b.n	800415e <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003e92:	463b      	mov	r3, r7
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e9c:	1ad2      	subs	r2, r2, r3
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	463b      	mov	r3, r7
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80a5 	beq.w	800400a <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d16e      	bne.n	8003fae <USB_EPStartXfer+0x8a2>
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee4:	4413      	add	r3, r2
 8003ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee8:	463b      	mov	r3, r7
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	011a      	lsls	r2, r3, #4
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8003efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f10:	d921      	bls.n	8003f56 <USB_EPStartXfer+0x84a>
 8003f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <USB_EPStartXfer+0x826>
 8003f28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	029b      	lsls	r3, r3, #10
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4313      	orrs	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	e047      	b.n	8003fe6 <USB_EPStartXfer+0x8da>
 8003f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <USB_EPStartXfer+0x868>
 8003f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e038      	b.n	8003fe6 <USB_EPStartXfer+0x8da>
 8003f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <USB_EPStartXfer+0x888>
 8003f8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	e01b      	b.n	8003fe6 <USB_EPStartXfer+0x8da>
 8003fae:	463b      	mov	r3, r7
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d116      	bne.n	8003fe6 <USB_EPStartXfer+0x8da>
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc6:	4413      	add	r3, r2
 8003fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003fca:	463b      	mov	r3, r7
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	011a      	lsls	r2, r3, #4
 8003fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	895b      	ldrh	r3, [r3, #10]
 8003fec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6959      	ldr	r1, [r3, #20]
 8003ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004000:	1d38      	adds	r0, r7, #4
 8004002:	6800      	ldr	r0, [r0, #0]
 8004004:	f000 fe0c 	bl	8004c20 <USB_WritePMA>
 8004008:	e0a9      	b.n	800415e <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800400a:	463b      	mov	r3, r7
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d16e      	bne.n	80040f2 <USB_EPStartXfer+0x9e6>
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	67fb      	str	r3, [r7, #124]	; 0x7c
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004028:	4413      	add	r3, r2
 800402a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800402c:	463b      	mov	r3, r7
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	011a      	lsls	r2, r3, #4
 8004034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004036:	4413      	add	r3, r2
 8004038:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800403c:	67bb      	str	r3, [r7, #120]	; 0x78
 800403e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004048:	b29a      	uxth	r2, r3
 800404a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004052:	2b3e      	cmp	r3, #62	; 0x3e
 8004054:	d921      	bls.n	800409a <USB_EPStartXfer+0x98e>
 8004056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <USB_EPStartXfer+0x96a>
 800406c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004070:	3b01      	subs	r3, #1
 8004072:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29a      	uxth	r2, r3
 800407c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004080:	b29b      	uxth	r3, r3
 8004082:	029b      	lsls	r3, r3, #10
 8004084:	b29b      	uxth	r3, r3
 8004086:	4313      	orrs	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004092:	b29a      	uxth	r2, r3
 8004094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	e050      	b.n	800413c <USB_EPStartXfer+0xa30>
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <USB_EPStartXfer+0x9ac>
 80040a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	e041      	b.n	800413c <USB_EPStartXfer+0xa30>
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <USB_EPStartXfer+0x9cc>
 80040ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040d2:	3301      	adds	r3, #1
 80040d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	e024      	b.n	800413c <USB_EPStartXfer+0xa30>
 80040f2:	463b      	mov	r3, r7
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d11f      	bne.n	800413c <USB_EPStartXfer+0xa30>
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004114:	4413      	add	r3, r2
 8004116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800411a:	463b      	mov	r3, r7
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	011a      	lsls	r2, r3, #4
 8004122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004126:	4413      	add	r3, r2
 8004128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800412c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004134:	b29a      	uxth	r2, r3
 8004136:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800413a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800413c:	463b      	mov	r3, r7
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	891b      	ldrh	r3, [r3, #8]
 8004142:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004146:	463b      	mov	r3, r7
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6959      	ldr	r1, [r3, #20]
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004150:	b29b      	uxth	r3, r3
 8004152:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004156:	1d38      	adds	r0, r7, #4
 8004158:	6800      	ldr	r0, [r0, #0]
 800415a:	f000 fd61 	bl	8004c20 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	463b      	mov	r3, r7
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	897b      	ldrh	r3, [r7, #10]
 800417c:	f083 0310 	eor.w	r3, r3, #16
 8004180:	817b      	strh	r3, [r7, #10]
 8004182:	897b      	ldrh	r3, [r7, #10]
 8004184:	f083 0320 	eor.w	r3, r3, #32
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	463b      	mov	r3, r7
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]
 80041ae:	e3f3      	b.n	8004998 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041b0:	463b      	mov	r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	7b1b      	ldrb	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 809c 	bne.w	80042f4 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041bc:	463b      	mov	r3, r7
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d90e      	bls.n	80041ea <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80041cc:	463b      	mov	r3, r7
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	1ad2      	subs	r2, r2, r3
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	619a      	str	r2, [r3, #24]
 80041e8:	e008      	b.n	80041fc <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80041ea:	463b      	mov	r3, r7
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80041f4:	463b      	mov	r3, r7
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004214:	4413      	add	r3, r2
 8004216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	011a      	lsls	r2, r3, #4
 8004222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004226:	4413      	add	r3, r2
 8004228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800422c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423c:	b29a      	uxth	r2, r3
 800423e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004248:	2b3e      	cmp	r3, #62	; 0x3e
 800424a:	d923      	bls.n	8004294 <USB_EPStartXfer+0xb88>
 800424c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <USB_EPStartXfer+0xb60>
 8004262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004266:	3b01      	subs	r3, #1
 8004268:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800426c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004278:	b29b      	uxth	r3, r3
 800427a:	029b      	lsls	r3, r3, #10
 800427c:	b29b      	uxth	r3, r3
 800427e:	4313      	orrs	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428a:	b29a      	uxth	r2, r3
 800428c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e353      	b.n	800493c <USB_EPStartXfer+0x1230>
 8004294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10c      	bne.n	80042b6 <USB_EPStartXfer+0xbaa>
 800429c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b2:	801a      	strh	r2, [r3, #0]
 80042b4:	e342      	b.n	800493c <USB_EPStartXfer+0x1230>
 80042b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <USB_EPStartXfer+0xbca>
 80042cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d0:	3301      	adds	r3, #1
 80042d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	e323      	b.n	800493c <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80042f4:	463b      	mov	r3, r7
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f040 81a9 	bne.w	8004652 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 8082 	bne.w	8004410 <USB_EPStartXfer+0xd04>
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004324:	4413      	add	r3, r2
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800432a:	463b      	mov	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	011a      	lsls	r2, r3, #4
 8004332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004336:	4413      	add	r3, r2
 8004338:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800433c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434c:	b29a      	uxth	r2, r3
 800434e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	463b      	mov	r3, r7
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b3e      	cmp	r3, #62	; 0x3e
 800435c:	d925      	bls.n	80043aa <USB_EPStartXfer+0xc9e>
 800435e:	463b      	mov	r3, r7
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800436a:	463b      	mov	r3, r7
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <USB_EPStartXfer+0xc76>
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437c:	3b01      	subs	r3, #1
 800437e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29a      	uxth	r2, r3
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	b29b      	uxth	r3, r3
 8004390:	029b      	lsls	r3, r3, #10
 8004392:	b29b      	uxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	b29b      	uxth	r3, r3
 8004398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e058      	b.n	800445c <USB_EPStartXfer+0xd50>
 80043aa:	463b      	mov	r3, r7
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10c      	bne.n	80043ce <USB_EPStartXfer+0xcc2>
 80043b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e046      	b.n	800445c <USB_EPStartXfer+0xd50>
 80043ce:	463b      	mov	r3, r7
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043da:	463b      	mov	r3, r7
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <USB_EPStartXfer+0xce6>
 80043e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ec:	3301      	adds	r3, #1
 80043ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	b29b      	uxth	r3, r3
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	b29b      	uxth	r3, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	b29a      	uxth	r2, r3
 8004408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	e025      	b.n	800445c <USB_EPStartXfer+0xd50>
 8004410:	463b      	mov	r3, r7
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d120      	bne.n	800445c <USB_EPStartXfer+0xd50>
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004432:	4413      	add	r3, r2
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	011a      	lsls	r2, r3, #4
 8004440:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004444:	4413      	add	r3, r2
 8004446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800444a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	b29a      	uxth	r2, r3
 8004456:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004464:	463b      	mov	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8082 	bne.w	8004574 <USB_EPStartXfer+0xe68>
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004488:	4413      	add	r3, r2
 800448a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800448e:	463b      	mov	r3, r7
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	011a      	lsls	r2, r3, #4
 8004496:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800449a:	4413      	add	r3, r2
 800449c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	463b      	mov	r3, r7
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b3e      	cmp	r3, #62	; 0x3e
 80044c0:	d925      	bls.n	800450e <USB_EPStartXfer+0xe02>
 80044c2:	463b      	mov	r3, r7
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <USB_EPStartXfer+0xdda>
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e0:	3b01      	subs	r3, #1
 80044e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004504:	b29a      	uxth	r2, r3
 8004506:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e054      	b.n	80045b8 <USB_EPStartXfer+0xeac>
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10c      	bne.n	8004532 <USB_EPStartXfer+0xe26>
 8004518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004528:	b29a      	uxth	r2, r3
 800452a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	e042      	b.n	80045b8 <USB_EPStartXfer+0xeac>
 8004532:	463b      	mov	r3, r7
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800453e:	463b      	mov	r3, r7
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <USB_EPStartXfer+0xe4a>
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004550:	3301      	adds	r3, #1
 8004552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29a      	uxth	r2, r3
 800455e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004562:	b29b      	uxth	r3, r3
 8004564:	029b      	lsls	r3, r3, #10
 8004566:	b29b      	uxth	r3, r3
 8004568:	4313      	orrs	r3, r2
 800456a:	b29a      	uxth	r2, r3
 800456c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e021      	b.n	80045b8 <USB_EPStartXfer+0xeac>
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d11c      	bne.n	80045b8 <USB_EPStartXfer+0xeac>
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800458e:	4413      	add	r3, r2
 8004590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	011a      	lsls	r2, r3, #4
 800459c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045a0:	4413      	add	r3, r2
 80045a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045b6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80045b8:	463b      	mov	r3, r7
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 81bc 	beq.w	800493c <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	463b      	mov	r3, r7
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80045dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <USB_EPStartXfer+0xee4>
 80045e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80045f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 819f 	bne.w	800493c <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8198 	bne.w	800493c <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	463b      	mov	r3, r7
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	463b      	mov	r3, r7
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e174      	b.n	800493c <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004652:	463b      	mov	r3, r7
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	78db      	ldrb	r3, [r3, #3]
 8004658:	2b01      	cmp	r3, #1
 800465a:	f040 816d 	bne.w	8004938 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	463b      	mov	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d90e      	bls.n	800468c <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800466e:	463b      	mov	r3, r7
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004678:	463b      	mov	r3, r7
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	619a      	str	r2, [r3, #24]
 800468a:	e008      	b.n	800469e <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004696:	463b      	mov	r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800469e:	463b      	mov	r3, r7
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d17b      	bne.n	80047a0 <USB_EPStartXfer+0x1094>
 80046a8:	1d3b      	adds	r3, r7, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046c0:	4413      	add	r3, r2
 80046c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046c6:	463b      	mov	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046d2:	4413      	add	r3, r2
 80046d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f4:	2b3e      	cmp	r3, #62	; 0x3e
 80046f6:	d923      	bls.n	8004740 <USB_EPStartXfer+0x1034>
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <USB_EPStartXfer+0x100c>
 800470e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004712:	3b01      	subs	r3, #1
 8004714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29a      	uxth	r2, r3
 8004720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004724:	b29b      	uxth	r3, r3
 8004726:	029b      	lsls	r3, r3, #10
 8004728:	b29b      	uxth	r3, r3
 800472a:	4313      	orrs	r3, r2
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e054      	b.n	80047ea <USB_EPStartXfer+0x10de>
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10c      	bne.n	8004762 <USB_EPStartXfer+0x1056>
 8004748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004758:	b29a      	uxth	r2, r3
 800475a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e043      	b.n	80047ea <USB_EPStartXfer+0x10de>
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <USB_EPStartXfer+0x1076>
 8004778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477c:	3301      	adds	r3, #1
 800477e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29a      	uxth	r2, r3
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478e:	b29b      	uxth	r3, r3
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	b29b      	uxth	r3, r3
 8004794:	4313      	orrs	r3, r2
 8004796:	b29a      	uxth	r2, r3
 8004798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800479c:	801a      	strh	r2, [r3, #0]
 800479e:	e024      	b.n	80047ea <USB_EPStartXfer+0x10de>
 80047a0:	463b      	mov	r3, r7
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d11f      	bne.n	80047ea <USB_EPStartXfer+0x10de>
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c2:	4413      	add	r3, r2
 80047c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047c8:	463b      	mov	r3, r7
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	011a      	lsls	r2, r3, #4
 80047d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047d4:	4413      	add	r3, r2
 80047d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047f2:	463b      	mov	r3, r7
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d17b      	bne.n	80048f4 <USB_EPStartXfer+0x11e8>
 80047fc:	1d3b      	adds	r3, r7, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004814:	4413      	add	r3, r2
 8004816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800481a:	463b      	mov	r3, r7
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	011a      	lsls	r2, r3, #4
 8004822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004826:	4413      	add	r3, r2
 8004828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800482c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483c:	b29a      	uxth	r2, r3
 800483e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004848:	2b3e      	cmp	r3, #62	; 0x3e
 800484a:	d923      	bls.n	8004894 <USB_EPStartXfer+0x1188>
 800484c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <USB_EPStartXfer+0x1160>
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004866:	3b01      	subs	r3, #1
 8004868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29a      	uxth	r2, r3
 8004874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004878:	b29b      	uxth	r3, r3
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	b29b      	uxth	r3, r3
 800487e:	4313      	orrs	r3, r2
 8004880:	b29b      	uxth	r3, r3
 8004882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488a:	b29a      	uxth	r2, r3
 800488c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e053      	b.n	800493c <USB_EPStartXfer+0x1230>
 8004894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10c      	bne.n	80048b6 <USB_EPStartXfer+0x11aa>
 800489c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	e042      	b.n	800493c <USB_EPStartXfer+0x1230>
 80048b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <USB_EPStartXfer+0x11ca>
 80048cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d0:	3301      	adds	r3, #1
 80048d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	029b      	lsls	r3, r3, #10
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e023      	b.n	800493c <USB_EPStartXfer+0x1230>
 80048f4:	463b      	mov	r3, r7
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d11e      	bne.n	800493c <USB_EPStartXfer+0x1230>
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800490e:	4413      	add	r3, r2
 8004910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004914:	463b      	mov	r3, r7
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	011a      	lsls	r2, r3, #4
 800491c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004920:	4413      	add	r3, r2
 8004922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492e:	b29a      	uxth	r2, r3
 8004930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	e001      	b.n	800493c <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e02e      	b.n	800499a <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	463b      	mov	r3, r7
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800495a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800495e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004962:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004966:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800496a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800496e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004972:	1d3b      	adds	r3, r7, #4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	463b      	mov	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	441a      	add	r2, r3
 8004980:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d020      	beq.n	80049f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049cc:	81bb      	strh	r3, [r7, #12]
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	f083 0310 	eor.w	r3, r3, #16
 80049d4:	81bb      	strh	r3, [r7, #12]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	89bb      	ldrh	r3, [r7, #12]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e01f      	b.n	8004a38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	81fb      	strh	r3, [r7, #14]
 8004a10:	89fb      	ldrh	r3, [r7, #14]
 8004a12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a16:	81fb      	strh	r3, [r7, #14]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	89fb      	ldrh	r3, [r7, #14]
 8004a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	7b1b      	ldrb	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 809d 	bne.w	8004b92 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d04c      	beq.n	8004afa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	823b      	strh	r3, [r7, #16]
 8004a6e:	8a3b      	ldrh	r3, [r7, #16]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <USB_EPClearStall+0x6c>
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	81fb      	strh	r3, [r7, #14]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	89fb      	ldrh	r3, [r7, #14]
 8004a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	78db      	ldrb	r3, [r3, #3]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d06c      	beq.n	8004b92 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ace:	81bb      	strh	r3, [r7, #12]
 8004ad0:	89bb      	ldrh	r3, [r7, #12]
 8004ad2:	f083 0320 	eor.w	r3, r3, #32
 8004ad6:	81bb      	strh	r3, [r7, #12]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	89bb      	ldrh	r3, [r7, #12]
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
 8004af8:	e04b      	b.n	8004b92 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	82fb      	strh	r3, [r7, #22]
 8004b08:	8afb      	ldrh	r3, [r7, #22]
 8004b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01b      	beq.n	8004b4a <USB_EPClearStall+0x106>
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	82bb      	strh	r3, [r7, #20]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	8abb      	ldrh	r3, [r7, #20]
 8004b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b60:	827b      	strh	r3, [r7, #18]
 8004b62:	8a7b      	ldrh	r3, [r7, #18]
 8004b64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b68:	827b      	strh	r3, [r7, #18]
 8004b6a:	8a7b      	ldrh	r3, [r7, #18]
 8004b6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b70:	827b      	strh	r3, [r7, #18]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8a7b      	ldrh	r3, [r7, #18]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b08b      	sub	sp, #44	; 0x2c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	460b      	mov	r3, r1
 8004c30:	80fb      	strh	r3, [r7, #6]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c36:	88bb      	ldrh	r3, [r7, #4]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	005a      	lsls	r2, r3, #1
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	e01e      	b.n	8004c98 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	b21a      	sxth	r2, r3
 8004c6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	b21b      	sxth	r3, r3
 8004c72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	8a7a      	ldrh	r2, [r7, #18]
 8004c78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	3302      	adds	r3, #2
 8004c84:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	3b01      	subs	r3, #1
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1dd      	bne.n	8004c5a <USB_WritePMA+0x3a>
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	372c      	adds	r7, #44	; 0x2c
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b08b      	sub	sp, #44	; 0x2c
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	460b      	mov	r3, r1
 8004cba:	80fb      	strh	r3, [r7, #6]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004cc0:	88bb      	ldrh	r3, [r7, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	005a      	lsls	r2, r3, #1
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	e01b      	b.n	8004d1c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	3302      	adds	r3, #2
 8004cf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	3302      	adds	r3, #2
 8004d14:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e0      	bne.n	8004ce4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004d22:	88bb      	ldrh	r3, [r7, #4]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	701a      	strb	r2, [r3, #0]
  }
}
 8004d3e:	bf00      	nop
 8004d40:	372c      	adds	r7, #44	; 0x2c
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d54:	2304      	movs	r3, #4
 8004d56:	2203      	movs	r2, #3
 8004d58:	2181      	movs	r1, #129	; 0x81
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 fc83 	bl	8006666 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004d66:	2010      	movs	r0, #16
 8004d68:	f001 fd92 	bl	8006890 <USBD_static_malloc>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e005      	b.n	8004d8e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d88:	2200      	movs	r2, #0
 8004d8a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004da2:	2181      	movs	r1, #129	; 0x81
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 fc84 	bl	80066b2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fd71 	bl	80068a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d045      	beq.n	8004e92 <USBD_HID_Setup+0xba>
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	f040 80d3 	bne.w	8004fb2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	3b02      	subs	r3, #2
 8004e12:	2b09      	cmp	r3, #9
 8004e14:	d835      	bhi.n	8004e82 <USBD_HID_Setup+0xaa>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <USBD_HID_Setup+0x44>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e73 	.word	0x08004e73
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e83 	.word	0x08004e83
 8004e28:	08004e83 	.word	0x08004e83
 8004e2c:	08004e83 	.word	0x08004e83
 8004e30:	08004e83 	.word	0x08004e83
 8004e34:	08004e83 	.word	0x08004e83
 8004e38:	08004e83 	.word	0x08004e83
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e45 	.word	0x08004e45
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	885b      	ldrh	r3, [r3, #2]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	601a      	str	r2, [r3, #0]
          break;
 8004e50:	e01e      	b.n	8004e90 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2201      	movs	r2, #1
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 f944 	bl	80060e6 <USBD_CtlSendData>
          break;
 8004e5e:	e017      	b.n	8004e90 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	885b      	ldrh	r3, [r3, #2]
 8004e64:	0a1b      	lsrs	r3, r3, #8
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]
          break;
 8004e70:	e00e      	b.n	8004e90 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3304      	adds	r3, #4
 8004e76:	2201      	movs	r2, #1
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 f933 	bl	80060e6 <USBD_CtlSendData>
          break;
 8004e80:	e006      	b.n	8004e90 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f001 f8c4 	bl	8006012 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e8e:	bf00      	nop
      }
      break;
 8004e90:	e096      	b.n	8004fc0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b0b      	cmp	r3, #11
 8004e98:	f200 8083 	bhi.w	8004fa2 <USBD_HID_Setup+0x1ca>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <USBD_HID_Setup+0xcc>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ed5 	.word	0x08004ed5
 8004ea8:	08004fa3 	.word	0x08004fa3
 8004eac:	08004fa3 	.word	0x08004fa3
 8004eb0:	08004fa3 	.word	0x08004fa3
 8004eb4:	08004fa3 	.word	0x08004fa3
 8004eb8:	08004fa3 	.word	0x08004fa3
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004fa3 	.word	0x08004fa3
 8004ec4:	08004fa3 	.word	0x08004fa3
 8004ec8:	08004fa3 	.word	0x08004fa3
 8004ecc:	08004f55 	.word	0x08004f55
 8004ed0:	08004f7d 	.word	0x08004f7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d107      	bne.n	8004eee <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004ede:	f107 030e 	add.w	r3, r7, #14
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 f8fd 	bl	80060e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004eec:	e060      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 f88e 	bl	8006012 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8004efa:	e059      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	885b      	ldrh	r3, [r3, #2]
 8004f00:	0a1b      	lsrs	r3, r3, #8
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b22      	cmp	r3, #34	; 0x22
 8004f06:	d108      	bne.n	8004f1a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	88db      	ldrh	r3, [r3, #6]
 8004f0c:	2b3f      	cmp	r3, #63	; 0x3f
 8004f0e:	bf28      	it	cs
 8004f10:	233f      	movcs	r3, #63	; 0x3f
 8004f12:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <USBD_HID_Setup+0x1f4>)
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e015      	b.n	8004f46 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	885b      	ldrh	r3, [r3, #2]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b21      	cmp	r3, #33	; 0x21
 8004f24:	d108      	bne.n	8004f38 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8004f26:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <USBD_HID_Setup+0x1f8>)
 8004f28:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	88db      	ldrh	r3, [r3, #6]
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	bf28      	it	cs
 8004f32:	2309      	movcs	r3, #9
 8004f34:	83fb      	strh	r3, [r7, #30]
 8004f36:	e006      	b.n	8004f46 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 f869 	bl	8006012 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f40:	2302      	movs	r3, #2
 8004f42:	75fb      	strb	r3, [r7, #23]
            break;
 8004f44:	e034      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8004f46:	8bfb      	ldrh	r3, [r7, #30]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	69b9      	ldr	r1, [r7, #24]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 f8ca 	bl	80060e6 <USBD_CtlSendData>
          break;
 8004f52:	e02d      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d107      	bne.n	8004f6e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3308      	adds	r3, #8
 8004f62:	2201      	movs	r2, #1
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 f8bd 	bl	80060e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f6c:	e020      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 f84e 	bl	8006012 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f76:	2302      	movs	r3, #2
 8004f78:	75fb      	strb	r3, [r7, #23]
          break;
 8004f7a:	e019      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d106      	bne.n	8004f94 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	885b      	ldrh	r3, [r3, #2]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f92:	e00d      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 f83b 	bl	8006012 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa0:	e006      	b.n	8004fb0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 f834 	bl	8006012 <USBD_CtlError>
          ret = USBD_FAIL;
 8004faa:	2302      	movs	r3, #2
 8004fac:	75fb      	strb	r3, [r7, #23]
          break;
 8004fae:	bf00      	nop
      }
      break;
 8004fb0:	e006      	b.n	8004fc0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 f82c 	bl	8006012 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbe:	bf00      	nop
  }

  return ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200000c8 	.word	0x200000c8
 8004fd0:	200000b0 	.word	0x200000b0

08004fd4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d10c      	bne.n	800500e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	7b1b      	ldrb	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d108      	bne.n	800500e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2201      	movs	r2, #1
 8005000:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	2181      	movs	r1, #129	; 0x81
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f001 fbfa 	bl	8006802 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2222      	movs	r2, #34	; 0x22
 8005024:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005026:	4b03      	ldr	r3, [pc, #12]	; (8005034 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000044 	.word	0x20000044

08005038 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2222      	movs	r2, #34	; 0x22
 8005044:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000068 	.word	0x20000068

08005058 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2222      	movs	r2, #34	; 0x22
 8005064:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	2000008c 	.word	0x2000008c

08005078 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800508a:	2200      	movs	r2, #0
 800508c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
	...

0800509c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	220a      	movs	r2, #10
 80050a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80050aa:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	200000bc 	.word	0x200000bc

080050bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050d0:	2302      	movs	r3, #2
 80050d2:	e01a      	b.n	800510a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	79fa      	ldrb	r2, [r7, #7]
 8005100:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f001 fa4c 	bl	80065a0 <USBD_LL_Init>

  return USBD_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
 8005132:	e001      	b.n	8005138 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005134:	2302      	movs	r3, #2
 8005136:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f001 fa6f 	bl	8006630 <USBD_LL_Start>

  return USBD_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800517c:	2302      	movs	r3, #2
 800517e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	4611      	mov	r1, r2
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	4611      	mov	r1, r2
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3

  return USBD_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fed7 	bl	8005f9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2b02      	cmp	r3, #2
 800520e:	d016      	beq.n	800523e <USBD_LL_SetupStage+0x6a>
 8005210:	2b02      	cmp	r3, #2
 8005212:	d81c      	bhi.n	800524e <USBD_LL_SetupStage+0x7a>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <USBD_LL_SetupStage+0x4a>
 8005218:	2b01      	cmp	r3, #1
 800521a:	d008      	beq.n	800522e <USBD_LL_SetupStage+0x5a>
 800521c:	e017      	b.n	800524e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9ca 	bl	80055c0 <USBD_StdDevReq>
      break;
 800522c:	e01a      	b.n	8005264 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa2c 	bl	8005694 <USBD_StdItfReq>
      break;
 800523c:	e012      	b.n	8005264 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa6c 	bl	8005724 <USBD_StdEPReq>
      break;
 800524c:	e00a      	b.n	8005264 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005254:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005258:	b2db      	uxtb	r3, r3
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fa47 	bl	80066f0 <USBD_LL_StallEP>
      break;
 8005262:	bf00      	nop
  }

  return USBD_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	460b      	mov	r3, r1
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d14b      	bne.n	800531a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005288:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005290:	2b03      	cmp	r3, #3
 8005292:	d134      	bne.n	80052fe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	429a      	cmp	r2, r3
 800529e:	d919      	bls.n	80052d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	1ad2      	subs	r2, r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d203      	bcs.n	80052c2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80052be:	b29b      	uxth	r3, r3
 80052c0:	e002      	b.n	80052c8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 ff38 	bl	8006142 <USBD_CtlContinueRx>
 80052d2:	e038      	b.n	8005346 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d105      	bne.n	80052f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 ff35 	bl	8006166 <USBD_CtlSendStatus>
 80052fc:	e023      	b.n	8005346 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005304:	2b05      	cmp	r3, #5
 8005306:	d11e      	bne.n	8005346 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005310:	2100      	movs	r1, #0
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f001 f9ec 	bl	80066f0 <USBD_LL_StallEP>
 8005318:	e015      	b.n	8005346 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800532c:	2b03      	cmp	r3, #3
 800532e:	d108      	bne.n	8005342 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	7afa      	ldrb	r2, [r7, #11]
 800533a:	4611      	mov	r1, r2
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	4798      	blx	r3
 8005340:	e001      	b.n	8005346 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005342:	2302      	movs	r3, #2
 8005344:	e000      	b.n	8005348 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	460b      	mov	r3, r1
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800535e:	7afb      	ldrb	r3, [r7, #11]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d17f      	bne.n	8005464 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3314      	adds	r3, #20
 8005368:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005370:	2b02      	cmp	r3, #2
 8005372:	d15c      	bne.n	800542e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	429a      	cmp	r2, r3
 800537e:	d915      	bls.n	80053ac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fec0 	bl	800611e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800539e:	2300      	movs	r3, #0
 80053a0:	2200      	movs	r2, #0
 80053a2:	2100      	movs	r1, #0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f001 fa4f 	bl	8006848 <USBD_LL_PrepareReceive>
 80053aa:	e04e      	b.n	800544a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	6912      	ldr	r2, [r2, #16]
 80053b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80053b8:	fb02 f201 	mul.w	r2, r2, r1
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11c      	bne.n	80053fc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d316      	bcc.n	80053fc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053d8:	429a      	cmp	r2, r3
 80053da:	d20f      	bcs.n	80053fc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fe9c 	bl	800611e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053ee:	2300      	movs	r3, #0
 80053f0:	2200      	movs	r2, #0
 80053f2:	2100      	movs	r1, #0
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f001 fa27 	bl	8006848 <USBD_LL_PrepareReceive>
 80053fa:	e026      	b.n	800544a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800540e:	2b03      	cmp	r3, #3
 8005410:	d105      	bne.n	800541e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f001 f965 	bl	80066f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 feb0 	bl	800618c <USBD_CtlReceiveStatus>
 800542c:	e00d      	b.n	800544a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005434:	2b04      	cmp	r3, #4
 8005436:	d004      	beq.n	8005442 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005442:	2180      	movs	r1, #128	; 0x80
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f001 f953 	bl	80066f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d11d      	bne.n	8005490 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff fe81 	bl	800515c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005462:	e015      	b.n	8005490 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005476:	2b03      	cmp	r3, #3
 8005478:	d108      	bne.n	800548c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	7afa      	ldrb	r2, [r7, #11]
 8005484:	4611      	mov	r1, r2
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	4798      	blx	r3
 800548a:	e001      	b.n	8005490 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800548c:	2302      	movs	r3, #2
 800548e:	e000      	b.n	8005492 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054a2:	2340      	movs	r3, #64	; 0x40
 80054a4:	2200      	movs	r2, #0
 80054a6:	2100      	movs	r1, #0
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 f8dc 	bl	8006666 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2240      	movs	r2, #64	; 0x40
 80054ba:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	2200      	movs	r2, #0
 80054c2:	2180      	movs	r1, #128	; 0x80
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f8ce 	bl	8006666 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2240      	movs	r2, #64	; 0x40
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6852      	ldr	r2, [r2, #4]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	4611      	mov	r1, r2
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4798      	blx	r3
  }

  return USBD_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr

08005562 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005570:	2b04      	cmp	r3, #4
 8005572:	d105      	bne.n	8005580 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559a:	2b03      	cmp	r3, #3
 800559c:	d10b      	bne.n	80055b6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d005      	beq.n	80055e6 <USBD_StdDevReq+0x26>
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d84f      	bhi.n	800567e <USBD_StdDevReq+0xbe>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <USBD_StdDevReq+0x36>
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d14b      	bne.n	800567e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
      break;
 80055f4:	e048      	b.n	8005688 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b09      	cmp	r3, #9
 80055fc:	d839      	bhi.n	8005672 <USBD_StdDevReq+0xb2>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <USBD_StdDevReq+0x44>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005655 	.word	0x08005655
 8005608:	08005669 	.word	0x08005669
 800560c:	08005673 	.word	0x08005673
 8005610:	0800565f 	.word	0x0800565f
 8005614:	08005673 	.word	0x08005673
 8005618:	08005637 	.word	0x08005637
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005673 	.word	0x08005673
 8005624:	0800564b 	.word	0x0800564b
 8005628:	08005641 	.word	0x08005641
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9dc 	bl	80059ec <USBD_GetDescriptor>
          break;
 8005634:	e022      	b.n	800567c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fb3f 	bl	8005cbc <USBD_SetAddress>
          break;
 800563e:	e01d      	b.n	800567c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fb7e 	bl	8005d44 <USBD_SetConfig>
          break;
 8005648:	e018      	b.n	800567c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fc07 	bl	8005e60 <USBD_GetConfig>
          break;
 8005652:	e013      	b.n	800567c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fc37 	bl	8005eca <USBD_GetStatus>
          break;
 800565c:	e00e      	b.n	800567c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fc65 	bl	8005f30 <USBD_SetFeature>
          break;
 8005666:	e009      	b.n	800567c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fc74 	bl	8005f58 <USBD_ClrFeature>
          break;
 8005670:	e004      	b.n	800567c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fccc 	bl	8006012 <USBD_CtlError>
          break;
 800567a:	bf00      	nop
      }
      break;
 800567c:	e004      	b.n	8005688 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fcc6 	bl	8006012 <USBD_CtlError>
      break;
 8005686:	bf00      	nop
  }

  return ret;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop

08005694 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d005      	beq.n	80056ba <USBD_StdItfReq+0x26>
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d82e      	bhi.n	8005710 <USBD_StdItfReq+0x7c>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <USBD_StdItfReq+0x26>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d12a      	bne.n	8005710 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c0:	3b01      	subs	r3, #1
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d81d      	bhi.n	8005702 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	889b      	ldrh	r3, [r3, #4]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d813      	bhi.n	80056f8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	88db      	ldrh	r3, [r3, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d110      	bne.n	800570c <USBD_StdItfReq+0x78>
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fd38 	bl	8006166 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056f6:	e009      	b.n	800570c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fc89 	bl	8006012 <USBD_CtlError>
          break;
 8005700:	e004      	b.n	800570c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fc84 	bl	8006012 <USBD_CtlError>
          break;
 800570a:	e000      	b.n	800570e <USBD_StdItfReq+0x7a>
          break;
 800570c:	bf00      	nop
      }
      break;
 800570e:	e004      	b.n	800571a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fc7d 	bl	8006012 <USBD_CtlError>
      break;
 8005718:	bf00      	nop
  }

  return USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	889b      	ldrh	r3, [r3, #4]
 8005736:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d007      	beq.n	8005754 <USBD_StdEPReq+0x30>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	f200 8146 	bhi.w	80059d6 <USBD_StdEPReq+0x2b2>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <USBD_StdEPReq+0x40>
 800574e:	2b20      	cmp	r3, #32
 8005750:	f040 8141 	bne.w	80059d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4798      	blx	r3
      break;
 8005762:	e13d      	b.n	80059e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800576c:	2b20      	cmp	r3, #32
 800576e:	d10a      	bne.n	8005786 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
 800577e:	4603      	mov	r3, r0
 8005780:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	e12d      	b.n	80059e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d007      	beq.n	800579e <USBD_StdEPReq+0x7a>
 800578e:	2b03      	cmp	r3, #3
 8005790:	f300 811b 	bgt.w	80059ca <USBD_StdEPReq+0x2a6>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d072      	beq.n	800587e <USBD_StdEPReq+0x15a>
 8005798:	2b01      	cmp	r3, #1
 800579a:	d03a      	beq.n	8005812 <USBD_StdEPReq+0xee>
 800579c:	e115      	b.n	80059ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d002      	beq.n	80057ae <USBD_StdEPReq+0x8a>
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d015      	beq.n	80057d8 <USBD_StdEPReq+0xb4>
 80057ac:	e02b      	b.n	8005806 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057ae:	7bbb      	ldrb	r3, [r7, #14]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <USBD_StdEPReq+0xaa>
 80057b4:	7bbb      	ldrb	r3, [r7, #14]
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d009      	beq.n	80057ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 ff96 	bl	80066f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff92 	bl	80066f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057cc:	e020      	b.n	8005810 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fc1e 	bl	8006012 <USBD_CtlError>
              break;
 80057d6:	e01b      	b.n	8005810 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	885b      	ldrh	r3, [r3, #2]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10e      	bne.n	80057fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80057e0:	7bbb      	ldrb	r3, [r7, #14]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <USBD_StdEPReq+0xda>
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d008      	beq.n	80057fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	88db      	ldrh	r3, [r3, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 ff79 	bl	80066f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fcb1 	bl	8006166 <USBD_CtlSendStatus>

              break;
 8005804:	e004      	b.n	8005810 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fc02 	bl	8006012 <USBD_CtlError>
              break;
 800580e:	bf00      	nop
          }
          break;
 8005810:	e0e0      	b.n	80059d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005818:	2b02      	cmp	r3, #2
 800581a:	d002      	beq.n	8005822 <USBD_StdEPReq+0xfe>
 800581c:	2b03      	cmp	r3, #3
 800581e:	d015      	beq.n	800584c <USBD_StdEPReq+0x128>
 8005820:	e026      	b.n	8005870 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <USBD_StdEPReq+0x11e>
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d009      	beq.n	8005842 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 ff5c 	bl	80066f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 ff58 	bl	80066f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005840:	e01c      	b.n	800587c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fbe4 	bl	8006012 <USBD_CtlError>
              break;
 800584a:	e017      	b.n	800587c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	885b      	ldrh	r3, [r3, #2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d112      	bne.n	800587a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 ff63 	bl	800672e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fc7c 	bl	8006166 <USBD_CtlSendStatus>
              }
              break;
 800586e:	e004      	b.n	800587a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fbcd 	bl	8006012 <USBD_CtlError>
              break;
 8005878:	e000      	b.n	800587c <USBD_StdEPReq+0x158>
              break;
 800587a:	bf00      	nop
          }
          break;
 800587c:	e0aa      	b.n	80059d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005884:	2b02      	cmp	r3, #2
 8005886:	d002      	beq.n	800588e <USBD_StdEPReq+0x16a>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d032      	beq.n	80058f2 <USBD_StdEPReq+0x1ce>
 800588c:	e097      	b.n	80059be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <USBD_StdEPReq+0x180>
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d004      	beq.n	80058a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fbb8 	bl	8006012 <USBD_CtlError>
                break;
 80058a2:	e091      	b.n	80059c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da0b      	bge.n	80058c4 <USBD_StdEPReq+0x1a0>
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	3310      	adds	r3, #16
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	3304      	adds	r3, #4
 80058c2:	e00b      	b.n	80058dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	3304      	adds	r3, #4
 80058dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2202      	movs	r2, #2
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fbfb 	bl	80060e6 <USBD_CtlSendData>
              break;
 80058f0:	e06a      	b.n	80059c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da11      	bge.n	800591e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3318      	adds	r3, #24
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d117      	bne.n	8005944 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb7b 	bl	8006012 <USBD_CtlError>
                  break;
 800591c:	e054      	b.n	80059c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	f003 020f 	and.w	r2, r3, #15
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fb68 	bl	8006012 <USBD_CtlError>
                  break;
 8005942:	e041      	b.n	80059c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005948:	2b00      	cmp	r3, #0
 800594a:	da0b      	bge.n	8005964 <USBD_StdEPReq+0x240>
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	3310      	adds	r3, #16
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	3304      	adds	r3, #4
 8005962:	e00b      	b.n	800597c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	3304      	adds	r3, #4
 800597c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <USBD_StdEPReq+0x266>
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d103      	bne.n	8005992 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e00e      	b.n	80059b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fee8 	bl	800676c <USBD_LL_IsStallEP>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2202      	movs	r2, #2
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fb95 	bl	80060e6 <USBD_CtlSendData>
              break;
 80059bc:	e004      	b.n	80059c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fb26 	bl	8006012 <USBD_CtlError>
              break;
 80059c6:	bf00      	nop
          }
          break;
 80059c8:	e004      	b.n	80059d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb20 	bl	8006012 <USBD_CtlError>
          break;
 80059d2:	bf00      	nop
      }
      break;
 80059d4:	e004      	b.n	80059e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb1a 	bl	8006012 <USBD_CtlError>
      break;
 80059de:	bf00      	nop
  }

  return ret;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	885b      	ldrh	r3, [r3, #2]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	f200 8128 	bhi.w	8005c62 <USBD_GetDescriptor+0x276>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USBD_GetDescriptor+0x2c>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005c63 	.word	0x08005c63
 8005a28:	08005c63 	.word	0x08005c63
 8005a2c:	08005c03 	.word	0x08005c03
 8005a30:	08005c2f 	.word	0x08005c2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	7c12      	ldrb	r2, [r2, #16]
 8005a40:	f107 0108 	add.w	r1, r7, #8
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	60f8      	str	r0, [r7, #12]
      break;
 8005a4a:	e112      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7c1b      	ldrb	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f107 0208 	add.w	r2, r7, #8
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
 8005a64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a6e:	e100      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f107 0208 	add.w	r2, r7, #8
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	2202      	movs	r2, #2
 8005a88:	701a      	strb	r2, [r3, #0]
      break;
 8005a8a:	e0f2      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	f200 80ac 	bhi.w	8005bf0 <USBD_GetDescriptor+0x204>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <USBD_GetDescriptor+0xb4>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005b21 	.word	0x08005b21
 8005aac:	08005b55 	.word	0x08005b55
 8005ab0:	08005b89 	.word	0x08005b89
 8005ab4:	08005bbd 	.word	0x08005bbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	7c12      	ldrb	r2, [r2, #16]
 8005ad0:	f107 0108 	add.w	r1, r7, #8
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ada:	e091      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa97 	bl	8006012 <USBD_CtlError>
            err++;
 8005ae4:	7afb      	ldrb	r3, [r7, #11]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aea:	e089      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7c12      	ldrb	r2, [r2, #16]
 8005b04:	f107 0108 	add.w	r1, r7, #8
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b0e:	e077      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa7d 	bl	8006012 <USBD_CtlError>
            err++;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b1e:	e06f      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7c12      	ldrb	r2, [r2, #16]
 8005b38:	f107 0108 	add.w	r1, r7, #8
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b42:	e05d      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa63 	bl	8006012 <USBD_CtlError>
            err++;
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	72fb      	strb	r3, [r7, #11]
          break;
 8005b52:	e055      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	7c12      	ldrb	r2, [r2, #16]
 8005b6c:	f107 0108 	add.w	r1, r7, #8
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b76:	e043      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa49 	bl	8006012 <USBD_CtlError>
            err++;
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	3301      	adds	r3, #1
 8005b84:	72fb      	strb	r3, [r7, #11]
          break;
 8005b86:	e03b      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	7c12      	ldrb	r2, [r2, #16]
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005baa:	e029      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa2f 	bl	8006012 <USBD_CtlError>
            err++;
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bba:	e021      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	7c12      	ldrb	r2, [r2, #16]
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4798      	blx	r3
 8005bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bde:	e00f      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa15 	bl	8006012 <USBD_CtlError>
            err++;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	3301      	adds	r3, #1
 8005bec:	72fb      	strb	r3, [r7, #11]
          break;
 8005bee:	e007      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa0d 	bl	8006012 <USBD_CtlError>
          err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005bfe:	e038      	b.n	8005c72 <USBD_GetDescriptor+0x286>
 8005c00:	e037      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7c1b      	ldrb	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	f107 0208 	add.w	r2, r7, #8
 8005c16:	4610      	mov	r0, r2
 8005c18:	4798      	blx	r3
 8005c1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c1c:	e029      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9f6 	bl	8006012 <USBD_CtlError>
        err++;
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c2c:	e021      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7c1b      	ldrb	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f107 0208 	add.w	r2, r7, #8
 8005c42:	4610      	mov	r0, r2
 8005c44:	4798      	blx	r3
 8005c46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	2207      	movs	r2, #7
 8005c4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c50:	e00f      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f9dc 	bl	8006012 <USBD_CtlError>
        err++;
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c60:	e007      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9d4 	bl	8006012 <USBD_CtlError>
      err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	bf00      	nop
  }

  if (err != 0U)
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11c      	bne.n	8005cb2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c78:	893b      	ldrh	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <USBD_GetDescriptor+0x2b6>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	88da      	ldrh	r2, [r3, #6]
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa22 	bl	80060e6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	88db      	ldrh	r3, [r3, #6]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa5b 	bl	8006166 <USBD_CtlSendStatus>
 8005cb0:	e000      	b.n	8005cb4 <USBD_GetDescriptor+0x2c8>
    return;
 8005cb2:	bf00      	nop
    }
  }
}
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop

08005cbc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	889b      	ldrh	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d130      	bne.n	8005d30 <USBD_SetAddress+0x74>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	88db      	ldrh	r3, [r3, #6]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d12c      	bne.n	8005d30 <USBD_SetAddress+0x74>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	885b      	ldrh	r3, [r3, #2]
 8005cda:	2b7f      	cmp	r3, #127	; 0x7f
 8005cdc:	d828      	bhi.n	8005d30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d104      	bne.n	8005cfe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f98b 	bl	8006012 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfc:	e01d      	b.n	8005d3a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	7bfa      	ldrb	r2, [r7, #15]
 8005d02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fd5a 	bl	80067c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa28 	bl	8006166 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d24:	e009      	b.n	8005d3a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2e:	e004      	b.n	8005d3a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f96d 	bl	8006012 <USBD_CtlError>
  }
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	885b      	ldrh	r3, [r3, #2]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <USBD_SetConfig+0x118>)
 8005d56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d58:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <USBD_SetConfig+0x118>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d904      	bls.n	8005d6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f955 	bl	8006012 <USBD_CtlError>
 8005d68:	e075      	b.n	8005e56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d002      	beq.n	8005d7a <USBD_SetConfig+0x36>
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d023      	beq.n	8005dc0 <USBD_SetConfig+0x7c>
 8005d78:	e062      	b.n	8005e40 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d7a:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <USBD_SetConfig+0x118>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01a      	beq.n	8005db8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d82:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <USBD_SetConfig+0x118>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2203      	movs	r2, #3
 8005d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <USBD_SetConfig+0x118>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff f9e8 	bl	8005170 <USBD_SetClassConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d104      	bne.n	8005db0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f932 	bl	8006012 <USBD_CtlError>
            return;
 8005dae:	e052      	b.n	8005e56 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f9d8 	bl	8006166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005db6:	e04e      	b.n	8005e56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9d4 	bl	8006166 <USBD_CtlSendStatus>
        break;
 8005dbe:	e04a      	b.n	8005e56 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005dc0:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <USBD_SetConfig+0x118>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d112      	bne.n	8005dee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005dd0:	4b22      	ldr	r3, [pc, #136]	; (8005e5c <USBD_SetConfig+0x118>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005dda:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <USBD_SetConfig+0x118>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff f9e4 	bl	80051ae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9bd 	bl	8006166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dec:	e033      	b.n	8005e56 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <USBD_SetConfig+0x118>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d01d      	beq.n	8005e38 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff f9d2 	bl	80051ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e0a:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <USBD_SetConfig+0x118>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <USBD_SetConfig+0x118>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff f9a8 	bl	8005170 <USBD_SetClassConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d104      	bne.n	8005e30 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f8f2 	bl	8006012 <USBD_CtlError>
            return;
 8005e2e:	e012      	b.n	8005e56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f998 	bl	8006166 <USBD_CtlSendStatus>
        break;
 8005e36:	e00e      	b.n	8005e56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f994 	bl	8006166 <USBD_CtlSendStatus>
        break;
 8005e3e:	e00a      	b.n	8005e56 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8e5 	bl	8006012 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <USBD_SetConfig+0x118>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff f9ad 	bl	80051ae <USBD_ClrClassConfig>
        break;
 8005e54:	bf00      	nop
    }
  }
}
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	2000017c 	.word	0x2000017c

08005e60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	88db      	ldrh	r3, [r3, #6]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d004      	beq.n	8005e7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f8cc 	bl	8006012 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e7a:	e022      	b.n	8005ec2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	dc02      	bgt.n	8005e8c <USBD_GetConfig+0x2c>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	dc03      	bgt.n	8005e92 <USBD_GetConfig+0x32>
 8005e8a:	e015      	b.n	8005eb8 <USBD_GetConfig+0x58>
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d00b      	beq.n	8005ea8 <USBD_GetConfig+0x48>
 8005e90:	e012      	b.n	8005eb8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f920 	bl	80060e6 <USBD_CtlSendData>
        break;
 8005ea6:	e00c      	b.n	8005ec2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	2201      	movs	r2, #1
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f918 	bl	80060e6 <USBD_CtlSendData>
        break;
 8005eb6:	e004      	b.n	8005ec2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8a9 	bl	8006012 <USBD_CtlError>
        break;
 8005ec0:	bf00      	nop
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eda:	3b01      	subs	r3, #1
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d81e      	bhi.n	8005f1e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	88db      	ldrh	r3, [r3, #6]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d004      	beq.n	8005ef2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f891 	bl	8006012 <USBD_CtlError>
        break;
 8005ef0:	e01a      	b.n	8005f28 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f043 0202 	orr.w	r2, r3, #2
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	330c      	adds	r3, #12
 8005f12:	2202      	movs	r2, #2
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8e5 	bl	80060e6 <USBD_CtlSendData>
      break;
 8005f1c:	e004      	b.n	8005f28 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f876 	bl	8006012 <USBD_CtlError>
      break;
 8005f26:	bf00      	nop
  }
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	885b      	ldrh	r3, [r3, #2]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d106      	bne.n	8005f50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f90b 	bl	8006166 <USBD_CtlSendStatus>
  }
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d80b      	bhi.n	8005f86 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10c      	bne.n	8005f90 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8f1 	bl	8006166 <USBD_CtlSendStatus>
      }
      break;
 8005f84:	e004      	b.n	8005f90 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f842 	bl	8006012 <USBD_CtlError>
      break;
 8005f8e:	e000      	b.n	8005f92 <USBD_ClrFeature+0x3a>
      break;
 8005f90:	bf00      	nop
  }
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781a      	ldrb	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	785a      	ldrb	r2, [r3, #1]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	3303      	adds	r3, #3
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3305      	adds	r3, #5
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	021b      	lsls	r3, r3, #8
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	3306      	adds	r3, #6
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3307      	adds	r3, #7
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4413      	add	r3, r2
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	80da      	strh	r2, [r3, #6]

}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr

08006012 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fb66 	bl	80066f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fb62 	bl	80066f0 <USBD_LL_StallEP>
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d032      	beq.n	80060b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f834 	bl	80060b8 <USBD_GetLen>
 8006050:	4603      	mov	r3, r0
 8006052:	3301      	adds	r3, #1
 8006054:	b29b      	uxth	r3, r3
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	75fa      	strb	r2, [r7, #23]
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4413      	add	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	75fa      	strb	r2, [r7, #23]
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4413      	add	r3, r2
 800607c:	2203      	movs	r2, #3
 800607e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006080:	e012      	b.n	80060a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	60fa      	str	r2, [r7, #12]
 8006088:	7dfa      	ldrb	r2, [r7, #23]
 800608a:	1c51      	adds	r1, r2, #1
 800608c:	75f9      	strb	r1, [r7, #23]
 800608e:	4611      	mov	r1, r2
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	440a      	add	r2, r1
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	75fa      	strb	r2, [r7, #23]
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4413      	add	r3, r2
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e8      	bne.n	8006082 <USBD_GetString+0x4e>
    }
  }
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80060c4:	e005      	b.n	80060d2 <USBD_GetLen+0x1a>
  {
    len++;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	3301      	adds	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3301      	adds	r3, #1
 80060d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f5      	bne.n	80060c6 <USBD_GetLen+0xe>
  }

  return len;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	4613      	mov	r3, r2
 80060f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	2100      	movs	r1, #0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fb77 	bl	8006802 <USBD_LL_Transmit>

  return USBD_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	4613      	mov	r3, r2
 800612a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	2100      	movs	r1, #0
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fb65 	bl	8006802 <USBD_LL_Transmit>

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	2100      	movs	r1, #0
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fb76 	bl	8006848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2204      	movs	r2, #4
 8006172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006176:	2300      	movs	r3, #0
 8006178:	2200      	movs	r2, #0
 800617a:	2100      	movs	r1, #0
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fb40 	bl	8006802 <USBD_LL_Transmit>

  return USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2205      	movs	r2, #5
 8006198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800619c:	2300      	movs	r3, #0
 800619e:	2200      	movs	r2, #0
 80061a0:	2100      	movs	r1, #0
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fb50 	bl	8006848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061b8:	2200      	movs	r2, #0
 80061ba:	490e      	ldr	r1, [pc, #56]	; (80061f4 <MX_USB_DEVICE_Init+0x40>)
 80061bc:	480e      	ldr	r0, [pc, #56]	; (80061f8 <MX_USB_DEVICE_Init+0x44>)
 80061be:	f7fe ff7d 	bl	80050bc <USBD_Init>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061c8:	f7fa f874 	bl	80002b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80061cc:	490b      	ldr	r1, [pc, #44]	; (80061fc <MX_USB_DEVICE_Init+0x48>)
 80061ce:	480a      	ldr	r0, [pc, #40]	; (80061f8 <MX_USB_DEVICE_Init+0x44>)
 80061d0:	f7fe ff9f 	bl	8005112 <USBD_RegisterClass>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061da:	f7fa f86b 	bl	80002b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061de:	4806      	ldr	r0, [pc, #24]	; (80061f8 <MX_USB_DEVICE_Init+0x44>)
 80061e0:	f7fe ffb0 	bl	8005144 <USBD_Start>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80061ea:	f7fa f863 	bl	80002b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000108 	.word	0x20000108
 80061f8:	20000198 	.word	0x20000198
 80061fc:	2000000c 	.word	0x2000000c

08006200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2212      	movs	r2, #18
 8006210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006212:	4b03      	ldr	r3, [pc, #12]	; (8006220 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000124 	.word	0x20000124

08006224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2204      	movs	r2, #4
 8006234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000138 	.word	0x20000138

08006248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <USBD_FS_ProductStrDescriptor+0x34>)
 800625e:	4808      	ldr	r0, [pc, #32]	; (8006280 <USBD_FS_ProductStrDescriptor+0x38>)
 8006260:	f7ff fee8 	bl	8006034 <USBD_GetString>
 8006264:	e004      	b.n	8006270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4904      	ldr	r1, [pc, #16]	; (800627c <USBD_FS_ProductStrDescriptor+0x34>)
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <USBD_FS_ProductStrDescriptor+0x38>)
 800626c:	f7ff fee2 	bl	8006034 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006270:	4b02      	ldr	r3, [pc, #8]	; (800627c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	2000045c 	.word	0x2000045c
 8006280:	08006998 	.word	0x08006998

08006284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	4904      	ldr	r1, [pc, #16]	; (80062a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006294:	4804      	ldr	r0, [pc, #16]	; (80062a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006296:	f7ff fecd 	bl	8006034 <USBD_GetString>
  return USBD_StrDesc;
 800629a:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	2000045c 	.word	0x2000045c
 80062a8:	080069b0 	.word	0x080069b0

080062ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	221a      	movs	r2, #26
 80062bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062be:	f000 f843 	bl	8006348 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062c2:	4b02      	ldr	r3, [pc, #8]	; (80062cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2000013c 	.word	0x2000013c

080062d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4907      	ldr	r1, [pc, #28]	; (8006304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062e6:	4808      	ldr	r0, [pc, #32]	; (8006308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80062e8:	f7ff fea4 	bl	8006034 <USBD_GetString>
 80062ec:	e004      	b.n	80062f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	4904      	ldr	r1, [pc, #16]	; (8006304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062f2:	4805      	ldr	r0, [pc, #20]	; (8006308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80062f4:	f7ff fe9e 	bl	8006034 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2000045c 	.word	0x2000045c
 8006308:	080069c4 	.word	0x080069c4

0800630c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	4907      	ldr	r1, [pc, #28]	; (8006340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006322:	4808      	ldr	r0, [pc, #32]	; (8006344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006324:	f7ff fe86 	bl	8006034 <USBD_GetString>
 8006328:	e004      	b.n	8006334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4904      	ldr	r1, [pc, #16]	; (8006340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800632e:	4805      	ldr	r0, [pc, #20]	; (8006344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006330:	f7ff fe80 	bl	8006034 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000045c 	.word	0x2000045c
 8006344:	080069d0 	.word	0x080069d0

08006348 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <Get_SerialNum+0x44>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <Get_SerialNum+0x48>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <Get_SerialNum+0x4c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800636e:	2208      	movs	r2, #8
 8006370:	4909      	ldr	r1, [pc, #36]	; (8006398 <Get_SerialNum+0x50>)
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f814 	bl	80063a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006378:	2204      	movs	r2, #4
 800637a:	4908      	ldr	r1, [pc, #32]	; (800639c <Get_SerialNum+0x54>)
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f000 f80f 	bl	80063a0 <IntToUnicode>
  }
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	1ffff7e8 	.word	0x1ffff7e8
 8006390:	1ffff7ec 	.word	0x1ffff7ec
 8006394:	1ffff7f0 	.word	0x1ffff7f0
 8006398:	2000013e 	.word	0x2000013e
 800639c:	2000014e 	.word	0x2000014e

080063a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]
 80063b6:	e027      	b.n	8006408 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	0f1b      	lsrs	r3, r3, #28
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d80b      	bhi.n	80063d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	0f1b      	lsrs	r3, r3, #28
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4619      	mov	r1, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	440b      	add	r3, r1
 80063d0:	3230      	adds	r2, #48	; 0x30
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e00a      	b.n	80063ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	0f1b      	lsrs	r3, r3, #28
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4619      	mov	r1, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	440b      	add	r3, r1
 80063e8:	3237      	adds	r2, #55	; 0x37
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	3301      	adds	r3, #1
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	3301      	adds	r3, #1
 8006406:	75fb      	strb	r3, [r7, #23]
 8006408:	7dfa      	ldrb	r2, [r7, #23]
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	429a      	cmp	r2, r3
 800640e:	d3d3      	bcc.n	80063b8 <IntToUnicode+0x18>
  }
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a0d      	ldr	r2, [pc, #52]	; (8006460 <HAL_PCD_MspInit+0x44>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d113      	bne.n	8006456 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_PCD_MspInit+0x48>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <HAL_PCD_MspInit+0x48>)
 8006434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006438:	61d3      	str	r3, [r2, #28]
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_PCD_MspInit+0x48>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	2014      	movs	r0, #20
 800644c:	f7fa f925 	bl	800069a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006450:	2014      	movs	r0, #20
 8006452:	f7fa f93e 	bl	80006d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40005c00 	.word	0x40005c00
 8006464:	40021000 	.word	0x40021000

08006468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe fea8 	bl	80051d4 <USBD_LL_SetupStage>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	440b      	add	r3, r1
 80064ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	4619      	mov	r1, r3
 80064b6:	f7fe feda 	bl	800526e <USBD_LL_DataOutStage>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	440b      	add	r3, r1
 80064e2:	333c      	adds	r3, #60	; 0x3c
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	4619      	mov	r1, r3
 80064ea:	f7fe ff31 	bl	8005350 <USBD_LL_DataInStage>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff f841 	bl	800558c <USBD_LL_SOF>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d001      	beq.n	800652a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006526:	f7f9 fec5 	bl	80002b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fff1 	bl	800551c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe ffaa 	bl	800549a <USBD_LL_Reset>
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe ffeb 	bl	800553a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800656c:	4b04      	ldr	r3, [pc, #16]	; (8006580 <HAL_PCD_SuspendCallback+0x30>)
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	4a03      	ldr	r2, [pc, #12]	; (8006580 <HAL_PCD_SuspendCallback+0x30>)
 8006572:	f043 0306 	orr.w	r3, r3, #6
 8006576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	e000ed00 	.word	0xe000ed00

08006584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe ffe5 	bl	8005562 <USBD_LL_Resume>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <USBD_LL_Init+0x88>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <USBD_LL_Init+0x88>)
 80065b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <USBD_LL_Init+0x88>)
 80065ba:	4a1c      	ldr	r2, [pc, #112]	; (800662c <USBD_LL_Init+0x8c>)
 80065bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <USBD_LL_Init+0x88>)
 80065c0:	2208      	movs	r2, #8
 80065c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80065c4:	4b18      	ldr	r3, [pc, #96]	; (8006628 <USBD_LL_Init+0x88>)
 80065c6:	2202      	movs	r2, #2
 80065c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <USBD_LL_Init+0x88>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <USBD_LL_Init+0x88>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <USBD_LL_Init+0x88>)
 80065d8:	2200      	movs	r2, #0
 80065da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80065dc:	4812      	ldr	r0, [pc, #72]	; (8006628 <USBD_LL_Init+0x88>)
 80065de:	f7fa f892 	bl	8000706 <HAL_PCD_Init>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80065e8:	f7f9 fe64 	bl	80002b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065f2:	2318      	movs	r3, #24
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	f7fb fd9c 	bl	8002134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006602:	2358      	movs	r3, #88	; 0x58
 8006604:	2200      	movs	r2, #0
 8006606:	2180      	movs	r1, #128	; 0x80
 8006608:	f7fb fd94 	bl	8002134 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006616:	2200      	movs	r2, #0
 8006618:	2181      	movs	r1, #129	; 0x81
 800661a:	f7fb fd8b 	bl	8002134 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	2000065c 	.word	0x2000065c
 800662c:	40005c00 	.word	0x40005c00

08006630 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006646:	4618      	mov	r0, r3
 8006648:	f7fa f95c 	bl	8000904 <HAL_PCD_Start>
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f93c 	bl	80068d0 <USBD_Get_USB_Status>
 8006658:	4603      	mov	r3, r0
 800665a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800665c:	7bbb      	ldrb	r3, [r7, #14]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	4608      	mov	r0, r1
 8006670:	4611      	mov	r1, r2
 8006672:	461a      	mov	r2, r3
 8006674:	4603      	mov	r3, r0
 8006676:	70fb      	strb	r3, [r7, #3]
 8006678:	460b      	mov	r3, r1
 800667a:	70bb      	strb	r3, [r7, #2]
 800667c:	4613      	mov	r3, r2
 800667e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800668e:	78bb      	ldrb	r3, [r7, #2]
 8006690:	883a      	ldrh	r2, [r7, #0]
 8006692:	78f9      	ldrb	r1, [r7, #3]
 8006694:	f7fa fab3 	bl	8000bfe <HAL_PCD_EP_Open>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 f916 	bl	80068d0 <USBD_Get_USB_Status>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fa faf1 	bl	8000cb8 <HAL_PCD_EP_Close>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f8f7 	bl	80068d0 <USBD_Get_USB_Status>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	4611      	mov	r1, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f7fa fb82 	bl	8000e18 <HAL_PCD_EP_SetStall>
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f8d8 	bl	80068d0 <USBD_Get_USB_Status>
 8006720:	4603      	mov	r3, r0
 8006722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006724:	7bbb      	ldrb	r3, [r7, #14]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f7fa fbc3 	bl	8000ed8 <HAL_PCD_EP_ClrStall>
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 f8b9 	bl	80068d0 <USBD_Get_USB_Status>
 800675e:	4603      	mov	r3, r0
 8006760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006762:	7bbb      	ldrb	r3, [r7, #14]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da0c      	bge.n	80067a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678e:	68f9      	ldr	r1, [r7, #12]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	440b      	add	r3, r1
 800679c:	3302      	adds	r3, #2
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	e00b      	b.n	80067ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067a8:	68f9      	ldr	r1, [r7, #12]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	440b      	add	r3, r1
 80067b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80067b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fa f9e6 	bl	8000bb4 <HAL_PCD_SetAddress>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f86e 	bl	80068d0 <USBD_Get_USB_Status>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	461a      	mov	r2, r3
 800680e:	460b      	mov	r3, r1
 8006810:	72fb      	strb	r3, [r7, #11]
 8006812:	4613      	mov	r3, r2
 8006814:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006824:	893b      	ldrh	r3, [r7, #8]
 8006826:	7af9      	ldrb	r1, [r7, #11]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f7fa fabe 	bl	8000daa <HAL_PCD_EP_Transmit>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 f84b 	bl	80068d0 <USBD_Get_USB_Status>
 800683a:	4603      	mov	r3, r0
 800683c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800683e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	461a      	mov	r2, r3
 8006854:	460b      	mov	r3, r1
 8006856:	72fb      	strb	r3, [r7, #11]
 8006858:	4613      	mov	r3, r2
 800685a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800686a:	893b      	ldrh	r3, [r7, #8]
 800686c:	7af9      	ldrb	r1, [r7, #11]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	f7fa fa6a 	bl	8000d48 <HAL_PCD_EP_Receive>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f828 	bl	80068d0 <USBD_Get_USB_Status>
 8006880:	4603      	mov	r3, r0
 8006882:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006884:	7dbb      	ldrb	r3, [r7, #22]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006898:	4b02      	ldr	r3, [pc, #8]	; (80068a4 <USBD_static_malloc+0x14>)
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr
 80068a4:	20000180 	.word	0x20000180

080068a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d817      	bhi.n	8006914 <USBD_Get_USB_Status+0x44>
 80068e4:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USBD_Get_USB_Status+0x1c>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006903 	.word	0x08006903
 80068f4:	08006909 	.word	0x08006909
 80068f8:	0800690f 	.word	0x0800690f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006900:	e00b      	b.n	800691a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006902:	2302      	movs	r3, #2
 8006904:	73fb      	strb	r3, [r7, #15]
    break;
 8006906:	e008      	b.n	800691a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
    break;
 800690c:	e005      	b.n	800691a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	73fb      	strb	r3, [r7, #15]
    break;
 8006912:	e002      	b.n	800691a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006914:	2302      	movs	r3, #2
 8006916:	73fb      	strb	r3, [r7, #15]
    break;
 8006918:	bf00      	nop
  }
  return usb_status;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop

08006928 <__libc_init_array>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	2600      	movs	r6, #0
 800692c:	4d0c      	ldr	r5, [pc, #48]	; (8006960 <__libc_init_array+0x38>)
 800692e:	4c0d      	ldr	r4, [pc, #52]	; (8006964 <__libc_init_array+0x3c>)
 8006930:	1b64      	subs	r4, r4, r5
 8006932:	10a4      	asrs	r4, r4, #2
 8006934:	42a6      	cmp	r6, r4
 8006936:	d109      	bne.n	800694c <__libc_init_array+0x24>
 8006938:	f000 f822 	bl	8006980 <_init>
 800693c:	2600      	movs	r6, #0
 800693e:	4d0a      	ldr	r5, [pc, #40]	; (8006968 <__libc_init_array+0x40>)
 8006940:	4c0a      	ldr	r4, [pc, #40]	; (800696c <__libc_init_array+0x44>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	42a6      	cmp	r6, r4
 8006948:	d105      	bne.n	8006956 <__libc_init_array+0x2e>
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006950:	4798      	blx	r3
 8006952:	3601      	adds	r6, #1
 8006954:	e7ee      	b.n	8006934 <__libc_init_array+0xc>
 8006956:	f855 3b04 	ldr.w	r3, [r5], #4
 800695a:	4798      	blx	r3
 800695c:	3601      	adds	r6, #1
 800695e:	e7f2      	b.n	8006946 <__libc_init_array+0x1e>
 8006960:	08006a04 	.word	0x08006a04
 8006964:	08006a04 	.word	0x08006a04
 8006968:	08006a04 	.word	0x08006a04
 800696c:	08006a08 	.word	0x08006a08

08006970 <memset>:
 8006970:	4603      	mov	r3, r0
 8006972:	4402      	add	r2, r0
 8006974:	4293      	cmp	r3, r2
 8006976:	d100      	bne.n	800697a <memset+0xa>
 8006978:	4770      	bx	lr
 800697a:	f803 1b01 	strb.w	r1, [r3], #1
 800697e:	e7f9      	b.n	8006974 <memset+0x4>

08006980 <_init>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr

0800698c <_fini>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr
