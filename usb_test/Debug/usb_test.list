
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006770  08006770  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08006770  08006770  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006770  08006770  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08006778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  080068d0  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  080068d0  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004dd4  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000519  00000000  00000000  00024f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  00025470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000430  00000000  00000000  000258b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a0d  00000000  00000000  00025ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002db2  00000000  00000000  000276f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b4c8  00000000  00000000  0002a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003596f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001318  00000000  00000000  000359c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080066ec 	.word	0x080066ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080066ec 	.word	0x080066ec

0800014c <__NVIC_GetPriorityGrouping>:
  reg_value = (reg_value |
               ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
               (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
  SCB->AIRCR = reg_value;
}
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <__NVIC_GetPriorityGrouping+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	0a1b      	lsrs	r3, r3, #8
 8000156:	f003 0307 	and.w	r3, r3, #7
}
 800015a:	4618      	mov	r0, r3
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	e000ed00 	.word	0xe000ed00

08000168 <__NVIC_EnableIRQ>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000176:	2b00      	cmp	r3, #0
 8000178:	db0b      	blt.n	8000192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 021f 	and.w	r2, r3, #31
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <__NVIC_EnableIRQ+0x34>)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	095b      	lsrs	r3, r3, #5
 8000188:	2001      	movs	r0, #1
 800018a:	fa00 f202 	lsl.w	r2, r0, r2
 800018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000e100 	.word	0xe000e100

080001a0 <__NVIC_SetPriority>:
  else
  {
    return (0U);
  }
}
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	db0a      	blt.n	80001ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	490c      	ldr	r1, [pc, #48]	; (80001ec <__NVIC_SetPriority+0x4c>)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	0112      	lsls	r2, r2, #4
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	440b      	add	r3, r1
 80001c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c8:	e00a      	b.n	80001e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4908      	ldr	r1, [pc, #32]	; (80001f0 <__NVIC_SetPriority+0x50>)
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f003 030f 	and.w	r3, r3, #15
 80001d6:	3b04      	subs	r3, #4
 80001d8:	0112      	lsls	r2, r2, #4
 80001da:	b2d2      	uxtb	r2, r2
 80001dc:	440b      	add	r3, r1
 80001de:	761a      	strb	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <NVIC_EncodePriority>:
  else
  {
    return (((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] >> (8U - __NVIC_PRIO_BITS)));
  }
}
__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 80001f4:	b480      	push	{r7}
 80001f6:	b089      	sub	sp, #36	; 0x24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;
    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	f1c3 0307 	rsb	r3, r3, #7
 800020e:	2b04      	cmp	r3, #4
 8000210:	bf28      	it	cs
 8000212:	2304      	movcs	r3, #4
 8000214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	3304      	adds	r3, #4
 800021a:	2b06      	cmp	r3, #6
 800021c:	d902      	bls.n	8000224 <NVIC_EncodePriority+0x30>
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3b03      	subs	r3, #3
 8000222:	e000      	b.n	8000226 <NVIC_EncodePriority+0x32>
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]
    return (
      ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 32ff 	mov.w	r2, #4294967295
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	43da      	mvns	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	401a      	ands	r2, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	409a      	lsls	r2, r3
      ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 800023c:	f04f 31ff 	mov.w	r1, #4294967295
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43d9      	mvns	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	400b      	ands	r3, r1
      ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	4313      	orrs	r3, r2
}
 800024e:	4618      	mov	r0, r3
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <SysTick_Config>:
/* ##########################  FPU functions  #################################### */
__STATIC_INLINE uint32_t SCB_GetFPUType(void) {
  return 0U; /* No FPU */
}
/* ##################################    SysTick function  ############################################ */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3b01      	subs	r3, #1
 8000264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000268:	d301      	bcc.n	800026e <SysTick_Config+0x16>
  {
    return (1UL); /* Reload value impossible */
 800026a:	2301      	movs	r3, #1
 800026c:	e00f      	b.n	800028e <SysTick_Config+0x36>
  }
    SysTick->LOAD = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <SysTick_Config+0x40>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000276:	210f      	movs	r1, #15
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f7ff ff90 	bl	80001a0 <__NVIC_SetPriority>
  SysTick->VAL = 0UL;                                              /* Load the SysTick Counter Value */
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SysTick_Config+0x40>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SysTick_Config+0x40>)
 8000288:	2207      	movs	r2, #7
 800028a:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk |
                  SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                            /* Function successful */
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <SysTick_Handler>:
PCD_HandleTypeDef hpcd_USB_FS;
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);


void SysTick_Handler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80002a0:	f002 fadc 	bl	800285c <HAL_IncTick>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80002ae:	f000 feb2 	bl	8001016 <HAL_PCD_IRQHandler>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000045c 	.word	0x2000045c

080002bc <main>:

keyboardHID keyboardhid = {0, 0, 0, 0, 0, 0, 0, 0};

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80002c2:	f000 f841 	bl	8000348 <SystemClock_Config>
  USB_DEVICE_Init();
 80002c6:	f000 f899 	bl	80003fc <USB_DEVICE_Init>

  uint8_t report[sizeof(keyboardHID)];

  for (volatile int i = 0; i <= 3; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	e033      	b.n	8000338 <main+0x7c>
  {
    HAL_Delay(200);
 80002d0:	20c8      	movs	r0, #200	; 0xc8
 80002d2:	f002 fad5 	bl	8002880 <HAL_Delay>
    keyboardhid.KeyCode1 = 0x2C;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <main+0x84>)
 80002d8:	222c      	movs	r2, #44	; 0x2c
 80002da:	709a      	strb	r2, [r3, #2]
    keyboardhid.KeyCode2 = 0x0B;
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <main+0x84>)
 80002de:	220b      	movs	r2, #11
 80002e0:	70da      	strb	r2, [r3, #3]
    keyboardhid.KeyCode3 = 0x12;
 80002e2:	4b17      	ldr	r3, [pc, #92]	; (8000340 <main+0x84>)
 80002e4:	2212      	movs	r2, #18
 80002e6:	711a      	strb	r2, [r3, #4]
    keyboardhid.KeyCode4 = 0x0F;
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <main+0x84>)
 80002ea:	220f      	movs	r2, #15
 80002ec:	715a      	strb	r2, [r3, #5]
    keyboardhid.KeyCode5 = 0x04;
 80002ee:	4b14      	ldr	r3, [pc, #80]	; (8000340 <main+0x84>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	719a      	strb	r2, [r3, #6]
    USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(report));
 80002f4:	2208      	movs	r2, #8
 80002f6:	4912      	ldr	r1, [pc, #72]	; (8000340 <main+0x84>)
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <main+0x88>)
 80002fa:	f006 f8cd 	bl	8006498 <USBD_HID_SendReport>
    HAL_Delay(30);
 80002fe:	201e      	movs	r0, #30
 8000300:	f002 fabe 	bl	8002880 <HAL_Delay>

    keyboardhid.KeyCode1 = 0x00;
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <main+0x84>)
 8000306:	2200      	movs	r2, #0
 8000308:	709a      	strb	r2, [r3, #2]
    keyboardhid.KeyCode2 = 0x00;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <main+0x84>)
 800030c:	2200      	movs	r2, #0
 800030e:	70da      	strb	r2, [r3, #3]
    keyboardhid.KeyCode3 = 0x00;
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <main+0x84>)
 8000312:	2200      	movs	r2, #0
 8000314:	711a      	strb	r2, [r3, #4]
    keyboardhid.KeyCode4 = 0x00;
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <main+0x84>)
 8000318:	2200      	movs	r2, #0
 800031a:	715a      	strb	r2, [r3, #5]
    keyboardhid.KeyCode5 = 0x00;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <main+0x84>)
 800031e:	2200      	movs	r2, #0
 8000320:	719a      	strb	r2, [r3, #6]
    USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(report));
 8000322:	2208      	movs	r2, #8
 8000324:	4906      	ldr	r1, [pc, #24]	; (8000340 <main+0x84>)
 8000326:	4807      	ldr	r0, [pc, #28]	; (8000344 <main+0x88>)
 8000328:	f006 f8b6 	bl	8006498 <USBD_HID_SendReport>
    HAL_Delay(200);
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f002 faa7 	bl	8002880 <HAL_Delay>
  for (volatile int i = 0; i <= 3; i++)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b03      	cmp	r3, #3
 800033c:	ddc8      	ble.n	80002d0 <main+0x14>
  }
  while (1)
 800033e:	e7fe      	b.n	800033e <main+0x82>
 8000340:	20000174 	.word	0x20000174
 8000344:	20000194 	.word	0x20000194

08000348 <SystemClock_Config>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct/*, uint32_t FLatency*/);
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);

void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b094      	sub	sp, #80	; 0x50
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f006 f9c0 	bl	80066dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000378:	2301      	movs	r3, #1
 800037a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	2302      	movs	r3, #2
 800038c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000394:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000398:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f896 	bl	80004d0 <HAL_RCC_OscConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003aa:	f000 f84d 	bl	8000448 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80003ae:	230f      	movs	r3, #15
 80003b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct/*, FLASH_LATENCY_2*/) != HAL_OK)
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fb01 	bl	80009d0 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003d4:	f000 f838 	bl	8000448 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003d8:	2310      	movs	r3, #16
 80003da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fbde 	bl	8000ba4 <HAL_RCCEx_PeriphCLKConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003ee:	f000 f82b 	bl	8000448 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3750      	adds	r7, #80	; 0x50
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <USB_DEVICE_Init>:

void USB_DEVICE_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000400:	2200      	movs	r2, #0
 8000402:	490e      	ldr	r1, [pc, #56]	; (800043c <USB_DEVICE_Init+0x40>)
 8000404:	480e      	ldr	r0, [pc, #56]	; (8000440 <USB_DEVICE_Init+0x44>)
 8000406:	f004 fb95 	bl	8004b34 <USBD_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000410:	f000 f81a 	bl	8000448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8000414:	490b      	ldr	r1, [pc, #44]	; (8000444 <USB_DEVICE_Init+0x48>)
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <USB_DEVICE_Init+0x44>)
 8000418:	f004 fbb7 	bl	8004b8a <USBD_RegisterClass>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000422:	f000 f811 	bl	8000448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <USB_DEVICE_Init+0x44>)
 8000428:	f004 fbc8 	bl	8004bbc <USBD_Start>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8000432:	f000 f809 	bl	8000448 <Error_Handler>
  }
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000000c 	.word	0x2000000c
 8000440:	20000194 	.word	0x20000194
 8000444:	2000005c 	.word	0x2000005c

08000448 <Error_Handler>:

void Error_Handler()
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  //__disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x4>
	...

08000450 <HAL_GetTick>:

const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8U] = {0, 0, 0, 0, 1, 2, 3, 4};

__weak uint32_t HAL_GetTick(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  return uwTick;
 8000454:	4b02      	ldr	r3, [pc, #8]	; (8000460 <HAL_GetTick+0x10>)
 8000456:	681b      	ldr	r3, [r3, #0]
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20000458 	.word	0x20000458

08000464 <HAL_NVIC_SetPriority>:
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  NVIC_SetPriorityGrouping(PriorityGroup);
}

void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000476:	f7ff fe69 	bl	800014c <__NVIC_GetPriorityGrouping>
 800047a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	68b9      	ldr	r1, [r7, #8]
 8000480:	6978      	ldr	r0, [r7, #20]
 8000482:	f7ff feb7 	bl	80001f4 <NVIC_EncodePriority>
 8000486:	4602      	mov	r2, r0
 8000488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048c:	4611      	mov	r1, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff fe86 	bl	80001a0 <__NVIC_SetPriority>
}
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_NVIC_EnableIRQ>:

void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  NVIC_EnableIRQ(IRQn);
 80004a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fe5c 	bl	8000168 <__NVIC_EnableIRQ>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <HAL_SYSTICK_Config>:

uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff fec9 	bl	8000258 <SysTick_Config>
 80004c6:	4603      	mov	r3, r0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_RCC_OscConfig>:

static void RCC_Delay(uint32_t mdelay);

HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  if (RCC_OscInitStruct == NULL)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d101      	bne.n	80004e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80004de:	2301      	movs	r3, #1
 80004e0:	e26c      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	f000 8087 	beq.w	80005fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004f0:	4b92      	ldr	r3, [pc, #584]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f003 030c 	and.w	r3, r3, #12
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d00c      	beq.n	8000516 <HAL_RCC_OscConfig+0x46>
 80004fc:	4b8f      	ldr	r3, [pc, #572]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b08      	cmp	r3, #8
 8000506:	d112      	bne.n	800052e <HAL_RCC_OscConfig+0x5e>
 8000508:	4b8c      	ldr	r3, [pc, #560]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000514:	d10b      	bne.n	800052e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000516:	4b89      	ldr	r3, [pc, #548]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	2b00      	cmp	r3, #0
 8000520:	d06c      	beq.n	80005fc <HAL_RCC_OscConfig+0x12c>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d168      	bne.n	80005fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	e246      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000536:	d106      	bne.n	8000546 <HAL_RCC_OscConfig+0x76>
 8000538:	4b80      	ldr	r3, [pc, #512]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a7f      	ldr	r2, [pc, #508]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800053e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e02e      	b.n	80005a4 <HAL_RCC_OscConfig+0xd4>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10c      	bne.n	8000568 <HAL_RCC_OscConfig+0x98>
 800054e:	4b7b      	ldr	r3, [pc, #492]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a7a      	ldr	r2, [pc, #488]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000558:	6013      	str	r3, [r2, #0]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a77      	ldr	r2, [pc, #476]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	e01d      	b.n	80005a4 <HAL_RCC_OscConfig+0xd4>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000570:	d10c      	bne.n	800058c <HAL_RCC_OscConfig+0xbc>
 8000572:	4b72      	ldr	r3, [pc, #456]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a71      	ldr	r2, [pc, #452]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b6f      	ldr	r3, [pc, #444]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a6e      	ldr	r2, [pc, #440]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	e00b      	b.n	80005a4 <HAL_RCC_OscConfig+0xd4>
 800058c:	4b6b      	ldr	r3, [pc, #428]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a6a      	ldr	r2, [pc, #424]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b68      	ldr	r3, [pc, #416]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a67      	ldr	r2, [pc, #412]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800059e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005ac:	f7ff ff50 	bl	8000450 <HAL_GetTick>
 80005b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b2:	e008      	b.n	80005c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80005b4:	f7ff ff4c 	bl	8000450 <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	2b64      	cmp	r3, #100	; 0x64
 80005c0:	d901      	bls.n	80005c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80005c2:	2303      	movs	r3, #3
 80005c4:	e1fa      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c6:	4b5d      	ldr	r3, [pc, #372]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f0      	beq.n	80005b4 <HAL_RCC_OscConfig+0xe4>
 80005d2:	e014      	b.n	80005fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005d4:	f7ff ff3c 	bl	8000450 <HAL_GetTick>
 80005d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005da:	e008      	b.n	80005ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80005dc:	f7ff ff38 	bl	8000450 <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	2b64      	cmp	r3, #100	; 0x64
 80005e8:	d901      	bls.n	80005ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80005ea:	2303      	movs	r3, #3
 80005ec:	e1e6      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ee:	4b53      	ldr	r3, [pc, #332]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f0      	bne.n	80005dc <HAL_RCC_OscConfig+0x10c>
 80005fa:	e000      	b.n	80005fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	2b00      	cmp	r3, #0
 8000608:	d063      	beq.n	80006d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800060a:	4b4c      	ldr	r3, [pc, #304]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f003 030c 	and.w	r3, r3, #12
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00b      	beq.n	800062e <HAL_RCC_OscConfig+0x15e>
 8000616:	4b49      	ldr	r3, [pc, #292]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f003 030c 	and.w	r3, r3, #12
 800061e:	2b08      	cmp	r3, #8
 8000620:	d11c      	bne.n	800065c <HAL_RCC_OscConfig+0x18c>
 8000622:	4b46      	ldr	r3, [pc, #280]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800062a:	2b00      	cmp	r3, #0
 800062c:	d116      	bne.n	800065c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800062e:	4b43      	ldr	r3, [pc, #268]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	2b00      	cmp	r3, #0
 8000638:	d005      	beq.n	8000646 <HAL_RCC_OscConfig+0x176>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d001      	beq.n	8000646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e1ba      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	4939      	ldr	r1, [pc, #228]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000656:	4313      	orrs	r3, r2
 8000658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800065a:	e03a      	b.n	80006d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d020      	beq.n	80006a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <HAL_RCC_OscConfig+0x270>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800066a:	f7ff fef1 	bl	8000450 <HAL_GetTick>
 800066e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000670:	e008      	b.n	8000684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000672:	f7ff feed 	bl	8000450 <HAL_GetTick>
 8000676:	4602      	mov	r2, r0
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	2b02      	cmp	r3, #2
 800067e:	d901      	bls.n	8000684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000680:	2303      	movs	r3, #3
 8000682:	e19b      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f0      	beq.n	8000672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	4927      	ldr	r1, [pc, #156]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 80006a0:	4313      	orrs	r3, r2
 80006a2:	600b      	str	r3, [r1, #0]
 80006a4:	e015      	b.n	80006d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <HAL_RCC_OscConfig+0x270>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006ac:	f7ff fed0 	bl	8000450 <HAL_GetTick>
 80006b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006b2:	e008      	b.n	80006c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006b4:	f7ff fecc 	bl	8000450 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d901      	bls.n	80006c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80006c2:	2303      	movs	r3, #3
 80006c4:	e17a      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f0      	bne.n	80006b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d03a      	beq.n	8000754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d019      	beq.n	800071a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_RCC_OscConfig+0x274>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006ec:	f7ff feb0 	bl	8000450 <HAL_GetTick>
 80006f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f2:	e008      	b.n	8000706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80006f4:	f7ff feac 	bl	8000450 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d901      	bls.n	8000706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000702:	2303      	movs	r3, #3
 8000704:	e15a      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_RCC_OscConfig+0x26c>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f0      	beq.n	80006f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fb40 	bl	8000d98 <RCC_Delay>
 8000718:	e01c      	b.n	8000754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_RCC_OscConfig+0x274>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000720:	f7ff fe96 	bl	8000450 <HAL_GetTick>
 8000724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000726:	e00f      	b.n	8000748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000728:	f7ff fe92 	bl	8000450 <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	2b02      	cmp	r3, #2
 8000734:	d908      	bls.n	8000748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000736:	2303      	movs	r3, #3
 8000738:	e140      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	42420000 	.word	0x42420000
 8000744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000748:	4b9e      	ldr	r3, [pc, #632]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1e9      	bne.n	8000728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 80a6 	beq.w	80008ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus pwrclkchanged = RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000766:	4b97      	ldr	r3, [pc, #604]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10d      	bne.n	800078e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b94      	ldr	r3, [pc, #592]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a93      	ldr	r2, [pc, #588]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b91      	ldr	r3, [pc, #580]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800078a:	2301      	movs	r3, #1
 800078c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800078e:	4b8e      	ldr	r3, [pc, #568]	; (80009c8 <HAL_RCC_OscConfig+0x4f8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000796:	2b00      	cmp	r3, #0
 8000798:	d118      	bne.n	80007cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800079a:	4b8b      	ldr	r3, [pc, #556]	; (80009c8 <HAL_RCC_OscConfig+0x4f8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a8a      	ldr	r2, [pc, #552]	; (80009c8 <HAL_RCC_OscConfig+0x4f8>)
 80007a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80007a6:	f7ff fe53 	bl	8000450 <HAL_GetTick>
 80007aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ac:	e008      	b.n	80007c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007ae:	f7ff fe4f 	bl	8000450 <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b64      	cmp	r3, #100	; 0x64
 80007ba:	d901      	bls.n	80007c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80007bc:	2303      	movs	r3, #3
 80007be:	e0fd      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007c0:	4b81      	ldr	r3, [pc, #516]	; (80009c8 <HAL_RCC_OscConfig+0x4f8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d0f0      	beq.n	80007ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d106      	bne.n	80007e2 <HAL_RCC_OscConfig+0x312>
 80007d4:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a7a      	ldr	r2, [pc, #488]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6213      	str	r3, [r2, #32]
 80007e0:	e02d      	b.n	800083e <HAL_RCC_OscConfig+0x36e>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10c      	bne.n	8000804 <HAL_RCC_OscConfig+0x334>
 80007ea:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80007ec:	6a1b      	ldr	r3, [r3, #32]
 80007ee:	4a75      	ldr	r2, [pc, #468]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80007f0:	f023 0301 	bic.w	r3, r3, #1
 80007f4:	6213      	str	r3, [r2, #32]
 80007f6:	4b73      	ldr	r3, [pc, #460]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	4a72      	ldr	r2, [pc, #456]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80007fc:	f023 0304 	bic.w	r3, r3, #4
 8000800:	6213      	str	r3, [r2, #32]
 8000802:	e01c      	b.n	800083e <HAL_RCC_OscConfig+0x36e>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	2b05      	cmp	r3, #5
 800080a:	d10c      	bne.n	8000826 <HAL_RCC_OscConfig+0x356>
 800080c:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	4a6c      	ldr	r2, [pc, #432]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6213      	str	r3, [r2, #32]
 8000818:	4b6a      	ldr	r3, [pc, #424]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800081a:	6a1b      	ldr	r3, [r3, #32]
 800081c:	4a69      	ldr	r2, [pc, #420]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6213      	str	r3, [r2, #32]
 8000824:	e00b      	b.n	800083e <HAL_RCC_OscConfig+0x36e>
 8000826:	4b67      	ldr	r3, [pc, #412]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	4a66      	ldr	r2, [pc, #408]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	6213      	str	r3, [r2, #32]
 8000832:	4b64      	ldr	r3, [pc, #400]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	4a63      	ldr	r2, [pc, #396]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000838:	f023 0304 	bic.w	r3, r3, #4
 800083c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d015      	beq.n	8000872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000846:	f7ff fe03 	bl	8000450 <HAL_GetTick>
 800084a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800084c:	e00a      	b.n	8000864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800084e:	f7ff fdff 	bl	8000450 <HAL_GetTick>
 8000852:	4602      	mov	r2, r0
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	f241 3288 	movw	r2, #5000	; 0x1388
 800085c:	4293      	cmp	r3, r2
 800085e:	d901      	bls.n	8000864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000860:	2303      	movs	r3, #3
 8000862:	e0ab      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0ee      	beq.n	800084e <HAL_RCC_OscConfig+0x37e>
 8000870:	e014      	b.n	800089c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000872:	f7ff fded 	bl	8000450 <HAL_GetTick>
 8000876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000878:	e00a      	b.n	8000890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800087a:	f7ff fde9 	bl	8000450 <HAL_GetTick>
 800087e:	4602      	mov	r2, r0
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	f241 3288 	movw	r2, #5000	; 0x1388
 8000888:	4293      	cmp	r3, r2
 800088a:	d901      	bls.n	8000890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800088c:	2303      	movs	r3, #3
 800088e:	e095      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000890:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1ee      	bne.n	800087a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d105      	bne.n	80008ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a47      	ldr	r2, [pc, #284]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80008a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008ac:	61d3      	str	r3, [r2, #28]
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8081 	beq.w	80009ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 030c 	and.w	r3, r3, #12
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d061      	beq.n	8000988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d146      	bne.n	800095a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008cc:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <HAL_RCC_OscConfig+0x4fc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d2:	f7ff fdbd 	bl	8000450 <HAL_GetTick>
 80008d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008d8:	e008      	b.n	80008ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008da:	f7ff fdb9 	bl	8000450 <HAL_GetTick>
 80008de:	4602      	mov	r2, r0
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d901      	bls.n	80008ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80008e8:	2303      	movs	r3, #3
 80008ea:	e067      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008ec:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f0      	bne.n	80008da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000900:	d108      	bne.n	8000914 <HAL_RCC_OscConfig+0x444>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
           /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	492d      	ldr	r1, [pc, #180]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000910:	4313      	orrs	r3, r2
 8000912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a19      	ldr	r1, [r3, #32]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000924:	430b      	orrs	r3, r1
 8000926:	4927      	ldr	r1, [pc, #156]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000928:	4313      	orrs	r3, r2
 800092a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_RCC_OscConfig+0x4fc>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000932:	f7ff fd8d 	bl	8000450 <HAL_GetTick>
 8000936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000938:	e008      	b.n	800094c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800093a:	f7ff fd89 	bl	8000450 <HAL_GetTick>
 800093e:	4602      	mov	r2, r0
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	2b02      	cmp	r3, #2
 8000946:	d901      	bls.n	800094c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000948:	2303      	movs	r3, #3
 800094a:	e037      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f0      	beq.n	800093a <HAL_RCC_OscConfig+0x46a>
 8000958:	e02f      	b.n	80009ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_RCC_OscConfig+0x4fc>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000960:	f7ff fd76 	bl	8000450 <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000968:	f7ff fd72 	bl	8000450 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e020      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f0      	bne.n	8000968 <HAL_RCC_OscConfig+0x498>
 8000986:	e018      	b.n	80009ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d101      	bne.n	8000994 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e013      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_RCC_OscConfig+0x4f4>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d106      	bne.n	80009b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d001      	beq.n	80009ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40007000 	.word	0x40007000
 80009cc:	42420060 	.word	0x42420060

080009d0 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct/*, uint32_t FLatency*/)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t FLatency = FLASH_LATENCY_2;
 80009d8:	2302      	movs	r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart;

  if (RCC_ClkInitStruct == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e0d0      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80009e6:	4b6a      	ldr	r3, [pc, #424]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d910      	bls.n	8000a16 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f4:	4b66      	ldr	r3, [pc, #408]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f023 0207 	bic.w	r2, r3, #7
 80009fc:	4964      	ldr	r1, [pc, #400]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a04:	4b62      	ldr	r3, [pc, #392]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d001      	beq.n	8000a16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e0b8      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d020      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x94>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d005      	beq.n	8000a3a <HAL_RCC_ClockConfig+0x6a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a2e:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4a58      	ldr	r2, [pc, #352]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a38:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a46:	4b53      	ldr	r3, [pc, #332]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a52      	ldr	r2, [pc, #328]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a4c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000a50:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a52:	4b50      	ldr	r3, [pc, #320]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	494d      	ldr	r1, [pc, #308]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a60:	4313      	orrs	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d040      	beq.n	8000af2 <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d107      	bne.n	8000a88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d115      	bne.n	8000ab0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e07f      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d107      	bne.n	8000aa0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e073      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa0:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e06b      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f023 0203 	bic.w	r2, r3, #3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4935      	ldr	r1, [pc, #212]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ac2:	f7ff fcc5 	bl	8000450 <HAL_GetTick>
 8000ac6:	60b8      	str	r0, [r7, #8]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ac8:	e00a      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x110>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aca:	f7ff fcc1 	bl	8000450 <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e053      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 020c 	and.w	r2, r3, #12
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d1eb      	bne.n	8000aca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d210      	bcs.n	8000b22 <HAL_RCC_ClockConfig+0x152>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f023 0207 	bic.w	r2, r3, #7
 8000b08:	4921      	ldr	r1, [pc, #132]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_RCC_ClockConfig+0x1c0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d001      	beq.n	8000b22 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e032      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1b8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4916      	ldr	r1, [pc, #88]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <HAL_RCC_ClockConfig+0x190>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b60:	f000 f8c6 	bl	8000cf0 <HAL_RCC_GetSysClockFreq>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_RCC_ClockConfig+0x1c4>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	4909      	ldr	r1, [pc, #36]	; (8000b98 <HAL_RCC_ClockConfig+0x1c8>)
 8000b72:	5ccb      	ldrb	r3, [r1, r3]
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_RCC_ClockConfig+0x1cc>)
 8000b7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fe3b 	bl	80027fc <HAL_InitTick>

  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40022000 	.word	0x40022000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	0800674c 	.word	0x0800674c
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_RCCEx_PeriphCLKConfig>:

HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d07d      	beq.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10d      	bne.n	8000bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	61d3      	str	r3, [r2, #28]
 8000bdc:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000be8:	2301      	movs	r3, #1
 8000bea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d118      	bne.n	8000c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c04:	f7ff fc24 	bl	8000450 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c0a:	e008      	b.n	8000c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c0c:	f7ff fc20 	bl	8000450 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e05e      	b.n	8000cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d02e      	beq.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d027      	beq.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000c5e:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d014      	beq.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fbef 	bl	8000450 <HAL_GetTick>
 8000c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c74:	e00a      	b.n	8000c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c76:	f7ff fbeb 	bl	8000450 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e027      	b.n	8000cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0ee      	beq.n	8000c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	490f      	ldr	r1, [pc, #60]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d105      	bne.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d008      	beq.n	8000cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4903      	ldr	r1, [pc, #12]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40007000 	.word	0x40007000
 8000cec:	42420440 	.word	0x42420440

08000cf0 <HAL_RCC_GetSysClockFreq>:

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0

  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]

  tmpreg = RCC->CFGR;
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d002      	beq.n	8000d20 <HAL_RCC_GetSysClockFreq+0x30>
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d003      	beq.n	8000d26 <HAL_RCC_GetSysClockFreq+0x36>
 8000d1e:	e027      	b.n	8000d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
  {
    sysclockfreq = HSE_VALUE;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d22:	613b      	str	r3, [r7, #16]
    break;
 8000d24:	e027      	b.n	8000d76 <HAL_RCC_GetSysClockFreq+0x86>
  }
  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
  {
    pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	0c9b      	lsrs	r3, r3, #18
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d30:	5cd3      	ldrb	r3, [r2, r3]
 8000d32:	607b      	str	r3, [r7, #4]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d010      	beq.n	8000d60 <HAL_RCC_GetSysClockFreq+0x70>
    {
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	0c5b      	lsrs	r3, r3, #17
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	60bb      	str	r3, [r7, #8]
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
      pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d52:	fb02 f203 	mul.w	r2, r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e004      	b.n	8000d6a <HAL_RCC_GetSysClockFreq+0x7a>
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
    }
    sysclockfreq = pllclk;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	613b      	str	r3, [r7, #16]
    break;
 8000d6e:	e002      	b.n	8000d76 <HAL_RCC_GetSysClockFreq+0x86>
  }
  case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
  default:                          /* HSI used as system clock */
  {
    sysclockfreq = HSI_VALUE;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d72:	613b      	str	r3, [r7, #16]
    break;
 8000d74:	bf00      	nop
  }
  }
  return sysclockfreq;
 8000d76:	693b      	ldr	r3, [r7, #16]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	007a1200 	.word	0x007a1200
 8000d8c:	0800675c 	.word	0x0800675c
 8000d90:	0800676c 	.word	0x0800676c
 8000d94:	003d0900 	.word	0x003d0900

08000d98 <RCC_Delay>:

static void RCC_Delay(uint32_t mdelay)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  volatile uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <RCC_Delay+0x34>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <RCC_Delay+0x38>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	0a5b      	lsrs	r3, r3, #9
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000db4:	bf00      	nop
  } while (Delay--);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	60fa      	str	r2, [r7, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1f9      	bne.n	8000db4 <RCC_Delay+0x1c>
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	10624dd3 	.word	0x10624dd3

08000dd4 <HAL_PCD_Init>:
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd);
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal);
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal);

HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af06      	add	r7, sp, #24
 8000dda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  if (hpcd == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0f1      	b.n	8000fca <HAL_PCD_Init+0x1f6>
  }
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d106      	bne.n	8000e00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f004 f91c 	bl	8005038 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fd81 	bl	8002914 <USB_DisableGlobalInt>

  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	687e      	ldr	r6, [r7, #4]
 8000e1a:	466d      	mov	r5, sp
 8000e1c:	f106 0410 	add.w	r4, r6, #16
 8000e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	602b      	str	r3, [r5, #0]
 8000e28:	1d33      	adds	r3, r6, #4
 8000e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2c:	6838      	ldr	r0, [r7, #0]
 8000e2e:	f001 fd4b 	bl	80028c8 <USB_CoreInit>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0c2      	b.n	8000fca <HAL_PCD_Init+0x1f6>
  }

  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fd7c 	bl	8002948 <USB_SetCurrentMode>

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e040      	b.n	8000ed8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	440b      	add	r3, r1
 8000e66:	3301      	adds	r3, #1
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	440b      	add	r3, r1
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	440b      	add	r3, r1
 8000e90:	3303      	adds	r3, #3
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3338      	adds	r3, #56	; 0x38
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	333c      	adds	r3, #60	; 0x3c
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3340      	adds	r3, #64	; 0x40
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d3b9      	bcc.n	8000e56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e044      	b.n	8000f72 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	440b      	add	r3, r1
 8000ef6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3b5      	bcc.n	8000ee8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	687e      	ldr	r6, [r7, #4]
 8000f84:	466d      	mov	r5, sp
 8000f86:	f106 0410 	add.w	r4, r6, #16
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	1d33      	adds	r3, r6, #4
 8000f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f001 fce2 	bl	8002960 <USB_DevInit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00d      	b.n	8000fca <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fcfe 	bl	80049c4 <USB_DevDisconnect>

  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fd2 <HAL_PCD_Start>:

HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_PCD_Start+0x16>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e012      	b.n	800100e <HAL_PCD_Start+0x3c>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fc77 	bl	80028e8 <USB_EnableGlobalInt>

  (void)USB_DevConnect(hpcd->Instance);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fcd6 	bl	80049b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_PCD_IRQHandler>:

void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b088      	sub	sp, #32
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fcd8 	bl	80049d8 <USB_ReadInterrupts>
 8001028:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fb06 	bl	8001646 <PCD_EP_ISR_Handler>

    return;
 800103a:	e11b      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001042:	2b00      	cmp	r3, #0
 8001044:	d013      	beq.n	800106e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001058:	b292      	uxth	r2, r2
 800105a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    HAL_PCD_ResetCallback(hpcd);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f004 f865 	bl	800512e <HAL_PCD_ResetCallback>

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001064:	2100      	movs	r1, #0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f907 	bl	800127a <HAL_PCD_SetAddress>

    return;
 800106c:	e102      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00c      	beq.n	8001092 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800108a:	b292      	uxth	r2, r2
 800108c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001090:	e0f0      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ae:	b292      	uxth	r2, r2
 80010b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010b4:	e0de      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d027      	beq.n	8001110 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0204 	bic.w	r2, r2, #4
 80010d2:	b292      	uxth	r2, r2
 80010d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0208 	bic.w	r2, r2, #8
 80010ea:	b292      	uxth	r2, r2
 80010ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    HAL_PCD_ResumeCallback(hpcd);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f004 f855 	bl	80051a0 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800110e:	e0b1      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8085 	beq.w	8001226 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	77fb      	strb	r3, [r7, #31]
 8001120:	e011      	b.n	8001146 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	441a      	add	r2, r3
 800112e:	7ffb      	ldrb	r3, [r7, #31]
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	b292      	uxth	r2, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	f107 0120 	add.w	r1, r7, #32
 800113a:	440b      	add	r3, r1
 800113c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	3301      	adds	r3, #1
 8001144:	77fb      	strb	r3, [r7, #31]
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b07      	cmp	r3, #7
 800114a:	d9ea      	bls.n	8001122 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	b292      	uxth	r2, r2
 8001160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	b292      	uxth	r2, r2
 8001178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800117c:	bf00      	nop
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001186:	b29b      	uxth	r3, r3
 8001188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f6      	beq.n	800117e <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011a2:	b292      	uxth	r2, r2
 80011a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
 80011ac:	e010      	b.n	80011d0 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	4611      	mov	r1, r2
 80011b6:	7ffa      	ldrb	r2, [r7, #31]
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	440a      	add	r2, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	f107 0120 	add.w	r1, r7, #32
 80011c2:	440b      	add	r3, r1
 80011c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	3301      	adds	r3, #1
 80011ce:	77fb      	strb	r3, [r7, #31]
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d9eb      	bls.n	80011ae <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0208 	orr.w	r2, r2, #8
 80011e8:	b292      	uxth	r2, r2
 80011ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001200:	b292      	uxth	r2, r2
 8001202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800120e:	b29a      	uxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0204 	orr.w	r2, r2, #4
 8001218:	b292      	uxth	r2, r2
 800121a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    HAL_PCD_SuspendCallback(hpcd);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f003 ffa4 	bl	800516c <HAL_PCD_SuspendCallback>

    return;
 8001224:	e026      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00f      	beq.n	8001250 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001242:	b292      	uxth	r2, r2
 8001244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    HAL_PCD_SOFCallback(hpcd);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f003 ff62 	bl	8005112 <HAL_PCD_SOFCallback>

    return;
 800124e:	e011      	b.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126c:	b292      	uxth	r2, r2
 800126e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001272:	bf00      	nop
  }
}
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_PCD_SetAddress>:
//
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_PCD_SetAddress+0x1a>
 8001290:	2302      	movs	r3, #2
 8001292:	e013      	b.n	80012bc <HAL_PCD_SetAddress+0x42>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	78fa      	ldrb	r2, [r7, #3]
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	78fa      	ldrb	r2, [r7, #3]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fb6c 	bl	800498a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_PCD_EP_Open>:

HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	4608      	mov	r0, r1
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	70fb      	strb	r3, [r7, #3]
 80012d6:	460b      	mov	r3, r1
 80012d8:	803b      	strh	r3, [r7, #0]
 80012da:	4613      	mov	r3, r2
 80012dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da0e      	bge.n	8001308 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	705a      	strb	r2, [r3, #1]
 8001306:	e00e      	b.n	8001326 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 0207 	and.w	r2, r3, #7
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	b2da      	uxtb	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001332:	883a      	ldrh	r2, [r7, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	78ba      	ldrb	r2, [r7, #2]
 800133c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800133e:	78bb      	ldrb	r3, [r7, #2]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d102      	bne.n	800134a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_PCD_EP_Open+0x94>
 8001354:	2302      	movs	r3, #2
 8001356:	e00e      	b.n	8001376 <HAL_PCD_EP_Open+0xb2>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68f9      	ldr	r1, [r7, #12]
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fb1a 	bl	80029a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001374:	7afb      	ldrb	r3, [r7, #11]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_EP_Close>:

HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800138a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800138e:	2b00      	cmp	r3, #0
 8001390:	da0e      	bge.n	80013b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2201      	movs	r2, #1
 80013ac:	705a      	strb	r2, [r3, #1]
 80013ae:	e00e      	b.n	80013ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	f003 0207 	and.w	r2, r3, #7
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_PCD_EP_Close+0x6a>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e00e      	b.n	8001406 <HAL_PCD_EP_Close+0x88>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68f9      	ldr	r1, [r7, #12]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fe92 	bl	8003120 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_PCD_EP_Receive>:

HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	460b      	mov	r3, r1
 800141c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	f003 0207 	and.w	r2, r3, #7
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b2da      	uxtb	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	4618      	mov	r0, r3
 8001462:	f002 f849 	bl	80034f8 <USB_EPStartXfer>

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_EP_Transmit>:

HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2201      	movs	r2, #1
 80014ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6979      	ldr	r1, [r7, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f812 	bl	80034f8 <USB_EPStartXfer>

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_PCD_EP_SetStall>:

HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0207 	and.w	r2, r3, #7
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d901      	bls.n	80014fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e04c      	b.n	8001596 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001500:	2b00      	cmp	r3, #0
 8001502:	da0e      	bge.n	8001522 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	705a      	strb	r2, [r3, #1]
 8001520:	e00c      	b.n	800153c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	b2da      	uxtb	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_PCD_EP_SetStall+0x7e>
 8001558:	2302      	movs	r3, #2
 800155a:	e01c      	b.n	8001596 <HAL_PCD_EP_SetStall+0xb8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 f910 	bl	8004790 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f003 fa35 	bl	80049f6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_PCD_EP_ClrStall>:

HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	f003 020f 	and.w	r2, r3, #15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d901      	bls.n	80015bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e040      	b.n	800163e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da0e      	bge.n	80015e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	705a      	strb	r2, [r3, #1]
 80015e0:	e00e      	b.n	8001600 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 0207 	and.w	r2, r3, #7
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_PCD_EP_ClrStall+0x82>
 800161c:	2302      	movs	r3, #2
 800161e:	e00e      	b.n	800163e <HAL_PCD_EP_ClrStall+0xa0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68f9      	ldr	r1, [r7, #12]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 f8fe 	bl	8004830 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <PCD_EP_ISR_Handler>:

static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b096      	sub	sp, #88	; 0x58
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800164e:	e3bf      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001658:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800165c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800166a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 8179 	bne.w	8001966 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d152      	bne.n	8001726 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800168c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800169c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3328      	adds	r3, #40	; 0x28
 80016a8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	3302      	adds	r3, #2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	441a      	add	r2, r3
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	615a      	str	r2, [r3, #20]

        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016e4:	2100      	movs	r1, #0
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f003 fcf9 	bl	80050de <HAL_PCD_DataInStageCallback>

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 836b 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x78a>
 80016fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 8366 	bne.w	8001dd0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001710:	b2da      	uxtb	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b292      	uxth	r2, r2
 8001718:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001724:	e354      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800172c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001738:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800173c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001740:	2b00      	cmp	r3, #0
 8001742:	d034      	beq.n	80017ae <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	3306      	adds	r3, #6
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800177a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001780:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001782:	b29b      	uxth	r3, r3
 8001784:	f003 f987 	bl	8004a96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29a      	uxth	r2, r3
 8001790:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001794:	4013      	ands	r3, r2
 8001796:	823b      	strh	r3, [r7, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	8a3a      	ldrh	r2, [r7, #16]
 800179e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017a2:	b292      	uxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]

          HAL_PCD_SetupStageCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f003 fc6c 	bl	8005084 <HAL_PCD_SetupStageCallback>
 80017ac:	e310      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f280 830c 	bge.w	8001dd0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017c4:	4013      	ands	r3, r2
 80017c6:	83fb      	strh	r3, [r7, #30]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	8bfa      	ldrh	r2, [r7, #30]
 80017ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017d2:	b292      	uxth	r2, r2
 80017d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	3306      	adds	r3, #6
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <PCD_EP_ISR_Handler+0x1f8>
 800180a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001818:	6959      	ldr	r1, [r3, #20]
 800181a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800181e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001820:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001822:	b29b      	uxth	r3, r3
 8001824:	f003 f937 	bl	8004a96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	441a      	add	r2, r3
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	615a      	str	r2, [r3, #20]

            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001836:	2100      	movs	r1, #0
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f003 fc35 	bl	80050a8 <HAL_PCD_DataOutStageCallback>
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800184c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 82bd 	bne.w	8001dd0 <PCD_EP_ISR_Handler+0x78a>
 8001856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800185a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800185e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001862:	f000 82b5 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	4413      	add	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001890:	b29a      	uxth	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b3e      	cmp	r3, #62	; 0x3e
 800189c:	d91d      	bls.n	80018da <PCD_EP_ISR_Handler+0x294>
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <PCD_EP_ISR_Handler+0x272>
 80018b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b4:	3b01      	subs	r3, #1
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	801a      	strh	r2, [r3, #0]
 80018d8:	e026      	b.n	8001928 <PCD_EP_ISR_Handler+0x2e2>
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <PCD_EP_ISR_Handler+0x2b2>
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	e017      	b.n	8001928 <PCD_EP_ISR_Handler+0x2e2>
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <PCD_EP_ISR_Handler+0x2cc>
 800190c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190e:	3301      	adds	r3, #1
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29a      	uxth	r2, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191a:	b29b      	uxth	r3, r3
 800191c:	029b      	lsls	r3, r3, #10
 800191e:	b29b      	uxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001938:	827b      	strh	r3, [r7, #18]
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001940:	827b      	strh	r3, [r7, #18]
 8001942:	8a7b      	ldrh	r3, [r7, #18]
 8001944:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001948:	827b      	strh	r3, [r7, #18]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	8a7b      	ldrh	r3, [r7, #18]
 8001950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	b29b      	uxth	r3, r3
 8001962:	8013      	strh	r3, [r2, #0]
 8001964:	e234      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800197a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800197e:	2b00      	cmp	r3, #0
 8001980:	f280 80fc 	bge.w	8001b7c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	f640 738f 	movw	r3, #3983	; 0xf8f
 800199a:	4013      	ands	r3, r2
 800199c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80019b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b6:	b292      	uxth	r2, r2
 80019b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019ba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d125      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	3306      	adds	r3, #6
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a00:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001a04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8092 	beq.w	8001b32 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a14:	6959      	ldr	r1, [r3, #20]
 8001a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a18:	88da      	ldrh	r2, [r3, #6]
 8001a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a1e:	f003 f83a 	bl	8004a96 <USB_ReadPMA>
 8001a22:	e086      	b.n	8001b32 <PCD_EP_ISR_Handler+0x4ec>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d10a      	bne.n	8001a42 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a30:	461a      	mov	r2, r3
 8001a32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f9d9 	bl	8001dec <HAL_PCD_EP_DB_Receive>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a40:	e077      	b.n	8001b32 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	441a      	add	r2, r3
 8001a6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d024      	beq.n	8001aea <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02e      	beq.n	8001b32 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ada:	6959      	ldr	r1, [r3, #20]
 8001adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ade:	891a      	ldrh	r2, [r3, #8]
 8001ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae4:	f002 ffd7 	bl	8004a96 <USB_ReadPMA>
 8001ae8:	e023      	b.n	8001b32 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	3306      	adds	r3, #6
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	895a      	ldrh	r2, [r3, #10]
 8001b2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b2e:	f002 ffb2 	bl	8004a96 <USB_ReadPMA>
            }
          }
        }

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b3a:	441a      	add	r2, r3
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b48:	441a      	add	r2, r3
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <PCD_EP_ISR_Handler+0x51c>
 8001b56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d206      	bcs.n	8001b70 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f003 fa9d 	bl	80050a8 <HAL_PCD_DataOutStageCallback>
        {
 8001b6e:	e005      	b.n	8001b7c <PCD_EP_ISR_Handler+0x536>
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fcbe 	bl	80034f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8123 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	441a      	add	r2, r3
 8001bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bdc:	78db      	ldrb	r3, [r3, #3]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f040 80a2 	bne.w	8001d28 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]

          if (ep->doublebuffer != 0U)
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	7b1b      	ldrb	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8093 	beq.w	8001d1a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d046      	beq.n	8001c8e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d126      	bne.n	8001c56 <PCD_EP_ISR_Handler+0x610>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	4413      	add	r3, r2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	011a      	lsls	r2, r3, #4
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	4413      	add	r3, r2
 8001c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	e061      	b.n	8001d1a <PCD_EP_ISR_Handler+0x6d4>
 8001c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d15d      	bne.n	8001d1a <PCD_EP_ISR_Handler+0x6d4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	4413      	add	r3, r2
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	011a      	lsls	r2, r3, #4
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	4413      	add	r3, r2
 8001c80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	e045      	b.n	8001d1a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d126      	bne.n	8001cea <PCD_EP_ISR_Handler+0x6a4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	4413      	add	r3, r2
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	011a      	lsls	r2, r3, #4
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	801a      	strh	r2, [r3, #0]
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	e017      	b.n	8001d1a <PCD_EP_ISR_Handler+0x6d4>
 8001cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d113      	bne.n	8001d1a <PCD_EP_ISR_Handler+0x6d4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d00:	4413      	add	r3, r2
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	011a      	lsls	r2, r3, #4
 8001d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]
            }
          }

          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f003 f9dc 	bl	80050de <HAL_PCD_DataInStageCallback>
 8001d26:	e053      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d146      	bne.n	8001dc2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d907      	bls.n	8001d7c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d78:	619a      	str	r2, [r3, #24]
 8001d7a:	e002      	b.n	8001d82 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f003 f9a4 	bl	80050de <HAL_PCD_DataInStageCallback>
 8001d96:	e01b      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001da0:	441a      	add	r2, r3
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001dae:	441a      	add	r2, r3
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fb9c 	bl	80034f8 <USB_EPStartXfer>
 8001dc0:	e006      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x78a>
          }
          
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f91b 	bl	8002006 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f6ff ac37 	blt.w	8001650 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3758      	adds	r7, #88	; 0x58
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_PCD_EP_DB_Receive>:

static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	4613      	mov	r3, r2
 8001df8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07e      	beq.n	8001f02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	8b7b      	ldrh	r3, [r7, #26]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d306      	bcc.n	8001e46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	8b7b      	ldrh	r3, [r7, #26]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	619a      	str	r2, [r3, #24]
 8001e44:	e002      	b.n	8001e4c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d123      	bne.n	8001e9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	833b      	strh	r3, [r7, #24]
 8001e70:	8b3b      	ldrh	r3, [r7, #24]
 8001e72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e76:	833b      	strh	r3, [r7, #24]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	441a      	add	r2, r3
 8001e86:	8b3b      	ldrh	r3, [r7, #24]
 8001e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec0:	82fb      	strh	r3, [r7, #22]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ede:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ee6:	8b7b      	ldrh	r3, [r7, #26]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8087 	beq.w	8001ffc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6959      	ldr	r1, [r3, #20]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	891a      	ldrh	r2, [r3, #8]
 8001efa:	8b7b      	ldrh	r3, [r7, #26]
 8001efc:	f002 fdcb 	bl	8004a96 <USB_ReadPMA>
 8001f00:	e07c      	b.n	8001ffc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	3306      	adds	r3, #6
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	8b7b      	ldrh	r3, [r7, #26]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d306      	bcc.n	8001f44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	8b7b      	ldrh	r3, [r7, #26]
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	e002      	b.n	8001f4a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d123      	bne.n	8001f9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6c:	83fb      	strh	r3, [r7, #30]
 8001f6e:	8bfb      	ldrh	r3, [r7, #30]
 8001f70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f74:	83fb      	strh	r3, [r7, #30]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	441a      	add	r2, r3
 8001f84:	8bfb      	ldrh	r3, [r7, #30]
 8001f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d11f      	bne.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbe:	83bb      	strh	r3, [r7, #28]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	441a      	add	r2, r3
 8001fce:	8bbb      	ldrh	r3, [r7, #28]
 8001fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fe4:	8b7b      	ldrh	r3, [r7, #26]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6959      	ldr	r1, [r3, #20]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	895a      	ldrh	r2, [r3, #10]
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	f002 fd4d 	bl	8004a96 <USB_ReadPMA>
    }
  }

  return count;
 8001ffc:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_DB_Transmit>:

static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b0a4      	sub	sp, #144	; 0x90
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	4613      	mov	r3, r2
 8002012:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 81dd 	beq.w	80023da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3302      	adds	r3, #2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002054:	429a      	cmp	r2, r3
 8002056:	d907      	bls.n	8002068 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e002      	b.n	800206e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 80b9 	bne.w	80021ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d126      	bne.n	80020ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	4413      	add	r3, r2
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	011a      	lsls	r2, r3, #4
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	4413      	add	r3, r2
 80020a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	801a      	strh	r2, [r3, #0]
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	801a      	strh	r2, [r3, #0]
 80020cc:	e01a      	b.n	8002104 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d116      	bne.n	8002104 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	4413      	add	r3, r2
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	011a      	lsls	r2, r3, #4
 80020f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f6:	4413      	add	r3, r2
 80020f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d126      	bne.n	8002160 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	011a      	lsls	r2, r3, #4
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002144:	b29a      	uxth	r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002158:	b29a      	uxth	r2, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	e017      	b.n	8002190 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d113      	bne.n	8002190 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	4413      	add	r3, r2
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	011a      	lsls	r2, r3, #4
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	4413      	add	r3, r2
 8002184:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2200      	movs	r2, #0
 800218e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f002 ffa1 	bl	80050de <HAL_PCD_DataInStageCallback>

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 82fc 	beq.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	82fb      	strh	r3, [r7, #22]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	8afb      	ldrh	r3, [r7, #22]
 80021d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	8013      	strh	r3, [r2, #0]
 80021e8:	e2da      	b.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	441a      	add	r2, r3
 8002220:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800222c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002234:	b29b      	uxth	r3, r3
 8002236:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 82ae 	bne.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800224c:	441a      	add	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800225a:	441a      	add	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d30b      	bcc.n	8002284 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800227c:	1ad2      	subs	r2, r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	621a      	str	r2, [r3, #32]
 8002282:	e017      	b.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800228c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800229c:	e00a      	b.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d165      	bne.n	8002388 <HAL_PCD_EP_DB_Transmit+0x382>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d0:	4413      	add	r3, r2
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	011a      	lsls	r2, r3, #4
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	4413      	add	r3, r2
 80022de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	801a      	strh	r2, [r3, #0]
 80022f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f8:	2b3e      	cmp	r3, #62	; 0x3e
 80022fa:	d91d      	bls.n	8002338 <HAL_PCD_EP_DB_Transmit+0x332>
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	64bb      	str	r3, [r7, #72]	; 0x48
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_PCD_EP_DB_Transmit+0x310>
 8002310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002312:	3b01      	subs	r3, #1
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231e:	b29b      	uxth	r3, r3
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	b29b      	uxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002330:	b29a      	uxth	r2, r3
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	e044      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x350>
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234e:	b29a      	uxth	r2, r3
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e035      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	64bb      	str	r3, [r7, #72]	; 0x48
 800235e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_PCD_EP_DB_Transmit+0x36a>
 800236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236c:	3301      	adds	r3, #1
 800236e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29a      	uxth	r2, r3
 8002376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002378:	b29b      	uxth	r3, r3
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	b29b      	uxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b29a      	uxth	r2, r3
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	801a      	strh	r2, [r3, #0]
 8002386:	e01c      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d118      	bne.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a4:	4413      	add	r3, r2
 80023a6:	647b      	str	r3, [r7, #68]	; 0x44
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	011a      	lsls	r2, r3, #4
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	4413      	add	r3, r2
 80023b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
 80023b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, (uint16_t)len);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6959      	ldr	r1, [r3, #20]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	891a      	ldrh	r2, [r3, #8]
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f002 fb1a 	bl	8004a0c <USB_WritePMA>
 80023d8:	e1e2      	b.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	3306      	adds	r3, #6
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002402:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800240e:	429a      	cmp	r2, r3
 8002410:	d307      	bcc.n	8002422 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	e002      	b.n	8002428 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 80c0 	bne.w	80025b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_PCD_EP_DB_Transmit+0x482>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800244e:	4413      	add	r3, r2
 8002450:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	011a      	lsls	r2, r3, #4
 8002458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800245a:	4413      	add	r3, r2
 800245c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002460:	67bb      	str	r3, [r7, #120]	; 0x78
 8002462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246c:	b29a      	uxth	r2, r3
 800246e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002480:	b29a      	uxth	r2, r3
 8002482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	e01a      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d116      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	667b      	str	r3, [r7, #100]	; 0x64
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a4:	4413      	add	r3, r2
 80024a6:	667b      	str	r3, [r7, #100]	; 0x64
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	011a      	lsls	r2, r3, #4
 80024ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024b6:	663b      	str	r3, [r7, #96]	; 0x60
 80024b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ba:	2200      	movs	r2, #0
 80024bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	677b      	str	r3, [r7, #116]	; 0x74
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d12b      	bne.n	8002524 <HAL_PCD_EP_DB_Transmit+0x51e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e0:	4413      	add	r3, r2
 80024e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	4413      	add	r3, r2
 80024ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002502:	b29a      	uxth	r2, r3
 8002504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251a:	b29a      	uxth	r2, r3
 800251c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	e017      	b.n	8002554 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d113      	bne.n	8002554 <HAL_PCD_EP_DB_Transmit+0x54e>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253a:	4413      	add	r3, r2
 800253c:	677b      	str	r3, [r7, #116]	; 0x74
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	011a      	lsls	r2, r3, #4
 8002544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002546:	4413      	add	r3, r2
 8002548:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800254c:	673b      	str	r3, [r7, #112]	; 0x70
 800254e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f002 fdbf 	bl	80050de <HAL_PCD_DataInStageCallback>

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 811a 	bne.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	441a      	add	r2, r3
 8002598:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800259c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	8013      	strh	r3, [r2, #0]
 80025b0:	e0f6      	b.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d121      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	441a      	add	r2, r3
 80025e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 80ca 	bne.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002614:	441a      	add	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002622:	441a      	add	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d30b      	bcc.n	800264c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	621a      	str	r2, [r3, #32]
 800264a:	e017      	b.n	800267c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002664:	e00a      	b.n	800267c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	657b      	str	r3, [r7, #84]	; 0x54
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d165      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x750>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269e:	4413      	add	r3, r2
 80026a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	011a      	lsls	r2, r3, #4
 80026a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	2b3e      	cmp	r3, #62	; 0x3e
 80026c8:	d91d      	bls.n	8002706 <HAL_PCD_EP_DB_Transmit+0x700>
 80026ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80026de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e0:	3b01      	subs	r3, #1
 80026e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e041      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_PCD_EP_DB_Transmit+0x71e>
 800270e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800271c:	b29a      	uxth	r2, r3
 800271e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	e032      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	66bb      	str	r3, [r7, #104]	; 0x68
 800272c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_PCD_EP_DB_Transmit+0x738>
 8002738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273a:	3301      	adds	r3, #1
 800273c:	66bb      	str	r3, [r7, #104]	; 0x68
 800273e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29a      	uxth	r2, r3
 8002744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002746:	b29b      	uxth	r3, r3
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	b29b      	uxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b29a      	uxth	r2, r3
 8002750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e019      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	785b      	ldrb	r3, [r3, #1]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d115      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276c:	4413      	add	r3, r2
 800276e:	657b      	str	r3, [r7, #84]	; 0x54
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	011a      	lsls	r2, r3, #4
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	4413      	add	r3, r2
 800277a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800277e:	653b      	str	r3, [r7, #80]	; 0x50
 8002780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002784:	b29a      	uxth	r2, r3
 8002786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002788:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, (uint16_t)len);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6959      	ldr	r1, [r3, #20]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	895a      	ldrh	r2, [r3, #10]
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279a:	b29b      	uxth	r3, r3
 800279c:	f002 f936 	bl	8004a0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ba:	82bb      	strh	r3, [r7, #20]
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	f083 0310 	eor.w	r3, r3, #16
 80027c2:	82bb      	strh	r3, [r7, #20]
 80027c4:	8abb      	ldrh	r3, [r7, #20]
 80027c6:	f083 0320 	eor.w	r3, r3, #32
 80027ca:	82bb      	strh	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	8abb      	ldrh	r3, [r7, #20]
 80027dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3790      	adds	r7, #144	; 0x90
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_InitTick>:
uint32_t uwTickPrio = (1UL << __NVIC_PRIO_BITS); /* Invalid PRIO */

HAL_TickFreqTypeDef uwTickFreq = HAL_TICK_FREQ_DEFAULT; /* 1KHz */

__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_InitTick+0x54>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_InitTick+0x58>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe4c 	bl	80004b8 <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7fd fe14 	bl	8000464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_InitTick+0x5c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000000 	.word	0x20000000
 8002854:	20000008 	.word	0x20000008
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_IncTick>:

__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_IncTick+0x1c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_IncTick+0x20>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_IncTick+0x20>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000008 	.word	0x20000008
 800287c:	20000458 	.word	0x20000458

08002880 <HAL_Delay>:

__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7fd fde2 	bl	8000450 <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_Delay+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }
  while ((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7fd fdd2 	bl	8000450 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000008 	.word	0x20000008

080028c8 <USB_CoreInit>:

HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg){
 80028c8:	b084      	sub	sp, #16
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	f107 0014 	add.w	r0, r7, #20
 80028d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(USBx);
  UNUSED(cfg);
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	b004      	add	sp, #16
 80028e6:	4770      	bx	lr

080028e8 <USB_EnableGlobalInt>:

HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx){
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80028f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80028fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <USB_DisableGlobalInt>:

HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx){
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800291c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002920:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	b29b      	uxth	r3, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	4013      	ands	r3, r2
 8002934:	b29a      	uxth	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <USB_SetCurrentMode>:

HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode){
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <USB_DevInit>:

HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg){
 8002960:	b084      	sub	sp, #16
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	f107 0014 	add.w	r0, r7, #20
 800296e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	b004      	add	sp, #16
 800299e:	4770      	bx	lr

080029a0 <USB_ActivateEndpoint>:

HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 80029a0:	b480      	push	{r7}
 80029a2:	b09d      	sub	sp, #116	; 0x74
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d81f      	bhi.n	8002a12 <USB_ActivateEndpoint+0x72>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <USB_ActivateEndpoint+0x38>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	08002a1b 	.word	0x08002a1b
 80029e4:	080029f7 	.word	0x080029f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80029e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80029ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80029f4:	e012      	b.n	8002a1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80029f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80029fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80029fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002a02:	e00b      	b.n	8002a1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002a10:	e004      	b.n	8002a1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002a18:	e000      	b.n	8002a1c <USB_ActivateEndpoint+0x7c>
      break;
 8002a1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	441a      	add	r2, r3
 8002a6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7b1b      	ldrb	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 8178 	bne.w	8002d7e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8084 	beq.w	8002ba0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	011a      	lsls	r2, r3, #4
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	88db      	ldrh	r3, [r3, #6]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	827b      	strh	r3, [r7, #18]
 8002ada:	8a7b      	ldrh	r3, [r7, #18]
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <USB_ActivateEndpoint+0x17c>
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	823b      	strh	r3, [r7, #16]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	8a3b      	ldrh	r3, [r7, #16]
 8002b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	78db      	ldrb	r3, [r3, #3]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d020      	beq.n	8002b66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3a:	81bb      	strh	r3, [r7, #12]
 8002b3c:	89bb      	ldrh	r3, [r7, #12]
 8002b3e:	f083 0320 	eor.w	r3, r3, #32
 8002b42:	81bb      	strh	r3, [r7, #12]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	89bb      	ldrh	r3, [r7, #12]
 8002b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	8013      	strh	r3, [r2, #0]
 8002b64:	e2d5      	b.n	8003112 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	81fb      	strh	r3, [r7, #14]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]
 8002b9e:	e2b8      	b.n	8003112 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	4413      	add	r3, r2
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	011a      	lsls	r2, r3, #4
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	88db      	ldrh	r3, [r3, #6]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	4413      	add	r3, r2
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	011a      	lsls	r2, r3, #4
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c0e:	d91d      	bls.n	8002c4c <USB_ActivateEndpoint+0x2ac>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <USB_ActivateEndpoint+0x28a>
 8002c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c26:	3b01      	subs	r3, #1
 8002c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e026      	b.n	8002c9a <USB_ActivateEndpoint+0x2fa>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <USB_ActivateEndpoint+0x2ca>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	e017      	b.n	8002c9a <USB_ActivateEndpoint+0x2fa>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <USB_ActivateEndpoint+0x2e4>
 8002c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c80:	3301      	adds	r3, #1
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01b      	beq.n	8002cea <USB_ActivateEndpoint+0x34a>
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc8:	843b      	strh	r3, [r7, #32]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	8c3b      	ldrh	r3, [r7, #32]
 8002cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d124      	bne.n	8002d3c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	83bb      	strh	r3, [r7, #28]
 8002d0a:	8bbb      	ldrh	r3, [r7, #28]
 8002d0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d10:	83bb      	strh	r3, [r7, #28]
 8002d12:	8bbb      	ldrh	r3, [r7, #28]
 8002d14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d18:	83bb      	strh	r3, [r7, #28]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	441a      	add	r2, r3
 8002d24:	8bbb      	ldrh	r3, [r7, #28]
 8002d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	8013      	strh	r3, [r2, #0]
 8002d3a:	e1ea      	b.n	8003112 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	83fb      	strh	r3, [r7, #30]
 8002d54:	8bfb      	ldrh	r3, [r7, #30]
 8002d56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d5a:	83fb      	strh	r3, [r7, #30]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	8bfb      	ldrh	r3, [r7, #30]
 8002d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	8013      	strh	r3, [r2, #0]
 8002d7c:	e1c9      	b.n	8003112 <USB_ActivateEndpoint+0x772>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	78db      	ldrb	r3, [r3, #3]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d11e      	bne.n	8002dc4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8013      	strh	r3, [r2, #0]
 8002dc2:	e01d      	b.n	8002e00 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e10:	4413      	add	r3, r2
 8002e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	011a      	lsls	r2, r3, #4
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e22:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	891b      	ldrh	r3, [r3, #8]
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e44:	4413      	add	r3, r2
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	011a      	lsls	r2, r3, #4
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e56:	653b      	str	r3, [r7, #80]	; 0x50
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	895b      	ldrh	r3, [r3, #10]
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 8093 	bne.w	8002f98 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01b      	beq.n	8002ec6 <USB_ActivateEndpoint+0x526>
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002ed4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01b      	beq.n	8002f16 <USB_ActivateEndpoint+0x576>
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	441a      	add	r2, r3
 8002f00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f34:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f3c:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	441a      	add	r2, r3
 8002f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	8013      	strh	r3, [r2, #0]
 8002f96:	e0bc      	b.n	8003112 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002fa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01d      	beq.n	8002ff0 <USB_ActivateEndpoint+0x650>
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	441a      	add	r2, r3
 8002fd8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003000:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01d      	beq.n	8003048 <USB_ActivateEndpoint+0x6a8>
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	441a      	add	r2, r3
 8003030:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800303c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003044:	b29b      	uxth	r3, r3
 8003046:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	78db      	ldrb	r3, [r3, #3]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d024      	beq.n	800309a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003066:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800306a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800306e:	f083 0320 	eor.w	r3, r3, #32
 8003072:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003094:	b29b      	uxth	r3, r3
 8003096:	8013      	strh	r3, [r2, #0]
 8003098:	e01d      	b.n	80030d6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80030fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310e:	b29b      	uxth	r3, r3
 8003110:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003112:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003116:	4618      	mov	r0, r3
 8003118:	3774      	adds	r7, #116	; 0x74
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <USB_DeactivateEndpoint>:

HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8003120:	b480      	push	{r7}
 8003122:	b08d      	sub	sp, #52	; 0x34
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	7b1b      	ldrb	r3, [r3, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 808e 	bne.w	8003250 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d044      	beq.n	80031c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	81bb      	strh	r3, [r7, #12]
 800314a:	89bb      	ldrh	r3, [r7, #12]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01b      	beq.n	800318c <USB_DeactivateEndpoint+0x6c>
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	817b      	strh	r3, [r7, #10]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003188:	b29b      	uxth	r3, r3
 800318a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a2:	813b      	strh	r3, [r7, #8]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
 80031c4:	e192      	b.n	80034ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	827b      	strh	r3, [r7, #18]
 80031d4:	8a7b      	ldrh	r3, [r7, #18]
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01b      	beq.n	8003216 <USB_DeactivateEndpoint+0xf6>
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	823b      	strh	r3, [r7, #16]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	8a3b      	ldrh	r3, [r7, #16]
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	81fb      	strh	r3, [r7, #14]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324a:	b29b      	uxth	r3, r3
 800324c:	8013      	strh	r3, [r2, #0]
 800324e:	e14d      	b.n	80034ec <USB_DeactivateEndpoint+0x3cc>
  }
  
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 80a5 	bne.w	80033a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	843b      	strh	r3, [r7, #32]
 8003268:	8c3b      	ldrh	r3, [r7, #32]
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01b      	beq.n	80032aa <USB_DeactivateEndpoint+0x18a>
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003288:	83fb      	strh	r3, [r7, #30]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	441a      	add	r2, r3
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800329a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	83bb      	strh	r3, [r7, #28]
 80032b8:	8bbb      	ldrh	r3, [r7, #28]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01b      	beq.n	80032fa <USB_DeactivateEndpoint+0x1da>
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	837b      	strh	r3, [r7, #26]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	441a      	add	r2, r3
 80032e4:	8b7b      	ldrh	r3, [r7, #26]
 80032e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	833b      	strh	r3, [r7, #24]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	8b3b      	ldrh	r3, [r7, #24]
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	82fb      	strh	r3, [r7, #22]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	8afb      	ldrh	r3, [r7, #22]
 8003356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003380:	82bb      	strh	r3, [r7, #20]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	441a      	add	r2, r3
 800338c:	8abb      	ldrh	r3, [r7, #20]
 800338e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339e:	b29b      	uxth	r3, r3
 80033a0:	8013      	strh	r3, [r2, #0]
 80033a2:	e0a3      	b.n	80034ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80033b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <USB_DeactivateEndpoint+0x2d4>
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003402:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <USB_DeactivateEndpoint+0x324>
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003422:	853b      	strh	r3, [r7, #40]	; 0x28
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003440:	b29b      	uxth	r3, r3
 8003442:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	b29b      	uxth	r3, r3
 800347a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003492:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3734      	adds	r7, #52	; 0x34
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <USB_EPStartXfer>:

HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b0c2      	sub	sp, #264	; 0x108
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	6018      	str	r0, [r3, #0]
 8003502:	463b      	mov	r3, r7
 8003504:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003506:	463b      	mov	r3, r7
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 8545 	bne.w	8003f9c <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003512:	463b      	mov	r3, r7
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	463b      	mov	r3, r7
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	429a      	cmp	r2, r3
 8003520:	d905      	bls.n	800352e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003522:	463b      	mov	r3, r7
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800352c:	e004      	b.n	8003538 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800352e:	463b      	mov	r3, r7
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003538:	463b      	mov	r3, r7
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	7b1b      	ldrb	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d128      	bne.n	8003594 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003542:	463b      	mov	r3, r7
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6959      	ldr	r1, [r3, #20]
 8003548:	463b      	mov	r3, r7
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	88da      	ldrh	r2, [r3, #6]
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003552:	b29b      	uxth	r3, r3
 8003554:	1d38      	adds	r0, r7, #4
 8003556:	6800      	ldr	r0, [r0, #0]
 8003558:	f001 fa58 	bl	8004a0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4413      	add	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	463b      	mov	r3, r7
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	011a      	lsls	r2, r3, #4
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	f000 bcdb 	b.w	8003f4a <USB_EPStartXfer+0xa52>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003594:	463b      	mov	r3, r7
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	78db      	ldrb	r3, [r3, #3]
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 836f 	bne.w	8003c7e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80035a0:	463b      	mov	r3, r7
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	463b      	mov	r3, r7
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f240 8313 	bls.w	8003bd8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	463b      	mov	r3, r7
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	463b      	mov	r3, r7
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80035ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80035f6:	463b      	mov	r3, r7
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003600:	1ad2      	subs	r2, r2, r3
 8003602:	463b      	mov	r3, r7
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	463b      	mov	r3, r7
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 816d 	beq.w	80038fe <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
 800362a:	463b      	mov	r3, r7
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d16e      	bne.n	8003712 <USB_EPStartXfer+0x21a>
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	4413      	add	r3, r2
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	463b      	mov	r3, r7
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	011a      	lsls	r2, r3, #4
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	4413      	add	r3, r2
 8003658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003668:	b29a      	uxth	r2, r3
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003672:	2b3e      	cmp	r3, #62	; 0x3e
 8003674:	d921      	bls.n	80036ba <USB_EPStartXfer+0x1c2>
 8003676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <USB_EPStartXfer+0x19e>
 800368c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003690:	3b01      	subs	r3, #1
 8003692:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29a      	uxth	r2, r3
 800369c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	e047      	b.n	800374a <USB_EPStartXfer+0x252>
 80036ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <USB_EPStartXfer+0x1e0>
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	e038      	b.n	800374a <USB_EPStartXfer+0x252>
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <USB_EPStartXfer+0x200>
 80036ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036f2:	3301      	adds	r3, #1
 80036f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003702:	b29b      	uxth	r3, r3
 8003704:	029b      	lsls	r3, r3, #10
 8003706:	b29b      	uxth	r3, r3
 8003708:	4313      	orrs	r3, r2
 800370a:	b29a      	uxth	r2, r3
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	e01b      	b.n	800374a <USB_EPStartXfer+0x252>
 8003712:	463b      	mov	r3, r7
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d116      	bne.n	800374a <USB_EPStartXfer+0x252>
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	4413      	add	r3, r2
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
 800372e:	463b      	mov	r3, r7
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	011a      	lsls	r2, r3, #4
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	4413      	add	r3, r2
 800373a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003744:	b29a      	uxth	r2, r3
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800374a:	463b      	mov	r3, r7
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	895b      	ldrh	r3, [r3, #10]
 8003750:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003754:	463b      	mov	r3, r7
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6959      	ldr	r1, [r3, #20]
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800375e:	b29b      	uxth	r3, r3
 8003760:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003764:	1d38      	adds	r0, r7, #4
 8003766:	6800      	ldr	r0, [r0, #0]
 8003768:	f001 f950 	bl	8004a0c <USB_WritePMA>
            ep->xfer_buff += len;
 800376c:	463b      	mov	r3, r7
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003776:	441a      	add	r2, r3
 8003778:	463b      	mov	r3, r7
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800377e:	463b      	mov	r3, r7
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	463b      	mov	r3, r7
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d909      	bls.n	80037a2 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800378e:	463b      	mov	r3, r7
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003798:	1ad2      	subs	r2, r2, r3
 800379a:	463b      	mov	r3, r7
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	621a      	str	r2, [r3, #32]
 80037a0:	e008      	b.n	80037b4 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80037a2:	463b      	mov	r3, r7
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80037ac:	463b      	mov	r3, r7
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037b4:	463b      	mov	r3, r7
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d16e      	bne.n	800389c <USB_EPStartXfer+0x3a4>
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	463b      	mov	r3, r7
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	011a      	lsls	r2, r3, #4
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4413      	add	r3, r2
 80037e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037fc:	2b3e      	cmp	r3, #62	; 0x3e
 80037fe:	d921      	bls.n	8003844 <USB_EPStartXfer+0x34c>
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800380a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <USB_EPStartXfer+0x328>
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381a:	3b01      	subs	r3, #1
 800381c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29a      	uxth	r2, r3
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382a:	b29b      	uxth	r3, r3
 800382c:	029b      	lsls	r3, r3, #10
 800382e:	b29b      	uxth	r3, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383c:	b29a      	uxth	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	801a      	strh	r2, [r3, #0]
 8003842:	e04a      	b.n	80038da <USB_EPStartXfer+0x3e2>
 8003844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <USB_EPStartXfer+0x36a>
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385a:	b29a      	uxth	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e03b      	b.n	80038da <USB_EPStartXfer+0x3e2>
 8003862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800386c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <USB_EPStartXfer+0x38a>
 8003878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387c:	3301      	adds	r3, #1
 800387e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29a      	uxth	r2, r3
 8003888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388c:	b29b      	uxth	r3, r3
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	b29b      	uxth	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b29a      	uxth	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	e01e      	b.n	80038da <USB_EPStartXfer+0x3e2>
 800389c:	463b      	mov	r3, r7
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d119      	bne.n	80038da <USB_EPStartXfer+0x3e2>
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	4413      	add	r3, r2
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	463b      	mov	r3, r7
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	011a      	lsls	r2, r3, #4
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80038da:	463b      	mov	r3, r7
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	891b      	ldrh	r3, [r3, #8]
 80038e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038e4:	463b      	mov	r3, r7
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6959      	ldr	r1, [r3, #20]
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80038f4:	1d38      	adds	r0, r7, #4
 80038f6:	6800      	ldr	r0, [r0, #0]
 80038f8:	f001 f888 	bl	8004a0c <USB_WritePMA>
 80038fc:	e325      	b.n	8003f4a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038fe:	463b      	mov	r3, r7
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d16e      	bne.n	80039e6 <USB_EPStartXfer+0x4ee>
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003916:	b29b      	uxth	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391c:	4413      	add	r3, r2
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003920:	463b      	mov	r3, r7
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	011a      	lsls	r2, r3, #4
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	4413      	add	r3, r2
 800392c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
 8003932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393c:	b29a      	uxth	r2, r3
 800393e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003946:	2b3e      	cmp	r3, #62	; 0x3e
 8003948:	d921      	bls.n	800398e <USB_EPStartXfer+0x496>
 800394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <USB_EPStartXfer+0x472>
 8003960:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003964:	3b01      	subs	r3, #1
 8003966:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800396a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29a      	uxth	r2, r3
 8003970:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003974:	b29b      	uxth	r3, r3
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	b29b      	uxth	r3, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003986:	b29a      	uxth	r2, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e04a      	b.n	8003a24 <USB_EPStartXfer+0x52c>
 800398e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <USB_EPStartXfer+0x4b4>
 8003996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a8:	801a      	strh	r2, [r3, #0]
 80039aa:	e03b      	b.n	8003a24 <USB_EPStartXfer+0x52c>
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <USB_EPStartXfer+0x4d4>
 80039c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039c6:	3301      	adds	r3, #1
 80039c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	029b      	lsls	r3, r3, #10
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	e01e      	b.n	8003a24 <USB_EPStartXfer+0x52c>
 80039e6:	463b      	mov	r3, r7
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	785b      	ldrb	r3, [r3, #1]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d119      	bne.n	8003a24 <USB_EPStartXfer+0x52c>
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	653b      	str	r3, [r7, #80]	; 0x50
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	4413      	add	r3, r2
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	463b      	mov	r3, r7
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	011a      	lsls	r2, r3, #4
 8003a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a12:	4413      	add	r3, r2
 8003a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a24:	463b      	mov	r3, r7
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	891b      	ldrh	r3, [r3, #8]
 8003a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a2e:	463b      	mov	r3, r7
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6959      	ldr	r1, [r3, #20]
 8003a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003a3e:	1d38      	adds	r0, r7, #4
 8003a40:	6800      	ldr	r0, [r0, #0]
 8003a42:	f000 ffe3 	bl	8004a0c <USB_WritePMA>
            ep->xfer_buff += len;
 8003a46:	463b      	mov	r3, r7
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a50:	441a      	add	r2, r3
 8003a52:	463b      	mov	r3, r7
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a58:	463b      	mov	r3, r7
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	463b      	mov	r3, r7
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d909      	bls.n	8003a7c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8003a68:	463b      	mov	r3, r7
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a1a      	ldr	r2, [r3, #32]
 8003a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	463b      	mov	r3, r7
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	621a      	str	r2, [r3, #32]
 8003a7a:	e008      	b.n	8003a8e <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003a86:	463b      	mov	r3, r7
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	643b      	str	r3, [r7, #64]	; 0x40
 8003a94:	463b      	mov	r3, r7
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d16e      	bne.n	8003b7c <USB_EPStartXfer+0x684>
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	4413      	add	r3, r2
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	011a      	lsls	r2, r3, #4
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ade:	d921      	bls.n	8003b24 <USB_EPStartXfer+0x62c>
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <USB_EPStartXfer+0x608>
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	029b      	lsls	r3, r3, #10
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	e047      	b.n	8003bb4 <USB_EPStartXfer+0x6bc>
 8003b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <USB_EPStartXfer+0x64a>
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e038      	b.n	8003bb4 <USB_EPStartXfer+0x6bc>
 8003b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <USB_EPStartXfer+0x66a>
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	029b      	lsls	r3, r3, #10
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e01b      	b.n	8003bb4 <USB_EPStartXfer+0x6bc>
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d116      	bne.n	8003bb4 <USB_EPStartXfer+0x6bc>
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b94:	4413      	add	r3, r2
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40
 8003b98:	463b      	mov	r3, r7
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	011a      	lsls	r2, r3, #4
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	895b      	ldrh	r3, [r3, #10]
 8003bba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6959      	ldr	r1, [r3, #20]
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003bce:	1d38      	adds	r0, r7, #4
 8003bd0:	6800      	ldr	r0, [r0, #0]
 8003bd2:	f000 ff1b 	bl	8004a0c <USB_WritePMA>
 8003bd6:	e1b8      	b.n	8003f4a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003bd8:	463b      	mov	r3, r7
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	463b      	mov	r3, r7
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	463b      	mov	r3, r7
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3a:	4413      	add	r3, r2
 8003c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c3e:	463b      	mov	r3, r7
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	011a      	lsls	r2, r3, #4
 8003c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c48:	4413      	add	r3, r2
 8003c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	891b      	ldrh	r3, [r3, #8]
 8003c60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c64:	463b      	mov	r3, r7
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6959      	ldr	r1, [r3, #20]
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003c74:	1d38      	adds	r0, r7, #4
 8003c76:	6800      	ldr	r0, [r0, #0]
 8003c78:	f000 fec8 	bl	8004a0c <USB_WritePMA>
 8003c7c:	e165      	b.n	8003f4a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003c7e:	463b      	mov	r3, r7
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c88:	1ad2      	subs	r2, r2, r3
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	463b      	mov	r3, r7
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80a5 	beq.w	8003df6 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d16e      	bne.n	8003d9a <USB_EPStartXfer+0x8a2>
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd0:	4413      	add	r3, r2
 8003cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	011a      	lsls	r2, r3, #4
 8003cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cde:	4413      	add	r3, r2
 8003ce0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003cfc:	d921      	bls.n	8003d42 <USB_EPStartXfer+0x84a>
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <USB_EPStartXfer+0x826>
 8003d14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	e047      	b.n	8003dd2 <USB_EPStartXfer+0x8da>
 8003d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <USB_EPStartXfer+0x868>
 8003d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e038      	b.n	8003dd2 <USB_EPStartXfer+0x8da>
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <USB_EPStartXfer+0x888>
 8003d76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	029b      	lsls	r3, r3, #10
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	e01b      	b.n	8003dd2 <USB_EPStartXfer+0x8da>
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d116      	bne.n	8003dd2 <USB_EPStartXfer+0x8da>
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db2:	4413      	add	r3, r2
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
 8003db6:	463b      	mov	r3, r7
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	011a      	lsls	r2, r3, #4
 8003dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	895b      	ldrh	r3, [r3, #10]
 8003dd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ddc:	463b      	mov	r3, r7
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6959      	ldr	r1, [r3, #20]
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003dec:	1d38      	adds	r0, r7, #4
 8003dee:	6800      	ldr	r0, [r0, #0]
 8003df0:	f000 fe0c 	bl	8004a0c <USB_WritePMA>
 8003df4:	e0a9      	b.n	8003f4a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003df6:	463b      	mov	r3, r7
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d16e      	bne.n	8003ede <USB_EPStartXfer+0x9e6>
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e14:	4413      	add	r3, r2
 8003e16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e18:	463b      	mov	r3, r7
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	011a      	lsls	r2, r3, #4
 8003e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e22:	4413      	add	r3, r2
 8003e24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e40:	d921      	bls.n	8003e86 <USB_EPStartXfer+0x98e>
 8003e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <USB_EPStartXfer+0x96a>
 8003e58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	e050      	b.n	8003f28 <USB_EPStartXfer+0xa30>
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <USB_EPStartXfer+0x9ac>
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	e041      	b.n	8003f28 <USB_EPStartXfer+0xa30>
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <USB_EPStartXfer+0x9cc>
 8003eba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	029b      	lsls	r3, r3, #10
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	e024      	b.n	8003f28 <USB_EPStartXfer+0xa30>
 8003ede:	463b      	mov	r3, r7
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d11f      	bne.n	8003f28 <USB_EPStartXfer+0xa30>
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ef0:	1d3b      	adds	r3, r7, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f00:	4413      	add	r3, r2
 8003f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f06:	463b      	mov	r3, r7
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	011a      	lsls	r2, r3, #4
 8003f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f12:	4413      	add	r3, r2
 8003f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f28:	463b      	mov	r3, r7
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	891b      	ldrh	r3, [r3, #8]
 8003f2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f32:	463b      	mov	r3, r7
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6959      	ldr	r1, [r3, #20]
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f42:	1d38      	adds	r0, r7, #4
 8003f44:	6800      	ldr	r0, [r0, #0]
 8003f46:	f000 fd61 	bl	8004a0c <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	463b      	mov	r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	f083 0310 	eor.w	r3, r3, #16
 8003f6c:	817b      	strh	r3, [r7, #10]
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	f083 0320 	eor.w	r3, r3, #32
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	897b      	ldrh	r3, [r7, #10]
 8003f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8013      	strh	r3, [r2, #0]
 8003f9a:	e3f3      	b.n	8004784 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	7b1b      	ldrb	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 809c 	bne.w	80040e0 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003fa8:	463b      	mov	r3, r7
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	463b      	mov	r3, r7
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d90e      	bls.n	8003fd6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8003fb8:	463b      	mov	r3, r7
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8003fc2:	463b      	mov	r3, r7
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	463b      	mov	r3, r7
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	619a      	str	r2, [r3, #24]
 8003fd4:	e008      	b.n	8003fe8 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004000:	4413      	add	r3, r2
 8004002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004006:	463b      	mov	r3, r7
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	011a      	lsls	r2, r3, #4
 800400e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004012:	4413      	add	r3, r2
 8004014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800401c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004028:	b29a      	uxth	r2, r3
 800402a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004034:	2b3e      	cmp	r3, #62	; 0x3e
 8004036:	d923      	bls.n	8004080 <USB_EPStartXfer+0xb88>
 8004038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <USB_EPStartXfer+0xb60>
 800404e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004052:	3b01      	subs	r3, #1
 8004054:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29a      	uxth	r2, r3
 8004060:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004064:	b29b      	uxth	r3, r3
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	b29b      	uxth	r3, r3
 800406a:	4313      	orrs	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004076:	b29a      	uxth	r2, r3
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	e353      	b.n	8004728 <USB_EPStartXfer+0x1230>
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10c      	bne.n	80040a2 <USB_EPStartXfer+0xbaa>
 8004088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004098:	b29a      	uxth	r2, r3
 800409a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	e342      	b.n	8004728 <USB_EPStartXfer+0x1230>
 80040a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <USB_EPStartXfer+0xbca>
 80040b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040bc:	3301      	adds	r3, #1
 80040be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	029b      	lsls	r3, r3, #10
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4313      	orrs	r3, r2
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	e323      	b.n	8004728 <USB_EPStartXfer+0x1230>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80040e0:	463b      	mov	r3, r7
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	78db      	ldrb	r3, [r3, #3]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	f040 81a9 	bne.w	800443e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80040ec:	463b      	mov	r3, r7
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8082 	bne.w	80041fc <USB_EPStartXfer+0xd04>
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004110:	4413      	add	r3, r2
 8004112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004116:	463b      	mov	r3, r7
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004122:	4413      	add	r3, r2
 8004124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800412c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004138:	b29a      	uxth	r2, r3
 800413a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	463b      	mov	r3, r7
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b3e      	cmp	r3, #62	; 0x3e
 8004148:	d925      	bls.n	8004196 <USB_EPStartXfer+0xc9e>
 800414a:	463b      	mov	r3, r7
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004156:	463b      	mov	r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <USB_EPStartXfer+0xc76>
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	3b01      	subs	r3, #1
 800416a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800416e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29a      	uxth	r2, r3
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	b29b      	uxth	r3, r3
 800417c:	029b      	lsls	r3, r3, #10
 800417e:	b29b      	uxth	r3, r3
 8004180:	4313      	orrs	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	e058      	b.n	8004248 <USB_EPStartXfer+0xd50>
 8004196:	463b      	mov	r3, r7
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10c      	bne.n	80041ba <USB_EPStartXfer+0xcc2>
 80041a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041b6:	801a      	strh	r2, [r3, #0]
 80041b8:	e046      	b.n	8004248 <USB_EPStartXfer+0xd50>
 80041ba:	463b      	mov	r3, r7
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041c6:	463b      	mov	r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <USB_EPStartXfer+0xce6>
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d8:	3301      	adds	r3, #1
 80041da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	e025      	b.n	8004248 <USB_EPStartXfer+0xd50>
 80041fc:	463b      	mov	r3, r7
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d120      	bne.n	8004248 <USB_EPStartXfer+0xd50>
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800421e:	4413      	add	r3, r2
 8004220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	011a      	lsls	r2, r3, #4
 800422c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004230:	4413      	add	r3, r2
 8004232:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800423a:	463b      	mov	r3, r7
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	b29a      	uxth	r2, r3
 8004242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004250:	463b      	mov	r3, r7
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 8082 	bne.w	8004360 <USB_EPStartXfer+0xe68>
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004274:	4413      	add	r3, r2
 8004276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800427a:	463b      	mov	r3, r7
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	011a      	lsls	r2, r3, #4
 8004282:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004286:	4413      	add	r3, r2
 8004288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800428c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800429c:	b29a      	uxth	r2, r3
 800429e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	463b      	mov	r3, r7
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b3e      	cmp	r3, #62	; 0x3e
 80042ac:	d925      	bls.n	80042fa <USB_EPStartXfer+0xe02>
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042ba:	463b      	mov	r3, r7
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <USB_EPStartXfer+0xdda>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	3b01      	subs	r3, #1
 80042ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e054      	b.n	80043a4 <USB_EPStartXfer+0xeac>
 80042fa:	463b      	mov	r3, r7
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10c      	bne.n	800431e <USB_EPStartXfer+0xe26>
 8004304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004314:	b29a      	uxth	r2, r3
 8004316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	e042      	b.n	80043a4 <USB_EPStartXfer+0xeac>
 800431e:	463b      	mov	r3, r7
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800432a:	463b      	mov	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <USB_EPStartXfer+0xe4a>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	3301      	adds	r3, #1
 800433e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29a      	uxth	r2, r3
 800434a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434e:	b29b      	uxth	r3, r3
 8004350:	029b      	lsls	r3, r3, #10
 8004352:	b29b      	uxth	r3, r3
 8004354:	4313      	orrs	r3, r2
 8004356:	b29a      	uxth	r2, r3
 8004358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e021      	b.n	80043a4 <USB_EPStartXfer+0xeac>
 8004360:	463b      	mov	r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d11c      	bne.n	80043a4 <USB_EPStartXfer+0xeac>
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800437a:	4413      	add	r3, r2
 800437c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004380:	463b      	mov	r3, r7
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	011a      	lsls	r2, r3, #4
 8004388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800438c:	4413      	add	r3, r2
 800438e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004396:	463b      	mov	r3, r7
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	b29a      	uxth	r2, r3
 800439e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80043a4:	463b      	mov	r3, r7
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 81bc 	beq.w	8004728 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	463b      	mov	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80043c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <USB_EPStartXfer+0xee4>
 80043d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80043dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80043e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 819f 	bne.w	8004728 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80043ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 8198 	bne.w	8004728 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	463b      	mov	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004434:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]
 800443c:	e174      	b.n	8004728 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800443e:	463b      	mov	r3, r7
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	78db      	ldrb	r3, [r3, #3]
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 816d 	bne.w	8004724 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	463b      	mov	r3, r7
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d90e      	bls.n	8004478 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800445a:	463b      	mov	r3, r7
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004464:	463b      	mov	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	463b      	mov	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	619a      	str	r2, [r3, #24]
 8004476:	e008      	b.n	800448a <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8004478:	463b      	mov	r3, r7
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004482:	463b      	mov	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d17b      	bne.n	800458c <USB_EPStartXfer+0x1094>
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044ac:	4413      	add	r3, r2
 80044ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044b2:	463b      	mov	r3, r7
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044be:	4413      	add	r3, r2
 80044c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e0:	2b3e      	cmp	r3, #62	; 0x3e
 80044e2:	d923      	bls.n	800452c <USB_EPStartXfer+0x1034>
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80044ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <USB_EPStartXfer+0x100c>
 80044fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fe:	3b01      	subs	r3, #1
 8004500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004510:	b29b      	uxth	r3, r3
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	b29b      	uxth	r3, r3
 8004516:	4313      	orrs	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29a      	uxth	r2, r3
 8004524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e054      	b.n	80045d6 <USB_EPStartXfer+0x10de>
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10c      	bne.n	800454e <USB_EPStartXfer+0x1056>
 8004534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004544:	b29a      	uxth	r2, r3
 8004546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e043      	b.n	80045d6 <USB_EPStartXfer+0x10de>
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <USB_EPStartXfer+0x1076>
 8004564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004568:	3301      	adds	r3, #1
 800456a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800456e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29a      	uxth	r2, r3
 8004576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457a:	b29b      	uxth	r3, r3
 800457c:	029b      	lsls	r3, r3, #10
 800457e:	b29b      	uxth	r3, r3
 8004580:	4313      	orrs	r3, r2
 8004582:	b29a      	uxth	r2, r3
 8004584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e024      	b.n	80045d6 <USB_EPStartXfer+0x10de>
 800458c:	463b      	mov	r3, r7
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d11f      	bne.n	80045d6 <USB_EPStartXfer+0x10de>
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ae:	4413      	add	r3, r2
 80045b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	011a      	lsls	r2, r3, #4
 80045bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045de:	463b      	mov	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d17b      	bne.n	80046e0 <USB_EPStartXfer+0x11e8>
 80045e8:	1d3b      	adds	r3, r7, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004600:	4413      	add	r3, r2
 8004602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004606:	463b      	mov	r3, r7
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	011a      	lsls	r2, r3, #4
 800460e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004612:	4413      	add	r3, r2
 8004614:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800461c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004628:	b29a      	uxth	r2, r3
 800462a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	2b3e      	cmp	r3, #62	; 0x3e
 8004636:	d923      	bls.n	8004680 <USB_EPStartXfer+0x1188>
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <USB_EPStartXfer+0x1160>
 800464e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004652:	3b01      	subs	r3, #1
 8004654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004658:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29a      	uxth	r2, r3
 8004660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004664:	b29b      	uxth	r3, r3
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	b29b      	uxth	r3, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	b29b      	uxth	r3, r3
 800466e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004676:	b29a      	uxth	r2, r3
 8004678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e053      	b.n	8004728 <USB_EPStartXfer+0x1230>
 8004680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10c      	bne.n	80046a2 <USB_EPStartXfer+0x11aa>
 8004688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004698:	b29a      	uxth	r2, r3
 800469a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e042      	b.n	8004728 <USB_EPStartXfer+0x1230>
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <USB_EPStartXfer+0x11ca>
 80046b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046bc:	3301      	adds	r3, #1
 80046be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	029b      	lsls	r3, r3, #10
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	4313      	orrs	r3, r2
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	e023      	b.n	8004728 <USB_EPStartXfer+0x1230>
 80046e0:	463b      	mov	r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d11e      	bne.n	8004728 <USB_EPStartXfer+0x1230>
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046fa:	4413      	add	r3, r2
 80046fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	011a      	lsls	r2, r3, #4
 8004708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800470c:	4413      	add	r3, r2
 800470e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800471a:	b29a      	uxth	r2, r3
 800471c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e001      	b.n	8004728 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e02e      	b.n	8004786 <USB_EPStartXfer+0x128e>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	463b      	mov	r3, r7
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004746:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800474a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800474e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004752:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004756:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800475a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	463b      	mov	r3, r7
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <USB_EPSetStall>:

HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d020      	beq.n	80047e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b8:	81bb      	strh	r3, [r7, #12]
 80047ba:	89bb      	ldrh	r3, [r7, #12]
 80047bc:	f083 0310 	eor.w	r3, r3, #16
 80047c0:	81bb      	strh	r3, [r7, #12]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	89bb      	ldrh	r3, [r7, #12]
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
 80047e2:	e01f      	b.n	8004824 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	81fb      	strh	r3, [r7, #14]
 80047fc:	89fb      	ldrh	r3, [r7, #14]
 80047fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004802:	81fb      	strh	r3, [r7, #14]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <USB_EPClearStall>:

HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	7b1b      	ldrb	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 809d 	bne.w	800497e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	785b      	ldrb	r3, [r3, #1]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d04c      	beq.n	80048e6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	823b      	strh	r3, [r7, #16]
 800485a:	8a3b      	ldrh	r3, [r7, #16]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <USB_EPClearStall+0x6c>
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	81fb      	strh	r3, [r7, #14]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	78db      	ldrb	r3, [r3, #3]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d06c      	beq.n	800497e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ba:	81bb      	strh	r3, [r7, #12]
 80048bc:	89bb      	ldrh	r3, [r7, #12]
 80048be:	f083 0320 	eor.w	r3, r3, #32
 80048c2:	81bb      	strh	r3, [r7, #12]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	89bb      	ldrh	r3, [r7, #12]
 80048d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]
 80048e4:	e04b      	b.n	800497e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	82fb      	strh	r3, [r7, #22]
 80048f4:	8afb      	ldrh	r3, [r7, #22]
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01b      	beq.n	8004936 <USB_EPClearStall+0x106>
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	82bb      	strh	r3, [r7, #20]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	8abb      	ldrh	r3, [r7, #20]
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	827b      	strh	r3, [r7, #18]
 800494e:	8a7b      	ldrh	r3, [r7, #18]
 8004950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004954:	827b      	strh	r3, [r7, #18]
 8004956:	8a7b      	ldrh	r3, [r7, #18]
 8004958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800495c:	827b      	strh	r3, [r7, #18]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <USB_SetDevAddress>:

HAL_StatusTypeDef USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address){
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d103      	bne.n	80049a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <USB_DevConnect>:

HAL_StatusTypeDef USB_DevConnect(USB_TypeDef *USBx){
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <USB_DevDisconnect>:

HAL_StatusTypeDef USB_DevDisconnect(USB_TypeDef *USBx){
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <USB_ReadInterrupts>:
//
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx){
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <USB_EP0_OutStart>:

HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <USB_WritePMA>:

void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes){
 8004a0c:	b480      	push	{r7}
 8004a0e:	b08b      	sub	sp, #44	; 0x2c
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	80fb      	strh	r3, [r7, #6]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a22:	88bb      	ldrh	r3, [r7, #4]
 8004a24:	3301      	adds	r3, #1
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  volatile uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61fb      	str	r3, [r7, #28]

  pdwVal = (volatile uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	005a      	lsls	r2, r3, #1
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	e01e      	b.n	8004a84 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	b21a      	sxth	r2, r3
 8004a56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	b21b      	sxth	r3, r3
 8004a5e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	8a7a      	ldrh	r2, [r7, #18]
 8004a64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	623b      	str	r3, [r7, #32]
    pdwVal++;
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	3302      	adds	r3, #2
 8004a70:	623b      	str	r3, [r7, #32]
    pBuf++;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3301      	adds	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	3b01      	subs	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1dd      	bne.n	8004a46 <USB_WritePMA+0x3a>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	372c      	adds	r7, #44	; 0x2c
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <USB_ReadPMA>:

void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b08b      	sub	sp, #44	; 0x2c
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	80fb      	strh	r3, [r7, #6]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004aac:	88bb      	ldrh	r3, [r7, #4]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  volatile uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61fb      	str	r3, [r7, #28]

  pdwVal = (volatile uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	005a      	lsls	r2, r3, #1
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	e01b      	b.n	8004b08 <USB_ReadPMA+0x72>
  {
    RdVal = *(volatile uint16_t *)pdwVal;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	3302      	adds	r3, #2
 8004adc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
    pdwVal++;
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	3302      	adds	r3, #2
 8004b00:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	3b01      	subs	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e0      	bne.n	8004ad0 <USB_ReadPMA+0x3a>
  }

  if ((wNBytes % 2U) != 0U)
 8004b0e:	88bb      	ldrh	r3, [r7, #4]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	701a      	strb	r2, [r3, #0]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	372c      	adds	r7, #44	; 0x2c
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <USBD_Init>:

USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL){
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <USBD_Init+0x18>
    return USBD_FAIL;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e01a      	b.n	8004b82 <USBD_Init+0x4e>
  }
  /* Unlink previous class*/
  if (pdev->pClass != NULL){
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <USBD_Init+0x2a>
    pdev->pClass = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }
  /* Assign USBD Descriptors */
  if (pdesc != NULL){
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <USBD_Init+0x38>
    pdev->pDesc = pdesc;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }
  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	79fa      	ldrb	r2, [r7, #7]
 8004b78:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fb60 	bl	8005240 <USBD_LL_Init>
  return USBD_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <USBD_RegisterClass>:

USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass){
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL){
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <USBD_RegisterClass+0x22>
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	e001      	b.n	8004bb0 <USBD_RegisterClass+0x26>
  }
  else{
    status = USBD_FAIL;
 8004bac:	2302      	movs	r3, #2
 8004bae:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <USBD_Start>:

USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb83 	bl	80052d0 <USBD_LL_Start>
  return USBD_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <USBD_RunTestMode>:

USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev){
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);
  return USBD_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	73fb      	strb	r3, [r7, #15]
  if (pdev->pClass != NULL){
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <USBD_SetClassConfig+0x34>
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <USBD_ClrClassConfig>:

USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
  return USBD_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <USBD_LL_SetupStage>:

USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup){
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f99c 	bl	8005f9c <USBD_ParseSetupRequest>
  pdev->ep0_state = USBD_EP0_SETUP;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU){
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d016      	beq.n	8004cb6 <USBD_LL_SetupStage+0x6a>
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d81c      	bhi.n	8004cc6 <USBD_LL_SetupStage+0x7a>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <USBD_LL_SetupStage+0x4a>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d008      	beq.n	8004ca6 <USBD_LL_SetupStage+0x5a>
 8004c94:	e017      	b.n	8004cc6 <USBD_LL_SetupStage+0x7a>
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fc7e 	bl	80055a0 <USBD_StdDevReq>
      break;
 8004ca4:	e01a      	b.n	8004cdc <USBD_LL_SetupStage+0x90>
    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fce0 	bl	8005674 <USBD_StdItfReq>
      break;
 8004cb4:	e012      	b.n	8004cdc <USBD_LL_SetupStage+0x90>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fd20 	bl	8005704 <USBD_StdEPReq>
      break;
 8004cc4:	e00a      	b.n	8004cdc <USBD_LL_SetupStage+0x90>
    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ccc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fb5b 	bl	8005390 <USBD_LL_StallEP>
      break;
 8004cda:	bf00      	nop
  }
  return USBD_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <USBD_LL_DataOutStage>:

USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata){
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  if (epnum == 0U){
 8004cf4:	7afb      	ldrb	r3, [r7, #11]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d14b      	bne.n	8004d92 <USBD_LL_DataOutStage+0xac>
    pep = &pdev->ep_out[0];
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004d00:	617b      	str	r3, [r7, #20]
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d134      	bne.n	8004d76 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d919      	bls.n	8004d4c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	1ad2      	subs	r2, r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	60da      	str	r2, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d203      	bcs.n	8004d3a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	e002      	b.n	8004d40 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f001 fc49 	bl	80065dc <USBD_CtlContinueRx>
 8004d4a:	e038      	b.n	8004dbe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d105      	bne.n	8004d6e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f001 fc46 	bl	8006600 <USBD_CtlSendStatus>
 8004d74:	e023      	b.n	8004dbe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d7c:	2b05      	cmp	r3, #5
 8004d7e:	d11e      	bne.n	8004dbe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004d88:	2100      	movs	r1, #0
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb00 	bl	8005390 <USBD_LL_StallEP>
 8004d90:	e015      	b.n	8004dbe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED)){
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d108      	bne.n	8004dba <USBD_LL_DataOutStage+0xd4>
    pdev->pClass->DataOut(pdev, epnum);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	7afa      	ldrb	r2, [r7, #11]
 8004db2:	4611      	mov	r1, r2
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	4798      	blx	r3
 8004db8:	e001      	b.n	8004dbe <USBD_LL_DataOutStage+0xd8>
  }
  else{
    /* should never be in this condition */
    return USBD_FAIL;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e000      	b.n	8004dc0 <USBD_LL_DataOutStage+0xda>
  }
  return USBD_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <USBD_LL_DataInStage>:

USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata){
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  if (epnum == 0U){
 8004dd6:	7afb      	ldrb	r3, [r7, #11]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d17f      	bne.n	8004edc <USBD_LL_DataInStage+0x114>
    pep = &pdev->ep_in[0];
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3314      	adds	r3, #20
 8004de0:	617b      	str	r3, [r7, #20]
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d15c      	bne.n	8004ea6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d915      	bls.n	8004e24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	60da      	str	r2, [r3, #12]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f001 fbd1 	bl	80065b8 <USBD_CtlContinueSendData>
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e16:	2300      	movs	r3, #0
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fb63 	bl	80054e8 <USBD_LL_PrepareReceive>
 8004e22:	e04e      	b.n	8004ec2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	6912      	ldr	r2, [r2, #16]
 8004e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e30:	fb02 f201 	mul.w	r2, r2, r1
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11c      	bne.n	8004e74 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d316      	bcc.n	8004e74 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d20f      	bcs.n	8004e74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e54:	2200      	movs	r2, #0
 8004e56:	2100      	movs	r1, #0
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f001 fbad 	bl	80065b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e66:	2300      	movs	r3, #0
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb3b 	bl	80054e8 <USBD_LL_PrepareReceive>
 8004e72:	e026      	b.n	8004ec2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d105      	bne.n	8004e96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa79 	bl	8005390 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f001 fbc1 	bl	8006626 <USBD_CtlReceiveStatus>
 8004ea4:	e00d      	b.n	8004ec2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d004      	beq.n	8004eba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fa67 	bl	8005390 <USBD_LL_StallEP>
      }
    }
    if (pdev->dev_test_mode == 1U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d11d      	bne.n	8004f08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fe81 	bl	8004bd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004eda:	e015      	b.n	8004f08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED)){
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d108      	bne.n	8004f04 <USBD_LL_DataInStage+0x13c>
    pdev->pClass->DataIn(pdev, epnum);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	7afa      	ldrb	r2, [r7, #11]
 8004efc:	4611      	mov	r1, r2
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	4798      	blx	r3
 8004f02:	e001      	b.n	8004f08 <USBD_LL_DataInStage+0x140>
  }
  else{
    return USBD_FAIL;
 8004f04:	2302      	movs	r3, #2
 8004f06:	e000      	b.n	8004f0a <USBD_LL_DataInStage+0x142>
  }
  return USBD_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev){
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f1a:	2340      	movs	r3, #64	; 0x40
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2100      	movs	r1, #0
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9f0 	bl	8005306 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f9e2 	bl	8005306 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2240      	movs	r2, #64	; 0x40
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  if (pdev->pClassData){
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <USBD_LL_Reset+0x78>
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6852      	ldr	r2, [r2, #4]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	4611      	mov	r1, r2
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
  }
  return USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_LL_SetSpeed>:

USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev, USBD_SpeedTypeDef speed){
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <USBD_LL_Suspend>:

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev){
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  return USBD_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr

08004fda <USBD_LL_Resume>:

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev){
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED){
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d105      	bne.n	8004ff8 <USBD_LL_Resume+0x1e>
    pdev->dev_state = pdev->dev_old_state;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }
  return USBD_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <USBD_LL_SOF>:

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev){
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED){
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005012:	2b03      	cmp	r3, #3
 8005014:	d10b      	bne.n	800502e <USBD_LL_SOF+0x2a>
    if (pdev->pClass->SOF != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle){
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)  {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <HAL_PCD_MspInit+0x44>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d113      	bne.n	8005072 <HAL_PCD_MspInit+0x3a>
    __HAL_RCC_USB_CLK_ENABLE();
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_PCD_MspInit+0x48>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <HAL_PCD_MspInit+0x48>)
 8005050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005054:	61d3      	str	r3, [r2, #28]
 8005056:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <HAL_PCD_MspInit+0x48>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005062:	2200      	movs	r2, #0
 8005064:	2100      	movs	r1, #0
 8005066:	2014      	movs	r0, #20
 8005068:	f7fb f9fc 	bl	8000464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800506c:	2014      	movs	r0, #20
 800506e:	f7fb fa15 	bl	800049c <HAL_NVIC_EnableIRQ>
  }
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40005c00 	.word	0x40005c00
 8005080:	40021000 	.word	0x40021000

08005084 <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd){
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f7ff fdd6 	bl	8004c4c <USBD_LL_SetupStage>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	440b      	add	r3, r1
 80050c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7ff fe08 	bl	8004ce6 <USBD_LL_DataOutStage>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum){
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	440b      	add	r3, r1
 80050fe:	333c      	adds	r3, #60	; 0x3c
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	4619      	mov	r1, r3
 8005106:	f7ff fe5f 	bl	8004dc8 <USBD_LL_DataInStage>
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd){
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff6f 	bl	8005004 <USBD_LL_SOF>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd){
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)  {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d001      	beq.n	8005146 <HAL_PCD_ResetCallback+0x18>
    Error_Handler();
 8005142:	f7fb f981 	bl	8000448 <Error_Handler>
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ff1f 	bl	8004f94 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fed8 	bl	8004f12 <USBD_LL_Reset>
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <HAL_PCD_SuspendCallback>:

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd){
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff19 	bl	8004fb2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)  {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <HAL_PCD_SuspendCallback+0x30>)
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4a03      	ldr	r2, [pc, #12]	; (800519c <HAL_PCD_SuspendCallback+0x30>)
 800518e:	f043 0306 	orr.w	r3, r3, #6
 8005192:	6113      	str	r3, [r2, #16]
  }
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd){
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ff13 	bl	8004fda <USBD_LL_Resume>
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr, uint16_t ep_kind, uint32_t pmaadress){
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	817b      	strh	r3, [r7, #10]
 80051ca:	4613      	mov	r3, r2
 80051cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  if ((0x80U & ep_addr) == 0x80U)  {
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_PCDEx_PMAConfig+0x36>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e009      	b.n	8005206 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051f2:	897a      	ldrh	r2, [r7, #10]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  }
  if (ep_kind == PCD_SNG_BUF)  {
 8005206:	893b      	ldrh	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <HAL_PCDEx_PMAConfig+0x60>
    ep->doublebuffer = 0U;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2200      	movs	r2, #0
 8005210:	731a      	strb	r2, [r3, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	b29a      	uxth	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	80da      	strh	r2, [r3, #6]
 800521a:	e00b      	b.n	8005234 <HAL_PCDEx_PMAConfig+0x78>
  }
  else {
    ep->doublebuffer = 1U;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2201      	movs	r2, #1
 8005220:	731a      	strb	r2, [r3, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	b29a      	uxth	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	b29a      	uxth	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	815a      	strh	r2, [r3, #10]
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <USBD_LL_Init>:

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev){
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  hpcd_USB_FS.pData = pdev;
 8005248:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <USBD_LL_Init+0x88>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <USBD_LL_Init+0x88>)
 8005254:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <USBD_LL_Init+0x88>)
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <USBD_LL_Init+0x8c>)
 800525c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800525e:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <USBD_LL_Init+0x88>)
 8005260:	2208      	movs	r2, #8
 8005262:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <USBD_LL_Init+0x88>)
 8005266:	2202      	movs	r2, #2
 8005268:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <USBD_LL_Init+0x88>)
 800526c:	2200      	movs	r2, #0
 800526e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005270:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <USBD_LL_Init+0x88>)
 8005272:	2200      	movs	r2, #0
 8005274:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <USBD_LL_Init+0x88>)
 8005278:	2200      	movs	r2, #0
 800527a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)  {
 800527c:	4812      	ldr	r0, [pc, #72]	; (80052c8 <USBD_LL_Init+0x88>)
 800527e:	f7fb fda9 	bl	8000dd4 <HAL_PCD_Init>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <USBD_LL_Init+0x4c>
    Error_Handler( );
 8005288:	f7fb f8de 	bl	8000448 <Error_Handler>
  }
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005292:	2318      	movs	r3, #24
 8005294:	2200      	movs	r2, #0
 8005296:	2100      	movs	r1, #0
 8005298:	f7ff ff90 	bl	80051bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80052a2:	2358      	movs	r3, #88	; 0x58
 80052a4:	2200      	movs	r2, #0
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	f7ff ff88 	bl	80051bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80052b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b6:	2200      	movs	r2, #0
 80052b8:	2181      	movs	r1, #129	; 0x81
 80052ba:	f7ff ff7f 	bl	80051bc <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2000045c 	.word	0x2000045c
 80052cc:	40005c00 	.word	0x40005c00

080052d0 <USBD_LL_Start>:

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev){
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_Start(pdev->pData);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb fe73 	bl	8000fd2 <HAL_PCD_Start>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f928 	bl	8005548 <USBD_Get_USB_Status>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_LL_OpenEP>:

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps){
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	461a      	mov	r2, r3
 8005314:	4603      	mov	r3, r0
 8005316:	70fb      	strb	r3, [r7, #3]
 8005318:	460b      	mov	r3, r1
 800531a:	70bb      	strb	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800532e:	78bb      	ldrb	r3, [r7, #2]
 8005330:	883a      	ldrh	r2, [r7, #0]
 8005332:	78f9      	ldrb	r1, [r7, #3]
 8005334:	f7fb ffc6 	bl	80012c4 <HAL_PCD_EP_Open>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f902 	bl	8005548 <USBD_Get_USB_Status>
 8005344:	4603      	mov	r3, r0
 8005346:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005348:	7bbb      	ldrb	r3, [r7, #14]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f7fc f804 	bl	800137e <HAL_PCD_EP_Close>
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f8e3 	bl	8005548 <USBD_Get_USB_Status>
 8005382:	4603      	mov	r3, r0
 8005384:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005386:	7bbb      	ldrb	r3, [r7, #14]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USBD_LL_StallEP>:

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fc f895 	bl	80014de <HAL_PCD_EP_SetStall>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f8c4 	bl	8005548 <USBD_Get_USB_Status>
 80053c0:	4603      	mov	r3, r0
 80053c2:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fc f8d6 	bl	800159e <HAL_PCD_EP_ClrStall>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f8a5 	bl	8005548 <USBD_Get_USB_Status>
 80053fe:	4603      	mov	r3, r0
 8005400:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005402:	7bbb      	ldrb	r3, [r7, #14]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800541e:	60fb      	str	r3, [r7, #12]
  if((ep_addr & 0x80) == 0x80)  {
 8005420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005424:	2b00      	cmp	r3, #0
 8005426:	da0c      	bge.n	8005442 <USBD_LL_IsStallEP+0x36>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	440b      	add	r3, r1
 800543c:	3302      	adds	r3, #2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	e00b      	b.n	800545a <USBD_LL_IsStallEP+0x4e>
  }
  else  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8005458:	781b      	ldrb	r3, [r3, #0]
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr){
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f7fb fef9 	bl	800127a <HAL_PCD_SetAddress>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f85a 	bl	8005548 <USBD_Get_USB_Status>
 8005494:	4603      	mov	r3, r0
 8005496:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005498:	7bbb      	ldrb	r3, [r7, #14]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size){
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	461a      	mov	r2, r3
 80054ae:	460b      	mov	r3, r1
 80054b0:	72fb      	strb	r3, [r7, #11]
 80054b2:	4613      	mov	r3, r2
 80054b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80054c4:	893b      	ldrh	r3, [r7, #8]
 80054c6:	7af9      	ldrb	r1, [r7, #11]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	f7fb ffd1 	bl	8001470 <HAL_PCD_EP_Transmit>
 80054ce:	4603      	mov	r3, r0
 80054d0:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f837 	bl	8005548 <USBD_Get_USB_Status>
 80054da:	4603      	mov	r3, r0
 80054dc:	75bb      	strb	r3, [r7, #22]
  return usb_status;
 80054de:	7dbb      	ldrb	r3, [r7, #22]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size){
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	461a      	mov	r2, r3
 80054f4:	460b      	mov	r3, r1
 80054f6:	72fb      	strb	r3, [r7, #11]
 80054f8:	4613      	mov	r3, r2
 80054fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800550a:	893b      	ldrh	r3, [r7, #8]
 800550c:	7af9      	ldrb	r1, [r7, #11]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	f7fb ff7d 	bl	800140e <HAL_PCD_EP_Receive>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f814 	bl	8005548 <USBD_Get_USB_Status>
 8005520:	4603      	mov	r3, r0
 8005522:	75bb      	strb	r3, [r7, #22]
  return usb_status;
 8005524:	7dbb      	ldrb	r3, [r7, #22]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size){
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <USBD_static_malloc+0x14>)
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	2000017c 	.word	0x2000017c

08005548 <USBD_Get_USB_Status>:

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status){
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
  switch (hal_status)  {
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d817      	bhi.n	800558c <USBD_Get_USB_Status+0x44>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <USBD_Get_USB_Status+0x1c>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005575 	.word	0x08005575
 8005568:	0800557b 	.word	0x0800557b
 800556c:	08005581 	.word	0x08005581
 8005570:	08005587 	.word	0x08005587
    case HAL_OK :
      usb_status = USBD_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e00b      	b.n	8005592 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800557a:	2302      	movs	r3, #2
 800557c:	73fb      	strb	r3, [r7, #15]
      break;
 800557e:	e008      	b.n	8005592 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      break;
 8005584:	e005      	b.n	8005592 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005586:	2302      	movs	r3, #2
 8005588:	73fb      	strb	r3, [r7, #15]
      break;
 800558a:	e002      	b.n	8005592 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800558c:	2302      	movs	r3, #2
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	bf00      	nop
  }
  return usb_status;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <USBD_StdDevReq>:
static void USBD_GetStatus(USBD_HandleTypeDef *pdev,     USBD_SetupReqTypedef *req);
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,    USBD_SetupReqTypedef *req);
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,    USBD_SetupReqTypedef *req);
static uint8_t USBD_GetLen(uint8_t *buf);

USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d005      	beq.n	80055c6 <USBD_StdDevReq+0x26>
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d84f      	bhi.n	800565e <USBD_StdDevReq+0xbe>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <USBD_StdDevReq+0x36>
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d14b      	bne.n	800565e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
      break;
 80055d4:	e048      	b.n	8005668 <USBD_StdDevReq+0xc8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest){
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b09      	cmp	r3, #9
 80055dc:	d839      	bhi.n	8005652 <USBD_StdDevReq+0xb2>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <USBD_StdDevReq+0x44>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005649 	.word	0x08005649
 80055ec:	08005653 	.word	0x08005653
 80055f0:	0800563f 	.word	0x0800563f
 80055f4:	08005653 	.word	0x08005653
 80055f8:	08005617 	.word	0x08005617
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	08005653 	.word	0x08005653
 8005604:	0800562b 	.word	0x0800562b
 8005608:	08005621 	.word	0x08005621
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9dc 	bl	80059cc <USBD_GetDescriptor>
          break;
 8005614:	e022      	b.n	800565c <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fb3f 	bl	8005c9c <USBD_SetAddress>
          break;
 800561e:	e01d      	b.n	800565c <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb7e 	bl	8005d24 <USBD_SetConfig>
          break;
 8005628:	e018      	b.n	800565c <USBD_StdDevReq+0xbc>
        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fc07 	bl	8005e40 <USBD_GetConfig>
          break;
 8005632:	e013      	b.n	800565c <USBD_StdDevReq+0xbc>
        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005634:	6839      	ldr	r1, [r7, #0]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fc37 	bl	8005eaa <USBD_GetStatus>
          break;
 800563c:	e00e      	b.n	800565c <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fc65 	bl	8005f10 <USBD_SetFeature>
          break;
 8005646:	e009      	b.n	800565c <USBD_StdDevReq+0xbc>
        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fc74 	bl	8005f38 <USBD_ClrFeature>
          break;
 8005650:	e004      	b.n	800565c <USBD_StdDevReq+0xbc>
        default:
          USBD_CtlError(pdev, req);
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fc90 	bl	8005f7a <USBD_CtlError>
          break;
 800565a:	bf00      	nop
      }
      break;
 800565c:	e004      	b.n	8005668 <USBD_StdDevReq+0xc8>
    default:
      USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fc8a 	bl	8005f7a <USBD_CtlError>
      break;
 8005666:	bf00      	nop
  }
  return ret;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop

08005674 <USBD_StdItfReq>:

USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req){
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)  {
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d005      	beq.n	800569a <USBD_StdItfReq+0x26>
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d82e      	bhi.n	80056f0 <USBD_StdItfReq+0x7c>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <USBD_StdItfReq+0x26>
 8005696:	2b20      	cmp	r3, #32
 8005698:	d12a      	bne.n	80056f0 <USBD_StdItfReq+0x7c>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)      {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a0:	3b01      	subs	r3, #1
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d81d      	bhi.n	80056e2 <USBD_StdItfReq+0x6e>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)          {
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	889b      	ldrh	r3, [r3, #4]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d813      	bhi.n	80056d8 <USBD_StdItfReq+0x64>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	88db      	ldrh	r3, [r3, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d110      	bne.n	80056ec <USBD_StdItfReq+0x78>
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10d      	bne.n	80056ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 ff95 	bl	8006600 <USBD_CtlSendStatus>
            }
          }
          else          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056d6:	e009      	b.n	80056ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fc4d 	bl	8005f7a <USBD_CtlError>
          break;
 80056e0:	e004      	b.n	80056ec <USBD_StdItfReq+0x78>
        default:
          USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fc48 	bl	8005f7a <USBD_CtlError>
          break;
 80056ea:	e000      	b.n	80056ee <USBD_StdItfReq+0x7a>
          break;
 80056ec:	bf00      	nop
      }
      break;
 80056ee:	e004      	b.n	80056fa <USBD_StdItfReq+0x86>
    default:
      USBD_CtlError(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fc41 	bl	8005f7a <USBD_CtlError>
      break;
 80056f8:	bf00      	nop
  }
  return USBD_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <USBD_StdEPReq>:

USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req){
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	889b      	ldrh	r3, [r3, #4]
 8005716:	73bb      	strb	r3, [r7, #14]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)  {
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d007      	beq.n	8005734 <USBD_StdEPReq+0x30>
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	f200 8146 	bhi.w	80059b6 <USBD_StdEPReq+0x2b2>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <USBD_StdEPReq+0x40>
 800572e:	2b20      	cmp	r3, #32
 8005730:	f040 8141 	bne.w	80059b6 <USBD_StdEPReq+0x2b2>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
      break;
 8005742:	e13d      	b.n	80059c0 <USBD_StdEPReq+0x2bc>
    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)      {
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800574c:	2b20      	cmp	r3, #32
 800574e:	d10a      	bne.n	8005766 <USBD_StdEPReq+0x62>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
 800575e:	4603      	mov	r3, r0
 8005760:	73fb      	strb	r3, [r7, #15]
        return ret;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	e12d      	b.n	80059c2 <USBD_StdEPReq+0x2be>
      }
      switch (req->bRequest)      {
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d007      	beq.n	800577e <USBD_StdEPReq+0x7a>
 800576e:	2b03      	cmp	r3, #3
 8005770:	f300 811b 	bgt.w	80059aa <USBD_StdEPReq+0x2a6>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d072      	beq.n	800585e <USBD_StdEPReq+0x15a>
 8005778:	2b01      	cmp	r3, #1
 800577a:	d03a      	beq.n	80057f2 <USBD_StdEPReq+0xee>
 800577c:	e115      	b.n	80059aa <USBD_StdEPReq+0x2a6>
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)          {
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005784:	2b02      	cmp	r3, #2
 8005786:	d002      	beq.n	800578e <USBD_StdEPReq+0x8a>
 8005788:	2b03      	cmp	r3, #3
 800578a:	d015      	beq.n	80057b8 <USBD_StdEPReq+0xb4>
 800578c:	e02b      	b.n	80057e6 <USBD_StdEPReq+0xe2>
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00c      	beq.n	80057ae <USBD_StdEPReq+0xaa>
 8005794:	7bbb      	ldrb	r3, [r7, #14]
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	d009      	beq.n	80057ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fdf6 	bl	8005390 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fdf2 	bl	8005390 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057ac:	e020      	b.n	80057f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fbe2 	bl	8005f7a <USBD_CtlError>
              break;
 80057b6:	e01b      	b.n	80057f0 <USBD_StdEPReq+0xec>
            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	885b      	ldrh	r3, [r3, #2]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10e      	bne.n	80057de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <USBD_StdEPReq+0xda>
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d008      	beq.n	80057de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	88db      	ldrh	r3, [r3, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fdd9 	bl	8005390 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 ff0e 	bl	8006600 <USBD_CtlSendStatus>
              break;
 80057e4:	e004      	b.n	80057f0 <USBD_StdEPReq+0xec>
            default:
              USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fbc6 	bl	8005f7a <USBD_CtlError>
              break;
 80057ee:	bf00      	nop
          }
          break;
 80057f0:	e0e0      	b.n	80059b4 <USBD_StdEPReq+0x2b0>
        case USB_REQ_CLEAR_FEATURE:
          switch (pdev->dev_state)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d002      	beq.n	8005802 <USBD_StdEPReq+0xfe>
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d015      	beq.n	800582c <USBD_StdEPReq+0x128>
 8005800:	e026      	b.n	8005850 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005802:	7bbb      	ldrb	r3, [r7, #14]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00c      	beq.n	8005822 <USBD_StdEPReq+0x11e>
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	2b80      	cmp	r3, #128	; 0x80
 800580c:	d009      	beq.n	8005822 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fdbc 	bl	8005390 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fdb8 	bl	8005390 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005820:	e01c      	b.n	800585c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fba8 	bl	8005f7a <USBD_CtlError>
              break;
 800582a:	e017      	b.n	800585c <USBD_StdEPReq+0x158>
            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	885b      	ldrh	r3, [r3, #2]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d112      	bne.n	800585a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fdc3 	bl	80053ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fed9 	bl	8006600 <USBD_CtlSendStatus>
              }
              break;
 800584e:	e004      	b.n	800585a <USBD_StdEPReq+0x156>
            default:
              USBD_CtlError(pdev, req);
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fb91 	bl	8005f7a <USBD_CtlError>
              break;
 8005858:	e000      	b.n	800585c <USBD_StdEPReq+0x158>
              break;
 800585a:	bf00      	nop
          }
          break;
 800585c:	e0aa      	b.n	80059b4 <USBD_StdEPReq+0x2b0>
        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005864:	2b02      	cmp	r3, #2
 8005866:	d002      	beq.n	800586e <USBD_StdEPReq+0x16a>
 8005868:	2b03      	cmp	r3, #3
 800586a:	d032      	beq.n	80058d2 <USBD_StdEPReq+0x1ce>
 800586c:	e097      	b.n	800599e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <USBD_StdEPReq+0x180>
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	2b80      	cmp	r3, #128	; 0x80
 8005878:	d004      	beq.n	8005884 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fb7c 	bl	8005f7a <USBD_CtlError>
                break;
 8005882:	e091      	b.n	80059a8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da0b      	bge.n	80058a4 <USBD_StdEPReq+0x1a0>
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	3310      	adds	r3, #16
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4413      	add	r3, r2
 80058a0:	3304      	adds	r3, #4
 80058a2:	e00b      	b.n	80058bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	60bb      	str	r3, [r7, #8]
              pep->status = 0x0000U;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2202      	movs	r2, #2
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fe58 	bl	8006580 <USBD_CtlSendData>
              break;
 80058d0:	e06a      	b.n	80059a8 <USBD_StdEPReq+0x2a4>
            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da11      	bge.n	80058fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3318      	adds	r3, #24
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d117      	bne.n	8005924 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fb3f 	bl	8005f7a <USBD_CtlError>
                  break;
 80058fc:	e054      	b.n	80059a8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb2c 	bl	8005f7a <USBD_CtlError>
                  break;
 8005922:	e041      	b.n	80059a8 <USBD_StdEPReq+0x2a4>
                }
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005928:	2b00      	cmp	r3, #0
 800592a:	da0b      	bge.n	8005944 <USBD_StdEPReq+0x240>
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	3310      	adds	r3, #16
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	3304      	adds	r3, #4
 8005942:	e00b      	b.n	800595c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	3304      	adds	r3, #4
 800595c:	60bb      	str	r3, [r7, #8]
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <USBD_StdEPReq+0x266>
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	2b80      	cmp	r3, #128	; 0x80
 8005968:	d103      	bne.n	8005972 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e00e      	b.n	8005990 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fd48 	bl	800540c <USBD_LL_IsStallEP>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2201      	movs	r2, #1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e002      	b.n	8005990 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
              }
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2202      	movs	r2, #2
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fdf2 	bl	8006580 <USBD_CtlSendData>
              break;
 800599c:	e004      	b.n	80059a8 <USBD_StdEPReq+0x2a4>
            default:
              USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 faea 	bl	8005f7a <USBD_CtlError>
              break;
 80059a6:	bf00      	nop
          }
          break;
 80059a8:	e004      	b.n	80059b4 <USBD_StdEPReq+0x2b0>
        default:
          USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fae4 	bl	8005f7a <USBD_CtlError>
          break;
 80059b2:	bf00      	nop
      }
      break;
 80059b4:	e004      	b.n	80059c0 <USBD_StdEPReq+0x2bc>
    default:
      USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fade 	bl	8005f7a <USBD_CtlError>
      break;
 80059be:	bf00      	nop
  }
  return ret;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <USBD_GetDescriptor>:

static void USBD_GetDescriptor    (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	72fb      	strb	r3, [r7, #11]
  switch (req->wValue >> 8)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	885b      	ldrh	r3, [r3, #2]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	2b06      	cmp	r3, #6
 80059ee:	f200 8128 	bhi.w	8005c42 <USBD_GetDescriptor+0x276>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <USBD_GetDescriptor+0x2c>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a2d 	.word	0x08005a2d
 8005a00:	08005a6d 	.word	0x08005a6d
 8005a04:	08005c43 	.word	0x08005c43
 8005a08:	08005c43 	.word	0x08005c43
 8005a0c:	08005be3 	.word	0x08005be3
 8005a10:	08005c0f 	.word	0x08005c0f
  {
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	7c12      	ldrb	r2, [r2, #16]
 8005a20:	f107 0108 	add.w	r1, r7, #8
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
 8005a28:	60f8      	str	r0, [r7, #12]
      break;
 8005a2a:	e112      	b.n	8005c52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7c1b      	ldrb	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	f107 0208 	add.w	r2, r7, #8
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
 8005a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a4e:	e100      	b.n	8005c52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f107 0208 	add.w	r2, r7, #8
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
 8005a60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	2202      	movs	r2, #2
 8005a68:	701a      	strb	r2, [r3, #0]
      break;
 8005a6a:	e0f2      	b.n	8005c52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	885b      	ldrh	r3, [r3, #2]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b05      	cmp	r3, #5
 8005a74:	f200 80ac 	bhi.w	8005bd0 <USBD_GetDescriptor+0x204>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <USBD_GetDescriptor+0xb4>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005a99 	.word	0x08005a99
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005b01 	.word	0x08005b01
 8005a8c:	08005b35 	.word	0x08005b35
 8005a90:	08005b69 	.word	0x08005b69
 8005a94:	08005b9d 	.word	0x08005b9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	7c12      	ldrb	r2, [r2, #16]
 8005ab0:	f107 0108 	add.w	r1, r7, #8
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aba:	e091      	b.n	8005be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa5b 	bl	8005f7a <USBD_CtlError>
            err++;
 8005ac4:	7afb      	ldrb	r3, [r7, #11]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aca:	e089      	b.n	8005be0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	7c12      	ldrb	r2, [r2, #16]
 8005ae4:	f107 0108 	add.w	r1, r7, #8
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
 8005aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aee:	e077      	b.n	8005be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa41 	bl	8005f7a <USBD_CtlError>
            err++;
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	3301      	adds	r3, #1
 8005afc:	72fb      	strb	r3, [r7, #11]
          break;
 8005afe:	e06f      	b.n	8005be0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	7c12      	ldrb	r2, [r2, #16]
 8005b18:	f107 0108 	add.w	r1, r7, #8
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
 8005b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b22:	e05d      	b.n	8005be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa27 	bl	8005f7a <USBD_CtlError>
            err++;
 8005b2c:	7afb      	ldrb	r3, [r7, #11]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	72fb      	strb	r3, [r7, #11]
          break;
 8005b32:	e055      	b.n	8005be0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	7c12      	ldrb	r2, [r2, #16]
 8005b4c:	f107 0108 	add.w	r1, r7, #8
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
 8005b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b56:	e043      	b.n	8005be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa0d 	bl	8005f7a <USBD_CtlError>
            err++;
 8005b60:	7afb      	ldrb	r3, [r7, #11]
 8005b62:	3301      	adds	r3, #1
 8005b64:	72fb      	strb	r3, [r7, #11]
          break;
 8005b66:	e03b      	b.n	8005be0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	7c12      	ldrb	r2, [r2, #16]
 8005b80:	f107 0108 	add.w	r1, r7, #8
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
 8005b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b8a:	e029      	b.n	8005be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9f3 	bl	8005f7a <USBD_CtlError>
            err++;
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	3301      	adds	r3, #1
 8005b98:	72fb      	strb	r3, [r7, #11]
          break;
 8005b9a:	e021      	b.n	8005be0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bbe:	e00f      	b.n	8005be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9d9 	bl	8005f7a <USBD_CtlError>
            err++;
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bce:	e007      	b.n	8005be0 <USBD_GetDescriptor+0x214>
        default:
          USBD_CtlError(pdev, req);
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9d1 	bl	8005f7a <USBD_CtlError>
          err++;
 8005bd8:	7afb      	ldrb	r3, [r7, #11]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8005bde:	e038      	b.n	8005c52 <USBD_GetDescriptor+0x286>
 8005be0:	e037      	b.n	8005c52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	7c1b      	ldrb	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f107 0208 	add.w	r2, r7, #8
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4798      	blx	r3
 8005bfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bfc:	e029      	b.n	8005c52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9ba 	bl	8005f7a <USBD_CtlError>
        err++;
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c0c:	e021      	b.n	8005c52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7c1b      	ldrb	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10d      	bne.n	8005c32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f107 0208 	add.w	r2, r7, #8
 8005c22:	4610      	mov	r0, r2
 8005c24:	4798      	blx	r3
 8005c26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c30:	e00f      	b.n	8005c52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9a0 	bl	8005f7a <USBD_CtlError>
        err++;
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c40:	e007      	b.n	8005c52 <USBD_GetDescriptor+0x286>
    default:
      USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f998 	bl	8005f7a <USBD_CtlError>
      err++;
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c50:	bf00      	nop
  }
  if (err != 0U)
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11c      	bne.n	8005c92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c58:	893b      	ldrh	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d011      	beq.n	8005c82 <USBD_GetDescriptor+0x2b6>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	88da      	ldrh	r2, [r3, #6]
 8005c6a:	893b      	ldrh	r3, [r7, #8]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bf28      	it	cs
 8005c70:	4613      	movcs	r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c76:	893b      	ldrh	r3, [r7, #8]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fc7f 	bl	8006580 <USBD_CtlSendData>
    }
    if (req->wLength == 0U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	88db      	ldrh	r3, [r3, #6]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fcb8 	bl	8006600 <USBD_CtlSendStatus>
 8005c90:	e000      	b.n	8005c94 <USBD_GetDescriptor+0x2c8>
    return;
 8005c92:	bf00      	nop
    }
  }
}
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop

08005c9c <USBD_SetAddress>:

static void USBD_SetAddress		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	889b      	ldrh	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d130      	bne.n	8005d10 <USBD_SetAddress+0x74>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	88db      	ldrh	r3, [r3, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d12c      	bne.n	8005d10 <USBD_SetAddress+0x74>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	885b      	ldrh	r3, [r3, #2]
 8005cba:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbc:	d828      	bhi.n	8005d10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	885b      	ldrh	r3, [r3, #2]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc8:	73fb      	strb	r3, [r7, #15]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d104      	bne.n	8005cde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f94f 	bl	8005f7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cdc:	e01d      	b.n	8005d1a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	7bfa      	ldrb	r2, [r7, #15]
 8005ce2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fbba 	bl	8005464 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fc85 	bl	8006600 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d04:	e009      	b.n	8005d1a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0e:	e004      	b.n	8005d1a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f931 	bl	8005f7a <USBD_CtlError>
  }
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <USBD_SetConfig>:

static void USBD_SetConfig		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
 static uint8_t cfgidx;
  cfgidx = (uint8_t)(req->wValue);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	885b      	ldrh	r3, [r3, #2]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <USBD_SetConfig+0x118>)
 8005d36:	701a      	strb	r2, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d38:	4b40      	ldr	r3, [pc, #256]	; (8005e3c <USBD_SetConfig+0x118>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d904      	bls.n	8005d4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f919 	bl	8005f7a <USBD_CtlError>
 8005d48:	e075      	b.n	8005e36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d002      	beq.n	8005d5a <USBD_SetConfig+0x36>
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d023      	beq.n	8005da0 <USBD_SetConfig+0x7c>
 8005d58:	e062      	b.n	8005e20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d5a:	4b38      	ldr	r3, [pc, #224]	; (8005e3c <USBD_SetConfig+0x118>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01a      	beq.n	8005d98 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d62:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <USBD_SetConfig+0x118>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d74:	4b31      	ldr	r3, [pc, #196]	; (8005e3c <USBD_SetConfig+0x118>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fe ff34 	bl	8004be8 <USBD_SetClassConfig>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d104      	bne.n	8005d90 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f8f6 	bl	8005f7a <USBD_CtlError>
            return;
 8005d8e:	e052      	b.n	8005e36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fc35 	bl	8006600 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d96:	e04e      	b.n	8005e36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fc31 	bl	8006600 <USBD_CtlSendStatus>
        break;
 8005d9e:	e04a      	b.n	8005e36 <USBD_SetConfig+0x112>
      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005da0:	4b26      	ldr	r3, [pc, #152]	; (8005e3c <USBD_SetConfig+0x118>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d112      	bne.n	8005dce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005db0:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <USBD_SetConfig+0x118>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005dba:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <USBD_SetConfig+0x118>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fe ff30 	bl	8004c26 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fc1a 	bl	8006600 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dcc:	e033      	b.n	8005e36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dce:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <USBD_SetConfig+0x118>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d01d      	beq.n	8005e18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fe ff1e 	bl	8004c26 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005dea:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <USBD_SetConfig+0x118>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <USBD_SetConfig+0x118>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe fef4 	bl	8004be8 <USBD_SetClassConfig>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d104      	bne.n	8005e10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8b6 	bl	8005f7a <USBD_CtlError>
            return;
 8005e0e:	e012      	b.n	8005e36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fbf5 	bl	8006600 <USBD_CtlSendStatus>
        break;
 8005e16:	e00e      	b.n	8005e36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fbf1 	bl	8006600 <USBD_CtlSendStatus>
        break;
 8005e1e:	e00a      	b.n	8005e36 <USBD_SetConfig+0x112>
      default:
        USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8a9 	bl	8005f7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <USBD_SetConfig+0x118>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fe fef9 	bl	8004c26 <USBD_ClrClassConfig>
        break;
 8005e34:	bf00      	nop
    }
  }
}
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000190 	.word	0x20000190

08005e40 <USBD_GetConfig>:

static void USBD_GetConfig		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	88db      	ldrh	r3, [r3, #6]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d004      	beq.n	8005e5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f890 	bl	8005f7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e5a:	e022      	b.n	8005ea2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	dc02      	bgt.n	8005e6c <USBD_GetConfig+0x2c>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dc03      	bgt.n	8005e72 <USBD_GetConfig+0x32>
 8005e6a:	e015      	b.n	8005e98 <USBD_GetConfig+0x58>
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d00b      	beq.n	8005e88 <USBD_GetConfig+0x48>
 8005e70:	e012      	b.n	8005e98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb7d 	bl	8006580 <USBD_CtlSendData>
        break;
 8005e86:	e00c      	b.n	8005ea2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fb75 	bl	8006580 <USBD_CtlSendData>
        break;
 8005e96:	e004      	b.n	8005ea2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f86d 	bl	8005f7a <USBD_CtlError>
        break;
 8005ea0:	bf00      	nop
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_GetStatus>:

static void USBD_GetStatus		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d81e      	bhi.n	8005efe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d004      	beq.n	8005ed2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f855 	bl	8005f7a <USBD_CtlError>
        break;
 8005ed0:	e01a      	b.n	8005f08 <USBD_GetStatus+0x5e>
      }
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	60da      	str	r2, [r3, #12]
      if (pdev->dev_remote_wakeup)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f043 0202 	orr.w	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60da      	str	r2, [r3, #12]
      }
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fb42 	bl	8006580 <USBD_CtlSendData>
      break;
 8005efc:	e004      	b.n	8005f08 <USBD_GetStatus+0x5e>
    default:
      USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f83a 	bl	8005f7a <USBD_CtlError>
      break;
 8005f06:	bf00      	nop
  }
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_SetFeature>:

static void USBD_SetFeature		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	885b      	ldrh	r3, [r3, #2]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d106      	bne.n	8005f30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fb68 	bl	8006600 <USBD_CtlSendStatus>
  }
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_ClrFeature>:

static void USBD_ClrFeature       (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d80b      	bhi.n	8005f66 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10c      	bne.n	8005f70 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fb4e 	bl	8006600 <USBD_CtlSendStatus>
      }
      break;
 8005f64:	e004      	b.n	8005f70 <USBD_ClrFeature+0x38>
    default:
      USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f806 	bl	8005f7a <USBD_CtlError>
      break;
 8005f6e:	e000      	b.n	8005f72 <USBD_ClrFeature+0x3a>
      break;
 8005f70:	bf00      	nop
  }
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_CtlError>:

void USBD_CtlError				  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fa02 	bl	8005390 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff f9fe 	bl	8005390 <USBD_LL_StallEP>
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_ParseSetupRequest>:

void USBD_ParseSetupRequest		  (USBD_SetupReqTypedef *req, uint8_t *pdata){
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781a      	ldrb	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	785a      	ldrb	r2, [r3, #1]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	3302      	adds	r3, #2
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	3305      	adds	r3, #5
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	3306      	adds	r3, #6
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3307      	adds	r3, #7
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	b29b      	uxth	r3, r3
 8006002:	4413      	add	r3, r2
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	80da      	strh	r2, [r3, #6]
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <USBD_GetString>:

void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len){
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	75fb      	strb	r3, [r7, #23]
  if (desc != NULL)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d032      	beq.n	8006090 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f834 	bl	8006098 <USBD_GetLen>
 8006030:	4603      	mov	r3, r0
 8006032:	3301      	adds	r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	75fa      	strb	r2, [r7, #23]
 8006044:	461a      	mov	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4413      	add	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	7812      	ldrb	r2, [r2, #0]
 800604e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	75fa      	strb	r2, [r7, #23]
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4413      	add	r3, r2
 800605c:	2203      	movs	r2, #3
 800605e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006060:	e012      	b.n	8006088 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	60fa      	str	r2, [r7, #12]
 8006068:	7dfa      	ldrb	r2, [r7, #23]
 800606a:	1c51      	adds	r1, r2, #1
 800606c:	75f9      	strb	r1, [r7, #23]
 800606e:	4611      	mov	r1, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	440a      	add	r2, r1
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	75fa      	strb	r2, [r7, #23]
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4413      	add	r3, r2
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e8      	bne.n	8006062 <USBD_GetString+0x4e>
    }
  }
}
 8006090:	bf00      	nop
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBD_GetLen>:

static uint8_t USBD_GetLen(uint8_t *buf){
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
  while (*buf != '\0')
 80060a4:	e005      	b.n	80060b2 <USBD_GetLen+0x1a>
  {
    len++;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	3301      	adds	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3301      	adds	r3, #1
 80060b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f5      	bne.n	80060a6 <USBD_GetLen+0xe>
  }
  return len;
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr
	...

080060c8 <USBD_FS_DeviceDescriptor>:
uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL]  = {
  USB_SIZ_STRING_SERIAL,
  USB_DESC_TYPE_STRING,
};

uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	6039      	str	r1, [r7, #0]
 80060d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2212      	movs	r2, #18
 80060d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80060da:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20000028 	.word	0x20000028

080060ec <USBD_FS_LangIDStrDescriptor>:

uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2204      	movs	r2, #4
 80060fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80060fe:	4b03      	ldr	r3, [pc, #12]	; (800610c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	2000003c 	.word	0x2000003c

08006110 <USBD_FS_ProductStrDescriptor>:

uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	4904      	ldr	r1, [pc, #16]	; (8006130 <USBD_FS_ProductStrDescriptor+0x20>)
 8006120:	4804      	ldr	r0, [pc, #16]	; (8006134 <USBD_FS_ProductStrDescriptor+0x24>)
 8006122:	f7ff ff77 	bl	8006014 <USBD_GetString>
  return USBD_StrDesc;
 8006126:	4b02      	ldr	r3, [pc, #8]	; (8006130 <USBD_FS_ProductStrDescriptor+0x20>)
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2000074c 	.word	0x2000074c
 8006134:	08006704 	.word	0x08006704

08006138 <USBD_FS_ManufacturerStrDescriptor>:

uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	6039      	str	r1, [r7, #0]
 8006142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	4904      	ldr	r1, [pc, #16]	; (8006158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006148:	4804      	ldr	r0, [pc, #16]	; (800615c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800614a:	f7ff ff63 	bl	8006014 <USBD_GetString>
  return USBD_StrDesc;
 800614e:	4b02      	ldr	r3, [pc, #8]	; (8006158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	2000074c 	.word	0x2000074c
 800615c:	0800671c 	.word	0x0800671c

08006160 <USBD_FS_SerialStrDescriptor>:

uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	6039      	str	r1, [r7, #0]
 800616a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	221a      	movs	r2, #26
 8006170:	801a      	strh	r2, [r3, #0]
  Get_SerialNum();
 8006172:	f000 f82f 	bl	80061d4 <Get_SerialNum>
  return (uint8_t *) USBD_StringSerial;
 8006176:	4b02      	ldr	r3, [pc, #8]	; (8006180 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000040 	.word	0x20000040

08006184 <USBD_FS_ConfigStrDescriptor>:

uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	6039      	str	r1, [r7, #0]
 800618e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	4904      	ldr	r1, [pc, #16]	; (80061a4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006194:	4804      	ldr	r0, [pc, #16]	; (80061a8 <USBD_FS_ConfigStrDescriptor+0x24>)
 8006196:	f7ff ff3d 	bl	8006014 <USBD_GetString>
  return USBD_StrDesc;
 800619a:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <USBD_FS_ConfigStrDescriptor+0x20>)
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	2000074c 	.word	0x2000074c
 80061a8:	08006730 	.word	0x08006730

080061ac <USBD_FS_InterfaceStrDescriptor>:

uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	6039      	str	r1, [r7, #0]
 80061b6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	4904      	ldr	r1, [pc, #16]	; (80061cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80061bc:	4804      	ldr	r0, [pc, #16]	; (80061d0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80061be:	f7ff ff29 	bl	8006014 <USBD_GetString>
  return USBD_StrDesc;
 80061c2:	4b02      	ldr	r3, [pc, #8]	; (80061cc <USBD_FS_InterfaceStrDescriptor+0x20>)
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	2000074c 	.word	0x2000074c
 80061d0:	0800673c 	.word	0x0800673c

080061d4 <Get_SerialNum>:

static void Get_SerialNum(void){
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <Get_SerialNum+0x44>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <Get_SerialNum+0x48>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <Get_SerialNum+0x4c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  if (deviceserial0 != 0)  {
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061fa:	2208      	movs	r2, #8
 80061fc:	4909      	ldr	r1, [pc, #36]	; (8006224 <Get_SerialNum+0x50>)
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f814 	bl	800622c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006204:	2204      	movs	r2, #4
 8006206:	4908      	ldr	r1, [pc, #32]	; (8006228 <Get_SerialNum+0x54>)
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	f000 f80f 	bl	800622c <IntToUnicode>
  }
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	1ffff7e8 	.word	0x1ffff7e8
 800621c:	1ffff7ec 	.word	0x1ffff7ec
 8006220:	1ffff7f0 	.word	0x1ffff7f0
 8006224:	20000042 	.word	0x20000042
 8006228:	20000052 	.word	0x20000052

0800622c <IntToUnicode>:

static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len){
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]
  for (idx = 0; idx < len; idx++)  {
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
 8006242:	e027      	b.n	8006294 <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA)    {
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	0f1b      	lsrs	r3, r3, #28
 8006248:	2b09      	cmp	r3, #9
 800624a:	d80b      	bhi.n	8006264 <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	0f1b      	lsrs	r3, r3, #28
 8006250:	b2da      	uxtb	r2, r3
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4619      	mov	r1, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	440b      	add	r3, r1
 800625c:	3230      	adds	r2, #48	; 0x30
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e00a      	b.n	800627a <IntToUnicode+0x4e>
    }
    else    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	0f1b      	lsrs	r3, r3, #28
 8006268:	b2da      	uxtb	r2, r3
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4619      	mov	r1, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	440b      	add	r3, r1
 8006274:	3237      	adds	r2, #55	; 0x37
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
    }
    value = value << 4;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	60fb      	str	r3, [r7, #12]
    pbuf[2 * idx + 1] = 0;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	3301      	adds	r3, #1
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4413      	add	r3, r2
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)  {
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	3301      	adds	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
 8006294:	7dfa      	ldrb	r2, [r7, #23]
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d3d3      	bcc.n	8006244 <IntToUnicode+0x18>
  }
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <USBD_HID_Init>:
	0x29, 0x65,                    /*   USAGE_MAXIMUM (Keyboard Application)*/
	0x81, 0x00,                    /*   INPUT (Data,Ary,Abs)*/
	0xc0                           /* END_COLLECTION*/
};

static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80062b4:	2304      	movs	r3, #4
 80062b6:	2203      	movs	r2, #3
 80062b8:	2181      	movs	r1, #129	; 0x81
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff f823 	bl	8005306 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80062c6:	2010      	movs	r0, #16
 80062c8:	f7ff f932 	bl	8005530 <USBD_static_malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80062de:	2302      	movs	r3, #2
 80062e0:	e005      	b.n	80062ee <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e8:	2200      	movs	r2, #0
 80062ea:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_HID_DeInit>:

static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006302:	2181      	movs	r1, #129	; 0x81
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff f824 	bl	8005352 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <USBD_HID_DeInit+0x2c>
  {
    pdev->pClassData = NULL;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_HID_Setup>:

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]

  if ( (req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_STANDARD ){
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 808e 	bne.w	8006478 <USBD_HID_Setup+0x14c>
      switch (req->bRequest)      {
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b0b      	cmp	r3, #11
 8006362:	f200 8082 	bhi.w	800646a <USBD_HID_Setup+0x13e>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USBD_HID_Setup+0x40>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	0800639d 	.word	0x0800639d
 8006370:	0800646b 	.word	0x0800646b
 8006374:	0800646b 	.word	0x0800646b
 8006378:	0800646b 	.word	0x0800646b
 800637c:	0800646b 	.word	0x0800646b
 8006380:	0800646b 	.word	0x0800646b
 8006384:	080063c5 	.word	0x080063c5
 8006388:	0800646b 	.word	0x0800646b
 800638c:	0800646b 	.word	0x0800646b
 8006390:	0800646b 	.word	0x0800646b
 8006394:	0800641d 	.word	0x0800641d
 8006398:	08006445 	.word	0x08006445
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d107      	bne.n	80063b6 <USBD_HID_Setup+0x8a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80063a6:	f107 030e 	add.w	r3, r7, #14
 80063aa:	2202      	movs	r2, #2
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8e6 	bl	8006580 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063b4:	e066      	b.n	8006484 <USBD_HID_Setup+0x158>
            USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff fdde 	bl	8005f7a <USBD_CtlError>
            ret = USBD_FAIL;
 80063be:	2302      	movs	r3, #2
 80063c0:	75fb      	strb	r3, [r7, #23]
          break;
 80063c2:	e05f      	b.n	8006484 <USBD_HID_Setup+0x158>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	885b      	ldrh	r3, [r3, #2]
 80063c8:	0a1b      	lsrs	r3, r3, #8
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b22      	cmp	r3, #34	; 0x22
 80063ce:	d108      	bne.n	80063e2 <USBD_HID_Setup+0xb6>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	88db      	ldrh	r3, [r3, #6]
 80063d4:	2b3f      	cmp	r3, #63	; 0x3f
 80063d6:	bf28      	it	cs
 80063d8:	233f      	movcs	r3, #63	; 0x3f
 80063da:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80063dc:	4b2c      	ldr	r3, [pc, #176]	; (8006490 <USBD_HID_Setup+0x164>)
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e015      	b.n	800640e <USBD_HID_Setup+0xe2>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	885b      	ldrh	r3, [r3, #2]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b21      	cmp	r3, #33	; 0x21
 80063ec:	d108      	bne.n	8006400 <USBD_HID_Setup+0xd4>
          {
            pbuf = USBD_HID_Desc;
 80063ee:	4b29      	ldr	r3, [pc, #164]	; (8006494 <USBD_HID_Setup+0x168>)
 80063f0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	88db      	ldrh	r3, [r3, #6]
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	bf28      	it	cs
 80063fa:	2309      	movcs	r3, #9
 80063fc:	83fb      	strh	r3, [r7, #30]
 80063fe:	e006      	b.n	800640e <USBD_HID_Setup+0xe2>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fdb9 	bl	8005f7a <USBD_CtlError>
            ret = USBD_FAIL;
 8006408:	2302      	movs	r3, #2
 800640a:	75fb      	strb	r3, [r7, #23]
            break;
 800640c:	e03a      	b.n	8006484 <USBD_HID_Setup+0x158>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800640e:	8bfb      	ldrh	r3, [r7, #30]
 8006410:	461a      	mov	r2, r3
 8006412:	69b9      	ldr	r1, [r7, #24]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8b3 	bl	8006580 <USBD_CtlSendData>
          break;
 800641a:	e033      	b.n	8006484 <USBD_HID_Setup+0x158>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006422:	2b03      	cmp	r3, #3
 8006424:	d107      	bne.n	8006436 <USBD_HID_Setup+0x10a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	3308      	adds	r3, #8
 800642a:	2201      	movs	r2, #1
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f8a6 	bl	8006580 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006434:	e026      	b.n	8006484 <USBD_HID_Setup+0x158>
            USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fd9e 	bl	8005f7a <USBD_CtlError>
            ret = USBD_FAIL;
 800643e:	2302      	movs	r3, #2
 8006440:	75fb      	strb	r3, [r7, #23]
          break;
 8006442:	e01f      	b.n	8006484 <USBD_HID_Setup+0x158>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644a:	2b03      	cmp	r3, #3
 800644c:	d106      	bne.n	800645c <USBD_HID_Setup+0x130>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	885b      	ldrh	r3, [r3, #2]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800645a:	e013      	b.n	8006484 <USBD_HID_Setup+0x158>
            USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fd8b 	bl	8005f7a <USBD_CtlError>
            ret = USBD_FAIL;
 8006464:	2302      	movs	r3, #2
 8006466:	75fb      	strb	r3, [r7, #23]
          break;
 8006468:	e00c      	b.n	8006484 <USBD_HID_Setup+0x158>

        default:
          USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fd84 	bl	8005f7a <USBD_CtlError>
          ret = USBD_FAIL;
 8006472:	2302      	movs	r3, #2
 8006474:	75fb      	strb	r3, [r7, #23]
          break;
 8006476:	e005      	b.n	8006484 <USBD_HID_Setup+0x158>
      }
  }else{
    	  USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fd7d 	bl	8005f7a <USBD_CtlError>
    	  ret = USBD_FAIL;
 8006480:	2302      	movs	r3, #2
 8006482:	75fb      	strb	r3, [r7, #23]
      }
  return ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000118 	.word	0x20000118
 8006494:	20000100 	.word	0x20000100

08006498 <USBD_HID_SendReport>:

uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len){
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d10c      	bne.n	80064d2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d108      	bne.n	80064d2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2201      	movs	r2, #1
 80064c4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	2181      	movs	r1, #129	; 0x81
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7fe ffe8 	bl	80054a2 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_HID_GetFSCfgDesc>:

static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length){
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2222      	movs	r2, #34	; 0x22
 80064e8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000094 	.word	0x20000094

080064fc <USBD_HID_GetHSCfgDesc>:

static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length){
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2222      	movs	r2, #34	; 0x22
 8006508:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800650a:	4b03      	ldr	r3, [pc, #12]	; (8006518 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200000b8 	.word	0x200000b8

0800651c <USBD_HID_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length){
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2222      	movs	r2, #34	; 0x22
 8006528:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800652a:	4b03      	ldr	r3, [pc, #12]	; (8006538 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	200000dc 	.word	0x200000dc

0800653c <USBD_HID_DataIn>:

static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum){
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	2200      	movs	r2, #0
 8006550:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr
	...

08006560 <USBD_HID_GetDeviceQualifierDesc>:

static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length){
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	220a      	movs	r2, #10
 800656c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800656e:	4b03      	ldr	r3, [pc, #12]	; (800657c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	2000010c 	.word	0x2000010c

08006580 <USBD_CtlSendData>:

USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2202      	movs	r2, #2
 8006592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006596:	88fa      	ldrh	r2, [r7, #6]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800659c:	88fa      	ldrh	r2, [r7, #6]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	2100      	movs	r1, #0
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7fe ff7a 	bl	80054a2 <USBD_LL_Transmit>
  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_CtlContinueSendData>:

USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	2100      	movs	r1, #0
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7fe ff68 	bl	80054a2 <USBD_LL_Transmit>
  return USBD_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_CtlContinueRx>:

USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	2100      	movs	r1, #0
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7fe ff79 	bl	80054e8 <USBD_LL_PrepareReceive>
  return USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBD_CtlSendStatus>:

USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev){
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006610:	2300      	movs	r3, #0
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe ff43 	bl	80054a2 <USBD_LL_Transmit>
  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CtlReceiveStatus>:

USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev){
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2205      	movs	r2, #5
 8006632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006636:	2300      	movs	r3, #0
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fe ff53 	bl	80054e8 <USBD_LL_PrepareReceive>
  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800664c:	480b      	ldr	r0, [pc, #44]	; (800667c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800664e:	490c      	ldr	r1, [pc, #48]	; (8006680 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006650:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006654:	e002      	b.n	800665c <LoopCopyDataInit>

08006656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800665a:	3304      	adds	r3, #4

0800665c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800665c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800665e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006660:	d3f9      	bcc.n	8006656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006664:	4c09      	ldr	r4, [pc, #36]	; (800668c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006668:	e001      	b.n	800666e <LoopFillZerobss>

0800666a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800666a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800666c:	3204      	adds	r2, #4

0800666e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800666e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006670:	d3fb      	bcc.n	800666a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006672:	f000 f80f 	bl	8006694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006676:	f7f9 fe21 	bl	80002bc <main>
  bx lr
 800667a:	4770      	bx	lr
  ldr r0, =_sdata
 800667c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006680:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8006684:	08006778 	.word	0x08006778
  ldr r2, =_sbss
 8006688:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800668c:	2000094c 	.word	0x2000094c

08006690 <ADC1_2_IRQHandler>:


    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006690:	e7fe      	b.n	8006690 <ADC1_2_IRQHandler>
	...

08006694 <__libc_init_array>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	2600      	movs	r6, #0
 8006698:	4d0c      	ldr	r5, [pc, #48]	; (80066cc <__libc_init_array+0x38>)
 800669a:	4c0d      	ldr	r4, [pc, #52]	; (80066d0 <__libc_init_array+0x3c>)
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	42a6      	cmp	r6, r4
 80066a2:	d109      	bne.n	80066b8 <__libc_init_array+0x24>
 80066a4:	f000 f822 	bl	80066ec <_init>
 80066a8:	2600      	movs	r6, #0
 80066aa:	4d0a      	ldr	r5, [pc, #40]	; (80066d4 <__libc_init_array+0x40>)
 80066ac:	4c0a      	ldr	r4, [pc, #40]	; (80066d8 <__libc_init_array+0x44>)
 80066ae:	1b64      	subs	r4, r4, r5
 80066b0:	10a4      	asrs	r4, r4, #2
 80066b2:	42a6      	cmp	r6, r4
 80066b4:	d105      	bne.n	80066c2 <__libc_init_array+0x2e>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066bc:	4798      	blx	r3
 80066be:	3601      	adds	r6, #1
 80066c0:	e7ee      	b.n	80066a0 <__libc_init_array+0xc>
 80066c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c6:	4798      	blx	r3
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7f2      	b.n	80066b2 <__libc_init_array+0x1e>
 80066cc:	08006770 	.word	0x08006770
 80066d0:	08006770 	.word	0x08006770
 80066d4:	08006770 	.word	0x08006770
 80066d8:	08006774 	.word	0x08006774

080066dc <memset>:
 80066dc:	4603      	mov	r3, r0
 80066de:	4402      	add	r2, r0
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d100      	bne.n	80066e6 <memset+0xa>
 80066e4:	4770      	bx	lr
 80066e6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ea:	e7f9      	b.n	80066e0 <memset+0x4>

080066ec <_init>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr

080066f8 <_fini>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr
