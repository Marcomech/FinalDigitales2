
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b8  080068b8  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  080068b8  080068b8  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068b8  080068b8  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080068c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  08006a18  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08006a18  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006db3  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a2a  00000000  00000000  00026f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00027960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  00027de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012af8  00000000  00000000  00028228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003a76  00000000  00000000  0003ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ddab  00000000  00000000  0003e796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009c541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001354  00000000  00000000  0009c594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08006834 	.word	0x08006834

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08006834 	.word	0x08006834

0800014c <SystemInit>:

uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8U]  = {0, 0, 0, 0, 1, 2, 3, 4};

void SystemInit (void){}
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <SysTick_Handler>:
void USB_DEVICE_Init(void);
void Error_Handler();

extern PCD_HandleTypeDef hpcd_USB_FS;

void SysTick_Handler(void){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
   HAL_IncTick();
 800015c:	f002 fbfe 	bl	800295c <HAL_IncTick>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800016a:	f000 ffc0 	bl	80010ee <HAL_PCD_IRQHandler>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	2000045c 	.word	0x2000045c

08000178 <main>:

keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};

int main(void){
 8000178:	b580      	push	{r7, lr}
 800017a:	b084      	sub	sp, #16
 800017c:	af00      	add	r7, sp, #0
  HAL_Init();
 800017e:	f002 fba9 	bl	80028d4 <HAL_Init>
  SystemClock_Config();
 8000182:	f000 f83f 	bl	8000204 <SystemClock_Config>
  USB_DEVICE_Init();
 8000186:	f000 f897 	bl	80002b8 <USB_DEVICE_Init>

  uint8_t report[sizeof(keyboardHID)];

  for (volatile int i=0; i<=5; i++){
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	e030      	b.n	80001f2 <main+0x7a>
	  HAL_Delay(200);
 8000190:	20c8      	movs	r0, #200	; 0xc8
 8000192:	f002 fbf5 	bl	8002980 <HAL_Delay>
	  keyboardhid.KeyCode1 = 0x2C;
 8000196:	4b19      	ldr	r3, [pc, #100]	; (80001fc <main+0x84>)
 8000198:	222c      	movs	r2, #44	; 0x2c
 800019a:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KeyCode2 = 0x0B;
 800019c:	4b17      	ldr	r3, [pc, #92]	; (80001fc <main+0x84>)
 800019e:	220b      	movs	r2, #11
 80001a0:	70da      	strb	r2, [r3, #3]
	  //keyboardhid.KeyCode3 = 0x12;
	  keyboardhid.KeyCode4 = 0x0F;
 80001a2:	4b16      	ldr	r3, [pc, #88]	; (80001fc <main+0x84>)
 80001a4:	220f      	movs	r2, #15
 80001a6:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KeyCode5 = 0x04;
 80001a8:	4b14      	ldr	r3, [pc, #80]	; (80001fc <main+0x84>)
 80001aa:	2204      	movs	r2, #4
 80001ac:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(report));
 80001ae:	2208      	movs	r2, #8
 80001b0:	4912      	ldr	r1, [pc, #72]	; (80001fc <main+0x84>)
 80001b2:	4813      	ldr	r0, [pc, #76]	; (8000200 <main+0x88>)
 80001b4:	f006 fa38 	bl	8006628 <USBD_HID_SendReport>
	  HAL_Delay(30);
 80001b8:	201e      	movs	r0, #30
 80001ba:	f002 fbe1 	bl	8002980 <HAL_Delay>

	  keyboardhid.KeyCode1 = 0x00;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <main+0x84>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KeyCode2 = 0x00;
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <main+0x84>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KeyCode3 = 0x00;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <main+0x84>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KeyCode4 = 0x00;
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <main+0x84>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KeyCode5 = 0x00;
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <main+0x84>)
 80001d8:	2200      	movs	r2, #0
 80001da:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(report));
 80001dc:	2208      	movs	r2, #8
 80001de:	4907      	ldr	r1, [pc, #28]	; (80001fc <main+0x84>)
 80001e0:	4807      	ldr	r0, [pc, #28]	; (8000200 <main+0x88>)
 80001e2:	f006 fa21 	bl	8006628 <USBD_HID_SendReport>
	  HAL_Delay(200);
 80001e6:	20c8      	movs	r0, #200	; 0xc8
 80001e8:	f002 fbca 	bl	8002980 <HAL_Delay>
  for (volatile int i=0; i<=5; i++){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3301      	adds	r3, #1
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b05      	cmp	r3, #5
 80001f6:	ddcb      	ble.n	8000190 <main+0x18>
  }
  while (1)  {  }
 80001f8:	e7fe      	b.n	80001f8 <main+0x80>
 80001fa:	bf00      	nop
 80001fc:	20000174 	.word	0x20000174
 8000200:	20000194 	.word	0x20000194

08000204 <SystemClock_Config>:
}

void SystemClock_Config(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	; 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f006 fb06 	bl	8006824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)  {
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f994 	bl	8000588 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
    Error_Handler();
 8000266:	f000 f84d 	bl	8000304 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)  {
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fbfe 	bl	8000a88 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
    Error_Handler();
 8000292:	f000 f837 	bl	8000304 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000296:	2310      	movs	r3, #16
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)  {
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fcdb 	bl	8000c5c <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0xac>
    Error_Handler();
 80002ac:	f000 f82a 	bl	8000304 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3750      	adds	r7, #80	; 0x50
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <USB_DEVICE_Init>:

void USB_DEVICE_Init(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)  {
 80002bc:	2200      	movs	r2, #0
 80002be:	490e      	ldr	r1, [pc, #56]	; (80002f8 <USB_DEVICE_Init+0x40>)
 80002c0:	480e      	ldr	r0, [pc, #56]	; (80002fc <USB_DEVICE_Init+0x44>)
 80002c2:	f004 fcb7 	bl	8004c34 <USBD_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <USB_DEVICE_Init+0x18>
    Error_Handler();
 80002cc:	f000 f81a 	bl	8000304 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)  {
 80002d0:	490b      	ldr	r1, [pc, #44]	; (8000300 <USB_DEVICE_Init+0x48>)
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <USB_DEVICE_Init+0x44>)
 80002d4:	f004 fcd9 	bl	8004c8a <USBD_RegisterClass>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <USB_DEVICE_Init+0x2a>
    Error_Handler();
 80002de:	f000 f811 	bl	8000304 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)  {
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <USB_DEVICE_Init+0x44>)
 80002e4:	f004 fcea 	bl	8004cbc <USBD_Start>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <USB_DEVICE_Init+0x3a>
    Error_Handler();
 80002ee:	f000 f809 	bl	8000304 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	2000000c 	.word	0x2000000c
 80002fc:	20000194 	.word	0x20000194
 8000300:	2000005c 	.word	0x2000005c

08000304 <Error_Handler>:


void Error_Handler(){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  //__disable_irq();
  while (1)  {  }
 8000308:	e7fe      	b.n	8000308 <Error_Handler+0x4>
	...

0800030c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800030c:	f7ff ff1e 	bl	800014c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000312:	490c      	ldr	r1, [pc, #48]	; (8000344 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a09      	ldr	r2, [pc, #36]	; (800034c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000328:	4c09      	ldr	r4, [pc, #36]	; (8000350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000336:	f006 fa51 	bl	80067dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ff1d 	bl	8000178 <main>
  bx lr
 800033e:	4770      	bx	lr
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000348:	080068c0 	.word	0x080068c0
  ldr r2, =_sbss
 800034c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000350:	2000094c 	.word	0x2000094c

08000354 <ADC1_2_IRQHandler>:


    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC1_2_IRQHandler>
	...

08000358 <__NVIC_SetPriorityGrouping>:
#define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */



__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f003 0307 	and.w	r3, r3, #7
 8000366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <__NVIC_SetPriorityGrouping+0x44>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000374:	4013      	ands	r3, r2
 8000376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <__NVIC_SetPriorityGrouping+0x44>)
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	60d3      	str	r3, [r2, #12]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_GetPriorityGrouping>:



__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <__NVIC_GetPriorityGrouping+0x18>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	0a1b      	lsrs	r3, r3, #8
 80003aa:	f003 0307 	and.w	r3, r3, #7
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <__NVIC_EnableIRQ>:



__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	db0b      	blt.n	80003e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	f003 021f 	and.w	r2, r3, #31
 80003d4:	4906      	ldr	r1, [pc, #24]	; (80003f0 <__NVIC_EnableIRQ+0x34>)
 80003d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003da:	095b      	lsrs	r3, r3, #5
 80003dc:	2001      	movs	r0, #1
 80003de:	fa00 f202 	lsl.w	r2, r0, r2
 80003e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	e000e100 	.word	0xe000e100

080003f4 <__NVIC_SetPriority>:
}



__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	db0a      	blt.n	800041e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <__NVIC_SetPriority+0x4c>)
 800040e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000412:	0112      	lsls	r2, r2, #4
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	440b      	add	r3, r1
 8000418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041c:	e00a      	b.n	8000434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4908      	ldr	r1, [pc, #32]	; (8000444 <__NVIC_SetPriority+0x50>)
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	f003 030f 	and.w	r3, r3, #15
 800042a:	3b04      	subs	r3, #4
 800042c:	0112      	lsls	r2, r2, #4
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	440b      	add	r3, r1
 8000432:	761a      	strb	r2, [r3, #24]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000e100 	.word	0xe000e100
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <NVIC_EncodePriority>:
}



__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <SysTick_Config>:

#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)


__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004bc:	d301      	bcc.n	80004c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004be:	2301      	movs	r3, #1
 80004c0:	e00f      	b.n	80004e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <SysTick_Config+0x40>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ca:	210f      	movs	r1, #15
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295
 80004d0:	f7ff ff90 	bl	80003f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SysTick_Config+0x40>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <SysTick_Config+0x40>)
 80004dc:	2207      	movs	r2, #7
 80004de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	e000e010 	.word	0xe000e010

080004f0 <HAL_GetTick>:

#endif /* __STM32F1xx_HAL_H */



__weak uint32_t HAL_GetTick(void){
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return uwTick;
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <HAL_GetTick+0x10>)
 80004f6:	681b      	ldr	r3, [r3, #0]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000458 	.word	0x20000458

08000504 <HAL_NVIC_SetPriorityGrouping>:

void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  NVIC_SetPriorityGrouping(PriorityGroup);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff ff23 	bl	8000358 <__NVIC_SetPriorityGrouping>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_SetPriority>:

void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
 8000526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800052c:	f7ff ff38 	bl	80003a0 <__NVIC_GetPriorityGrouping>
 8000530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	68b9      	ldr	r1, [r7, #8]
 8000536:	6978      	ldr	r0, [r7, #20]
 8000538:	f7ff ff86 	bl	8000448 <NVIC_EncodePriority>
 800053c:	4602      	mov	r2, r0
 800053e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000542:	4611      	mov	r1, r2
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff55 	bl	80003f4 <__NVIC_SetPriority>
}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <HAL_NVIC_EnableIRQ>:

void HAL_NVIC_EnableIRQ(IRQn_Type IRQn){
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	4603      	mov	r3, r0
 800055a:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  NVIC_EnableIRQ(IRQn);
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff2b 	bl	80003bc <__NVIC_EnableIRQ>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <HAL_SYSTICK_Config>:

uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb){
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff ff98 	bl	80004ac <SysTick_Config>
 800057c:	4603      	mov	r3, r0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <HAL_RCC_OscConfig>:

static void RCC_Delay(uint32_t mdelay);

HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  if (RCC_OscInitStruct == NULL)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <HAL_RCC_OscConfig+0x12>
  {
   return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e26c      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	f000 8087 	beq.w	80006b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005a8:	4b92      	ldr	r3, [pc, #584]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f003 030c 	and.w	r3, r3, #12
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d00c      	beq.n	80005ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b4:	4b8f      	ldr	r3, [pc, #572]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	f003 030c 	and.w	r3, r3, #12
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d112      	bne.n	80005e6 <HAL_RCC_OscConfig+0x5e>
 80005c0:	4b8c      	ldr	r3, [pc, #560]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005cc:	d10b      	bne.n	80005e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ce:	4b89      	ldr	r3, [pc, #548]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d06c      	beq.n	80006b4 <HAL_RCC_OscConfig+0x12c>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d168      	bne.n	80006b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e246      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005ee:	d106      	bne.n	80005fe <HAL_RCC_OscConfig+0x76>
 80005f0:	4b80      	ldr	r3, [pc, #512]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a7f      	ldr	r2, [pc, #508]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e02e      	b.n	800065c <HAL_RCC_OscConfig+0xd4>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10c      	bne.n	8000620 <HAL_RCC_OscConfig+0x98>
 8000606:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a7a      	ldr	r2, [pc, #488]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800060c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	4b78      	ldr	r3, [pc, #480]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a77      	ldr	r2, [pc, #476]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e01d      	b.n	800065c <HAL_RCC_OscConfig+0xd4>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000628:	d10c      	bne.n	8000644 <HAL_RCC_OscConfig+0xbc>
 800062a:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a71      	ldr	r2, [pc, #452]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a6e      	ldr	r2, [pc, #440]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800063c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e00b      	b.n	800065c <HAL_RCC_OscConfig+0xd4>
 8000644:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a6a      	ldr	r2, [pc, #424]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800064a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a67      	ldr	r2, [pc, #412]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000664:	f7ff ff44 	bl	80004f0 <HAL_GetTick>
 8000668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800066a:	e008      	b.n	800067e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800066c:	f7ff ff40 	bl	80004f0 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	2b64      	cmp	r3, #100	; 0x64
 8000678:	d901      	bls.n	800067e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800067a:	2303      	movs	r3, #3
 800067c:	e1fa      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800067e:	4b5d      	ldr	r3, [pc, #372]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f0      	beq.n	800066c <HAL_RCC_OscConfig+0xe4>
 800068a:	e014      	b.n	80006b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800068c:	f7ff ff30 	bl	80004f0 <HAL_GetTick>
 8000690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000692:	e008      	b.n	80006a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000694:	f7ff ff2c 	bl	80004f0 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	2b64      	cmp	r3, #100	; 0x64
 80006a0:	d901      	bls.n	80006a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80006a2:	2303      	movs	r3, #3
 80006a4:	e1e6      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006a6:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f0      	bne.n	8000694 <HAL_RCC_OscConfig+0x10c>
 80006b2:	e000      	b.n	80006b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d063      	beq.n	800078a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80006c2:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f003 030c 	and.w	r3, r3, #12
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00b      	beq.n	80006e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006ce:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	f003 030c 	and.w	r3, r3, #12
 80006d6:	2b08      	cmp	r3, #8
 80006d8:	d11c      	bne.n	8000714 <HAL_RCC_OscConfig+0x18c>
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d116      	bne.n	8000714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006e6:	4b43      	ldr	r3, [pc, #268]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <HAL_RCC_OscConfig+0x176>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d001      	beq.n	80006fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e1ba      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	4939      	ldr	r1, [pc, #228]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800070e:	4313      	orrs	r3, r2
 8000710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000712:	e03a      	b.n	800078a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d020      	beq.n	800075e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <HAL_RCC_OscConfig+0x270>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000722:	f7ff fee5 	bl	80004f0 <HAL_GetTick>
 8000726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000728:	e008      	b.n	800073c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800072a:	f7ff fee1 	bl	80004f0 <HAL_GetTick>
 800072e:	4602      	mov	r2, r0
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	2b02      	cmp	r3, #2
 8000736:	d901      	bls.n	800073c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000738:	2303      	movs	r3, #3
 800073a:	e19b      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0f0      	beq.n	800072a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4927      	ldr	r1, [pc, #156]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000758:	4313      	orrs	r3, r2
 800075a:	600b      	str	r3, [r1, #0]
 800075c:	e015      	b.n	800078a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <HAL_RCC_OscConfig+0x270>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000764:	f7ff fec4 	bl	80004f0 <HAL_GetTick>
 8000768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800076a:	e008      	b.n	800077e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800076c:	f7ff fec0 	bl	80004f0 <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	2b02      	cmp	r3, #2
 8000778:	d901      	bls.n	800077e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800077a:	2303      	movs	r3, #3
 800077c:	e17a      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f0      	bne.n	800076c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d03a      	beq.n	800080c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d019      	beq.n	80007d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_RCC_OscConfig+0x274>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007a4:	f7ff fea4 	bl	80004f0 <HAL_GetTick>
 80007a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007aa:	e008      	b.n	80007be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007ac:	f7ff fea0 	bl	80004f0 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d901      	bls.n	80007be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80007ba:	2303      	movs	r3, #3
 80007bc:	e15a      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f0      	beq.n	80007ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fb50 	bl	8000e70 <RCC_Delay>
 80007d0:	e01c      	b.n	800080c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_RCC_OscConfig+0x274>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007d8:	f7ff fe8a 	bl	80004f0 <HAL_GetTick>
 80007dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007de:	e00f      	b.n	8000800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007e0:	f7ff fe86 	bl	80004f0 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d908      	bls.n	8000800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80007ee:	2303      	movs	r3, #3
 80007f0:	e140      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	42420000 	.word	0x42420000
 80007fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000800:	4b9e      	ldr	r3, [pc, #632]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1e9      	bne.n	80007e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	2b00      	cmp	r3, #0
 8000816:	f000 80a6 	beq.w	8000966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800081e:	4b97      	ldr	r3, [pc, #604]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10d      	bne.n	8000846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b94      	ldr	r3, [pc, #592]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a93      	ldr	r2, [pc, #588]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b91      	ldr	r3, [pc, #580]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000842:	2301      	movs	r3, #1
 8000844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000846:	4b8e      	ldr	r3, [pc, #568]	; (8000a80 <HAL_RCC_OscConfig+0x4f8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800084e:	2b00      	cmp	r3, #0
 8000850:	d118      	bne.n	8000884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000852:	4b8b      	ldr	r3, [pc, #556]	; (8000a80 <HAL_RCC_OscConfig+0x4f8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a8a      	ldr	r2, [pc, #552]	; (8000a80 <HAL_RCC_OscConfig+0x4f8>)
 8000858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800085e:	f7ff fe47 	bl	80004f0 <HAL_GetTick>
 8000862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000864:	e008      	b.n	8000878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000866:	f7ff fe43 	bl	80004f0 <HAL_GetTick>
 800086a:	4602      	mov	r2, r0
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	2b64      	cmp	r3, #100	; 0x64
 8000872:	d901      	bls.n	8000878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000874:	2303      	movs	r3, #3
 8000876:	e0fd      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000878:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <HAL_RCC_OscConfig+0x4f8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f0      	beq.n	8000866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d106      	bne.n	800089a <HAL_RCC_OscConfig+0x312>
 800088c:	4b7b      	ldr	r3, [pc, #492]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 800088e:	6a1b      	ldr	r3, [r3, #32]
 8000890:	4a7a      	ldr	r2, [pc, #488]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6213      	str	r3, [r2, #32]
 8000898:	e02d      	b.n	80008f6 <HAL_RCC_OscConfig+0x36e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10c      	bne.n	80008bc <HAL_RCC_OscConfig+0x334>
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4a75      	ldr	r2, [pc, #468]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	6213      	str	r3, [r2, #32]
 80008ae:	4b73      	ldr	r3, [pc, #460]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4a72      	ldr	r2, [pc, #456]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008b4:	f023 0304 	bic.w	r3, r3, #4
 80008b8:	6213      	str	r3, [r2, #32]
 80008ba:	e01c      	b.n	80008f6 <HAL_RCC_OscConfig+0x36e>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d10c      	bne.n	80008de <HAL_RCC_OscConfig+0x356>
 80008c4:	4b6d      	ldr	r3, [pc, #436]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4a6c      	ldr	r2, [pc, #432]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6213      	str	r3, [r2, #32]
 80008d0:	4b6a      	ldr	r3, [pc, #424]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	4a69      	ldr	r2, [pc, #420]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6213      	str	r3, [r2, #32]
 80008dc:	e00b      	b.n	80008f6 <HAL_RCC_OscConfig+0x36e>
 80008de:	4b67      	ldr	r3, [pc, #412]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008e0:	6a1b      	ldr	r3, [r3, #32]
 80008e2:	4a66      	ldr	r2, [pc, #408]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008e4:	f023 0301 	bic.w	r3, r3, #1
 80008e8:	6213      	str	r3, [r2, #32]
 80008ea:	4b64      	ldr	r3, [pc, #400]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008ec:	6a1b      	ldr	r3, [r3, #32]
 80008ee:	4a63      	ldr	r2, [pc, #396]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80008f0:	f023 0304 	bic.w	r3, r3, #4
 80008f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d015      	beq.n	800092a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008fe:	f7ff fdf7 	bl	80004f0 <HAL_GetTick>
 8000902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000904:	e00a      	b.n	800091c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000906:	f7ff fdf3 	bl	80004f0 <HAL_GetTick>
 800090a:	4602      	mov	r2, r0
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	f241 3288 	movw	r2, #5000	; 0x1388
 8000914:	4293      	cmp	r3, r2
 8000916:	d901      	bls.n	800091c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000918:	2303      	movs	r3, #3
 800091a:	e0ab      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800091c:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0ee      	beq.n	8000906 <HAL_RCC_OscConfig+0x37e>
 8000928:	e014      	b.n	8000954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800092a:	f7ff fde1 	bl	80004f0 <HAL_GetTick>
 800092e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000930:	e00a      	b.n	8000948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f7ff fddd 	bl	80004f0 <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000940:	4293      	cmp	r3, r2
 8000942:	d901      	bls.n	8000948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000944:	2303      	movs	r3, #3
 8000946:	e095      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1ee      	bne.n	8000932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000954:	7dfb      	ldrb	r3, [r7, #23]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d105      	bne.n	8000966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800095a:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a47      	ldr	r2, [pc, #284]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8081 	beq.w	8000a72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000970:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 030c 	and.w	r3, r3, #12
 8000978:	2b08      	cmp	r3, #8
 800097a:	d061      	beq.n	8000a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d146      	bne.n	8000a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000984:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <HAL_RCC_OscConfig+0x4fc>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098a:	f7ff fdb1 	bl	80004f0 <HAL_GetTick>
 800098e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000990:	e008      	b.n	80009a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000992:	f7ff fdad 	bl	80004f0 <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2b02      	cmp	r3, #2
 800099e:	d901      	bls.n	80009a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80009a0:	2303      	movs	r3, #3
 80009a2:	e067      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009a4:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1f0      	bne.n	8000992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b8:	d108      	bne.n	80009cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	492d      	ldr	r1, [pc, #180]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80009c8:	4313      	orrs	r3, r2
 80009ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a19      	ldr	r1, [r3, #32]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	430b      	orrs	r3, r1
 80009de:	4927      	ldr	r1, [pc, #156]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 80009e0:	4313      	orrs	r3, r2
 80009e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <HAL_RCC_OscConfig+0x4fc>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ea:	f7ff fd81 	bl	80004f0 <HAL_GetTick>
 80009ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009f0:	e008      	b.n	8000a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009f2:	f7ff fd7d 	bl	80004f0 <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d901      	bls.n	8000a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e037      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0f0      	beq.n	80009f2 <HAL_RCC_OscConfig+0x46a>
 8000a10:	e02f      	b.n	8000a72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_RCC_OscConfig+0x4fc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a18:	f7ff fd6a 	bl	80004f0 <HAL_GetTick>
 8000a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a1e:	e008      	b.n	8000a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a20:	f7ff fd66 	bl	80004f0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d901      	bls.n	8000a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e020      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f0      	bne.n	8000a20 <HAL_RCC_OscConfig+0x498>
 8000a3e:	e018      	b.n	8000a72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d101      	bne.n	8000a4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e013      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_RCC_OscConfig+0x4f4>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d106      	bne.n	8000a6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d001      	beq.n	8000a72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40007000 	.word	0x40007000
 8000a84:	42420060 	.word	0x42420060

08000a88 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  if (RCC_ClkInitStruct == NULL)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e0d0      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d910      	bls.n	8000acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aaa:	4b67      	ldr	r3, [pc, #412]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f023 0207 	bic.w	r2, r3, #7
 8000ab2:	4965      	ldr	r1, [pc, #404]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000aba:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d001      	beq.n	8000acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e0b8      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d020      	beq.n	8000b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ae4:	4b59      	ldr	r3, [pc, #356]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	4a58      	ldr	r2, [pc, #352]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d005      	beq.n	8000b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000afc:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	4a52      	ldr	r2, [pc, #328]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b08:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	494d      	ldr	r1, [pc, #308]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b16:	4313      	orrs	r3, r2
 8000b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d040      	beq.n	8000ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d107      	bne.n	8000b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d115      	bne.n	8000b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e07f      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d107      	bne.n	8000b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b46:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d109      	bne.n	8000b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e073      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b56:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e06b      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b66:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f023 0203 	bic.w	r2, r3, #3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4936      	ldr	r1, [pc, #216]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b74:	4313      	orrs	r3, r2
 8000b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b78:	f7ff fcba 	bl	80004f0 <HAL_GetTick>
 8000b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b7e:	e00a      	b.n	8000b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b80:	f7ff fcb6 	bl	80004f0 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e053      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 020c 	and.w	r2, r3, #12
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d1eb      	bne.n	8000b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d210      	bcs.n	8000bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f023 0207 	bic.w	r2, r3, #7
 8000bbe:	4922      	ldr	r1, [pc, #136]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_RCC_ClockConfig+0x1c0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d001      	beq.n	8000bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e032      	b.n	8000c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4916      	ldr	r1, [pc, #88]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d009      	beq.n	8000c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	490e      	ldr	r1, [pc, #56]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c16:	f000 f8d7 	bl	8000dc8 <HAL_RCC_GetSysClockFreq>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_RCC_ClockConfig+0x1c4>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	490a      	ldr	r1, [pc, #40]	; (8000c50 <HAL_RCC_ClockConfig+0x1c8>)
 8000c28:	5ccb      	ldrb	r3, [r1, r3]
 8000c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_RCC_ClockConfig+0x1cc>)
 8000c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_RCC_ClockConfig+0x1d0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fe60 	bl	80028fc <HAL_InitTick>

  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	08006894 	.word	0x08006894
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_RCCEx_PeriphCLKConfig>:

HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d07d      	beq.n	8000d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10d      	bne.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d118      	bne.n	8000ce2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cb0:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a42      	ldr	r2, [pc, #264]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fc18 	bl	80004f0 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc4:	f7ff fc14 	bl	80004f0 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e06d      	b.n	8000db2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000cea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d02e      	beq.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d027      	beq.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d014      	beq.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d26:	f7ff fbe3 	bl	80004f0 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d2c:	e00a      	b.n	8000d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fbdf 	bl	80004f0 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e036      	b.n	8000db2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0ee      	beq.n	8000d2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4917      	ldr	r1, [pc, #92]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d62:	7dfb      	ldrb	r3, [r7, #23]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d105      	bne.n	8000d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d008      	beq.n	8000d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	490b      	ldr	r1, [pc, #44]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4904      	ldr	r1, [pc, #16]	; (8000dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40007000 	.word	0x40007000
 8000dc4:	42420440 	.word	0x42420440

08000dc8 <HAL_RCC_GetSysClockFreq>:

uint32_t HAL_RCC_GetSysClockFreq(void){
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0

  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]

  tmpreg = RCC->CFGR;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d002      	beq.n	8000df8 <HAL_RCC_GetSysClockFreq+0x30>
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d003      	beq.n	8000dfe <HAL_RCC_GetSysClockFreq+0x36>
 8000df6:	e027      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8000dfa:	613b      	str	r3, [r7, #16]
      break;
 8000dfc:	e027      	b.n	8000e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	0c9b      	lsrs	r3, r3, #18
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e08:	5cd3      	ldrb	r3, [r2, r3]
 8000e0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d010      	beq.n	8000e38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	0c5b      	lsrs	r3, r3, #17
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e2a:	fb02 f203 	mul.w	r2, r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	e004      	b.n	8000e42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	613b      	str	r3, [r7, #16]
      break;
 8000e46:	e002      	b.n	8000e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e4a:	613b      	str	r3, [r7, #16]
      break;
 8000e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e4e:	693b      	ldr	r3, [r7, #16]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	007a1200 	.word	0x007a1200
 8000e64:	080068a4 	.word	0x080068a4
 8000e68:	080068b4 	.word	0x080068b4
 8000e6c:	003d0900 	.word	0x003d0900

08000e70 <RCC_Delay>:

static void RCC_Delay(uint32_t mdelay){
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <RCC_Delay+0x34>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <RCC_Delay+0x38>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	0a5b      	lsrs	r3, r3, #9
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	60fb      	str	r3, [r7, #12]
  do  {
    __NOP();
 8000e8c:	bf00      	nop
  }
  while (Delay --);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f9      	bne.n	8000e8c <RCC_Delay+0x1c>
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	10624dd3 	.word	0x10624dd3

08000eac <HAL_PCD_Init>:
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd);
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal);
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal);


HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd){
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af06      	add	r7, sp, #24
 8000eb2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  if (hpcd == NULL)  {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_PCD_Init+0x12>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e0f1      	b.n	80010a2 <HAL_PCD_Init+0x1f6>
  }
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  if (hpcd->State == HAL_PCD_STATE_RESET)  {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d106      	bne.n	8000ed8 <HAL_PCD_Init+0x2c>
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f004 f930 	bl	8005138 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2203      	movs	r2, #3
 8000edc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fd95 	bl	8002a14 <USB_DisableGlobalInt>

  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)  {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	687e      	ldr	r6, [r7, #4]
 8000ef2:	466d      	mov	r5, sp
 8000ef4:	f106 0410 	add.w	r4, r6, #16
 8000ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	602b      	str	r3, [r5, #0]
 8000f00:	1d33      	adds	r3, r6, #4
 8000f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f001 fd5f 	bl	80029c8 <USB_CoreInit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <HAL_PCD_Init+0x70>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2202      	movs	r2, #2
 8000f14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0c2      	b.n	80010a2 <HAL_PCD_Init+0x1f6>
  }

  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fd90 	bl	8002a48 <USB_SetCurrentMode>

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)  {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e040      	b.n	8000fb0 <HAL_PCD_Init+0x104>
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3303      	adds	r3, #3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3338      	adds	r3, #56	; 0x38
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	333c      	adds	r3, #60	; 0x3c
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3340      	adds	r3, #64	; 0x40
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)  {
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3301      	adds	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3b9      	bcc.n	8000f2e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e044      	b.n	800104a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	3301      	adds	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3b5      	bcc.n	8000fc0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	687e      	ldr	r6, [r7, #4]
 800105c:	466d      	mov	r5, sp
 800105e:	f106 0410 	add.w	r4, r6, #16
 8001062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	602b      	str	r3, [r5, #0]
 800106a:	1d33      	adds	r3, r6, #4
 800106c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f001 fcf6 	bl	8002a60 <USB_DevInit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2202      	movs	r2, #2
 800107e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00d      	b.n	80010a2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fd12 	bl	8004ac4 <USB_DevDisconnect>

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010aa <HAL_PCD_Start>:

HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd){
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_PCD_Start+0x16>
 80010bc:	2302      	movs	r3, #2
 80010be:	e012      	b.n	80010e6 <HAL_PCD_Start+0x3c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fc8b 	bl	80029e8 <USB_EnableGlobalInt>

  (void)USB_DevConnect(hpcd->Instance);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fcea 	bl	8004ab0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_PCD_IRQHandler>:

void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b088      	sub	sp, #32
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fcec 	bl	8004ad8 <USB_ReadInterrupts>
 8001100:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fb06 	bl	800171e <PCD_EP_ISR_Handler>

    return;
 8001112:	e11b      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111a:	2b00      	cmp	r3, #0
 800111c:	d013      	beq.n	8001146 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001130:	b292      	uxth	r2, r2
 8001132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44


    HAL_PCD_ResetCallback(hpcd);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f004 f879 	bl	800522e <HAL_PCD_ResetCallback>

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800113c:	2100      	movs	r1, #0
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f907 	bl	8001352 <HAL_PCD_SetAddress>

    return;
 8001144:	e102      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001162:	b292      	uxth	r2, r2
 8001164:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001168:	e0f0      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00c      	beq.n	800118e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001186:	b292      	uxth	r2, r2
 8001188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800118c:	e0de      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d027      	beq.n	80011e8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0204 	bic.w	r2, r2, #4
 80011aa:	b292      	uxth	r2, r2
 80011ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0208 	bic.w	r2, r2, #8
 80011c2:	b292      	uxth	r2, r2
 80011c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40


    HAL_PCD_ResumeCallback(hpcd);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f004 f869 	bl	80052a0 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011e0:	b292      	uxth	r2, r2
 80011e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011e6:	e0b1      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8085 	beq.w	80012fe <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
 80011f8:	e011      	b.n	800121e <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	441a      	add	r2, r3
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	8812      	ldrh	r2, [r2, #0]
 800120a:	b292      	uxth	r2, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	f107 0120 	add.w	r1, r7, #32
 8001212:	440b      	add	r3, r1
 8001214:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	3301      	adds	r3, #1
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d9ea      	bls.n	80011fa <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	b292      	uxth	r2, r2
 8001238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	b292      	uxth	r2, r2
 8001250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001254:	bf00      	nop
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125e:	b29b      	uxth	r3, r3
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f6      	beq.n	8001256 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800127a:	b292      	uxth	r2, r2
 800127c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	77fb      	strb	r3, [r7, #31]
 8001284:	e010      	b.n	80012a8 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4611      	mov	r1, r2
 800128e:	7ffa      	ldrb	r2, [r7, #31]
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	440a      	add	r2, r1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	f107 0120 	add.w	r1, r7, #32
 800129a:	440b      	add	r3, r1
 800129c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	7ffb      	ldrb	r3, [r7, #31]
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d9eb      	bls.n	8001286 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0208 	orr.w	r2, r2, #8
 80012c0:	b292      	uxth	r2, r2
 80012c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d8:	b292      	uxth	r2, r2
 80012da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	b292      	uxth	r2, r2
 80012f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    HAL_PCD_SuspendCallback(hpcd);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f003 ffb8 	bl	800526c <HAL_PCD_SuspendCallback>

    return;
 80012fc:	e026      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00f      	beq.n	8001328 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800131a:	b292      	uxth	r2, r2
 800131c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    HAL_PCD_SOFCallback(hpcd);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f003 ff76 	bl	8005212 <HAL_PCD_SOFCallback>

    return;
 8001326:	e011      	b.n	800134c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001344:	b292      	uxth	r2, r2
 8001346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800134a:	bf00      	nop
  }
}
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_PCD_SetAddress>:

HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_PCD_SetAddress+0x1a>
 8001368:	2302      	movs	r3, #2
 800136a:	e013      	b.n	8001394 <HAL_PCD_SetAddress+0x42>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fb80 	bl	8004a8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_PCD_EP_Open>:

HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	70fb      	strb	r3, [r7, #3]
 80013ae:	460b      	mov	r3, r1
 80013b0:	803b      	strh	r3, [r7, #0]
 80013b2:	4613      	mov	r3, r2
 80013b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da0e      	bge.n	80013e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	705a      	strb	r2, [r3, #1]
 80013de:	e00e      	b.n	80013fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	f003 0207 	and.w	r2, r3, #7
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	b2da      	uxtb	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800140a:	883a      	ldrh	r2, [r7, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	78ba      	ldrb	r2, [r7, #2]
 8001414:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d102      	bne.n	8001422 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_PCD_EP_Open+0x94>
 800142c:	2302      	movs	r3, #2
 800142e:	e00e      	b.n	800144e <HAL_PCD_EP_Open+0xb2>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fb2e 	bl	8002aa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800144c:	7afb      	ldrb	r3, [r7, #11]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_PCD_EP_Close>:

HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da0e      	bge.n	8001488 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	705a      	strb	r2, [r3, #1]
 8001486:	e00e      	b.n	80014a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	f003 0207 	and.w	r2, r3, #7
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_PCD_EP_Close+0x6a>
 80014bc:	2302      	movs	r3, #2
 80014be:	e00e      	b.n	80014de <HAL_PCD_EP_Close+0x88>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68f9      	ldr	r1, [r7, #12]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fea6 	bl	8003220 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_PCD_EP_Receive>:

HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	460b      	mov	r3, r1
 80014f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	f003 0207 	and.w	r2, r3, #7
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6979      	ldr	r1, [r7, #20]
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f85d 	bl	80035f8 <USB_EPStartXfer>

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_PCD_EP_Transmit>:

HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	460b      	mov	r3, r1
 8001556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2201      	movs	r2, #1
 8001592:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	b2da      	uxtb	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6979      	ldr	r1, [r7, #20]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 f826 	bl	80035f8 <USB_EPStartXfer>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_PCD_EP_SetStall>:

HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f003 0207 	and.w	r2, r3, #7
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d901      	bls.n	80015d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e04c      	b.n	800166e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da0e      	bge.n	80015fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	705a      	strb	r2, [r3, #1]
 80015f8:	e00c      	b.n	8001614 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	b2da      	uxtb	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_PCD_EP_SetStall+0x7e>
 8001630:	2302      	movs	r3, #2
 8001632:	e01c      	b.n	800166e <HAL_PCD_EP_SetStall+0xb8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f924 	bl	8004890 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	2b00      	cmp	r3, #0
 8001650:	d108      	bne.n	8001664 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f003 fa49 	bl	8004af6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCD_EP_ClrStall>:

HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	f003 020f 	and.w	r2, r3, #15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d901      	bls.n	8001694 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e040      	b.n	8001716 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da0e      	bge.n	80016ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	705a      	strb	r2, [r3, #1]
 80016b8:	e00e      	b.n	80016d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	f003 0207 	and.w	r2, r3, #7
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_PCD_EP_ClrStall+0x82>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e00e      	b.n	8001716 <HAL_PCD_EP_ClrStall+0xa0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68f9      	ldr	r1, [r7, #12]
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f912 	bl	8004930 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <PCD_EP_ISR_Handler>:

static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b096      	sub	sp, #88	; 0x58
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001726:	e3bf      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001730:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001742:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 8179 	bne.w	8001a3e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800174c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d152      	bne.n	80017fe <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001768:	81fb      	strh	r3, [r7, #14]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	89fb      	ldrh	r3, [r7, #14]
 8001770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001778:	b29b      	uxth	r3, r3
 800177a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3328      	adds	r3, #40	; 0x28
 8001780:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	3302      	adds	r3, #2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	441a      	add	r2, r3
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	615a      	str	r2, [r3, #20]

        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017bc:	2100      	movs	r1, #0
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f003 fd0d 	bl	80051de <HAL_PCD_DataInStageCallback>

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 836b 	beq.w	8001ea8 <PCD_EP_ISR_Handler+0x78a>
 80017d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 8366 	bne.w	8001ea8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017fc:	e354      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001804:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001810:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001818:	2b00      	cmp	r3, #0
 800181a:	d034      	beq.n	8001886 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001824:	b29b      	uxth	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	3306      	adds	r3, #6
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001854:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001858:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800185a:	b29b      	uxth	r3, r3
 800185c:	f003 f99b 	bl	8004b96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	f640 738f 	movw	r3, #3983	; 0xf8f
 800186c:	4013      	ands	r3, r2
 800186e:	823b      	strh	r3, [r7, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	8a3a      	ldrh	r2, [r7, #16]
 8001876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187a:	b292      	uxth	r2, r2
 800187c:	801a      	strh	r2, [r3, #0]


          HAL_PCD_SetupStageCallback(hpcd);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f003 fc80 	bl	8005184 <HAL_PCD_SetupStageCallback>
 8001884:	e310      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001886:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800188a:	2b00      	cmp	r3, #0
 800188c:	f280 830c 	bge.w	8001ea8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29a      	uxth	r2, r3
 8001898:	f640 738f 	movw	r3, #3983	; 0xf8f
 800189c:	4013      	ands	r3, r2
 800189e:	83fb      	strh	r3, [r7, #30]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	8bfa      	ldrh	r2, [r7, #30]
 80018a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018aa:	b292      	uxth	r2, r2
 80018ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	3306      	adds	r3, #6
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d019      	beq.n	8001916 <PCD_EP_ISR_Handler+0x1f8>
 80018e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d015      	beq.n	8001916 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f0:	6959      	ldr	r1, [r3, #20]
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f003 f94b 	bl	8004b96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	441a      	add	r2, r3
 800190a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190c:	615a      	str	r2, [r3, #20]

            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800190e:	2100      	movs	r1, #0
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f003 fc49 	bl	80051a8 <HAL_PCD_DataOutStageCallback>
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001928:	2b00      	cmp	r3, #0
 800192a:	f040 82bd 	bne.w	8001ea8 <PCD_EP_ISR_Handler+0x78a>
 800192e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001932:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800193a:	f000 82b5 	beq.w	8001ea8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194c:	b29b      	uxth	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4413      	add	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001968:	b29a      	uxth	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b3e      	cmp	r3, #62	; 0x3e
 8001974:	d91d      	bls.n	80019b2 <PCD_EP_ISR_Handler+0x294>
 8001976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <PCD_EP_ISR_Handler+0x272>
 800198a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198c:	3b01      	subs	r3, #1
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001998:	b29b      	uxth	r3, r3
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	b29b      	uxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	801a      	strh	r2, [r3, #0]
 80019b0:	e026      	b.n	8001a00 <PCD_EP_ISR_Handler+0x2e2>
 80019b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <PCD_EP_ISR_Handler+0x2b2>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	e017      	b.n	8001a00 <PCD_EP_ISR_Handler+0x2e2>
 80019d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <PCD_EP_ISR_Handler+0x2cc>
 80019e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e6:	3301      	adds	r3, #1
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a10:	827b      	strh	r3, [r7, #18]
 8001a12:	8a7b      	ldrh	r3, [r7, #18]
 8001a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a18:	827b      	strh	r3, [r7, #18]
 8001a1a:	8a7b      	ldrh	r3, [r7, #18]
 8001a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a20:	827b      	strh	r3, [r7, #18]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	8a7b      	ldrh	r3, [r7, #18]
 8001a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	8013      	strh	r3, [r2, #0]
 8001a3c:	e234      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a52:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f280 80fc 	bge.w	8001c54 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a72:	4013      	ands	r3, r2
 8001a74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a92:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aaa:	7b1b      	ldrb	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d125      	bne.n	8001afc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3306      	adds	r3, #6
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001adc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8092 	beq.w	8001c0a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aec:	6959      	ldr	r1, [r3, #20]
 8001aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af0:	88da      	ldrh	r2, [r3, #6]
 8001af2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af6:	f003 f84e 	bl	8004b96 <USB_ReadPMA>
 8001afa:	e086      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d10a      	bne.n	8001b1a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f9d9 	bl	8001ec4 <HAL_PCD_EP_DB_Receive>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b18:	e077      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	441a      	add	r2, r3
 8001b46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d024      	beq.n	8001bc2 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ba4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02e      	beq.n	8001c0a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	891a      	ldrh	r2, [r3, #8]
 8001bb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bbc:	f002 ffeb 	bl	8004b96 <USB_ReadPMA>
 8001bc0:	e023      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3306      	adds	r3, #6
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfc:	6959      	ldr	r1, [r3, #20]
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	895a      	ldrh	r2, [r3, #10]
 8001c02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c06:	f002 ffc6 	bl	8004b96 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c12:	441a      	add	r2, r3
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c20:	441a      	add	r2, r3
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <PCD_EP_ISR_Handler+0x51c>
 8001c2e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d206      	bcs.n	8001c48 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f003 fab1 	bl	80051a8 <HAL_PCD_DataOutStageCallback>
        {
 8001c46:	e005      	b.n	8001c54 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fcd2 	bl	80035f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8123 	beq.w	8001ea8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	441a      	add	r2, r3
 8001ca2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	78db      	ldrb	r3, [r3, #3]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f040 80a2 	bne.w	8001e00 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	7b1b      	ldrb	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8093 	beq.w	8001df2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ccc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d046      	beq.n	8001d66 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d126      	bne.n	8001d2e <PCD_EP_ISR_Handler+0x610>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	4413      	add	r3, r2
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	011a      	lsls	r2, r3, #4
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	4413      	add	r3, r2
 8001d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	e061      	b.n	8001df2 <PCD_EP_ISR_Handler+0x6d4>
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d15d      	bne.n	8001df2 <PCD_EP_ISR_Handler+0x6d4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	4413      	add	r3, r2
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	011a      	lsls	r2, r3, #4
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	4413      	add	r3, r2
 8001d58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	2200      	movs	r2, #0
 8001d62:	801a      	strh	r2, [r3, #0]
 8001d64:	e045      	b.n	8001df2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d126      	bne.n	8001dc2 <PCD_EP_ISR_Handler+0x6a4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	4413      	add	r3, r2
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	011a      	lsls	r2, r3, #4
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	4413      	add	r3, r2
 8001d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	801a      	strh	r2, [r3, #0]
 8001dc0:	e017      	b.n	8001df2 <PCD_EP_ISR_Handler+0x6d4>
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d113      	bne.n	8001df2 <PCD_EP_ISR_Handler+0x6d4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd8:	4413      	add	r3, r2
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	011a      	lsls	r2, r3, #4
 8001de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de4:	4413      	add	r3, r2
 8001de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dee:	2200      	movs	r2, #0
 8001df0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f003 f9f0 	bl	80051de <HAL_PCD_DataInStageCallback>
 8001dfe:	e053      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d146      	bne.n	8001e9a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3302      	adds	r3, #2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d907      	bls.n	8001e54 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	619a      	str	r2, [r3, #24]
 8001e52:	e002      	b.n	8001e5a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f003 f9b8 	bl	80051de <HAL_PCD_DataInStageCallback>
 8001e6e:	e01b      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e78:	441a      	add	r2, r3
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e86:	441a      	add	r2, r3
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fbb0 	bl	80035f8 <USB_EPStartXfer>
 8001e98:	e006      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f91b 	bl	80020de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f6ff ac37 	blt.w	8001728 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3758      	adds	r7, #88	; 0x58
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_DB_Receive>:

static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d07e      	beq.n	8001fda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	8b7b      	ldrh	r3, [r7, #26]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d306      	bcc.n	8001f1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	8b7b      	ldrh	r3, [r7, #26]
 8001f16:	1ad2      	subs	r2, r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	e002      	b.n	8001f24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d123      	bne.n	8001f74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	833b      	strh	r3, [r7, #24]
 8001f48:	8b3b      	ldrh	r3, [r7, #24]
 8001f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f4e:	833b      	strh	r3, [r7, #24]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	8b3b      	ldrh	r3, [r7, #24]
 8001f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01f      	beq.n	8001fbe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f98:	82fb      	strh	r3, [r7, #22]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	441a      	add	r2, r3
 8001fa8:	8afb      	ldrh	r3, [r7, #22]
 8001faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fbe:	8b7b      	ldrh	r3, [r7, #26]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8087 	beq.w	80020d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	6959      	ldr	r1, [r3, #20]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	891a      	ldrh	r2, [r3, #8]
 8001fd2:	8b7b      	ldrh	r3, [r7, #26]
 8001fd4:	f002 fddf 	bl	8004b96 <USB_ReadPMA>
 8001fd8:	e07c      	b.n	80020d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	3306      	adds	r3, #6
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002002:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	8b7b      	ldrh	r3, [r7, #26]
 800200a:	429a      	cmp	r2, r3
 800200c:	d306      	bcc.n	800201c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	8b7b      	ldrh	r3, [r7, #26]
 8002014:	1ad2      	subs	r2, r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	619a      	str	r2, [r3, #24]
 800201a:	e002      	b.n	8002022 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d123      	bne.n	8002072 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	83fb      	strh	r3, [r7, #30]
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800204c:	83fb      	strh	r3, [r7, #30]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	441a      	add	r2, r3
 800205c:	8bfb      	ldrh	r3, [r7, #30]
 800205e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800206e:	b29b      	uxth	r3, r3
 8002070:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11f      	bne.n	80020bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002096:	83bb      	strh	r3, [r7, #28]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	441a      	add	r2, r3
 80020a6:	8bbb      	ldrh	r3, [r7, #28]
 80020a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020bc:	8b7b      	ldrh	r3, [r7, #26]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	6959      	ldr	r1, [r3, #20]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	895a      	ldrh	r2, [r3, #10]
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	f002 fd61 	bl	8004b96 <USB_ReadPMA>
    }
  }

  return count;
 80020d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_DB_Transmit>:

static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b0a4      	sub	sp, #144	; 0x90
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 81dd 	beq.w	80024b2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002100:	b29b      	uxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	3302      	adds	r3, #2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	4413      	add	r3, r2
 8002116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002120:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800212c:	429a      	cmp	r2, r3
 800212e:	d907      	bls.n	8002140 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	e002      	b.n	8002146 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 80b9 	bne.w	80022c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d126      	bne.n	80021a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	4413      	add	r3, r2
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	011a      	lsls	r2, r3, #4
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	4413      	add	r3, r2
 800217a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218a:	b29a      	uxth	r2, r3
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219e:	b29a      	uxth	r2, r3
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	e01a      	b.n	80021dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d116      	bne.n	80021dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	4413      	add	r3, r2
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	011a      	lsls	r2, r3, #4
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	2200      	movs	r2, #0
 80021da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d126      	bne.n	8002238 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	011a      	lsls	r2, r3, #4
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221c:	b29a      	uxth	r2, r3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002230:	b29a      	uxth	r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e017      	b.n	8002268 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d113      	bne.n	8002268 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	4413      	add	r3, r2
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	011a      	lsls	r2, r3, #4
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	4413      	add	r3, r2
 800225c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	2200      	movs	r2, #0
 8002266:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f002 ffb5 	bl	80051de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 82fc 	beq.w	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	82fb      	strh	r3, [r7, #22]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	8afb      	ldrh	r3, [r7, #22]
 80022ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8013      	strh	r3, [r2, #0]
 80022c0:	e2da      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d021      	beq.n	8002310 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80022fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	b29b      	uxth	r3, r3
 800230e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002316:	2b01      	cmp	r3, #1
 8002318:	f040 82ae 	bne.w	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002324:	441a      	add	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002332:	441a      	add	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d30b      	bcc.n	800235c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002354:	1ad2      	subs	r2, r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	621a      	str	r2, [r3, #32]
 800235a:	e017      	b.n	800238c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002374:	e00a      	b.n	800238c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d165      	bne.n	8002460 <HAL_PCD_EP_DB_Transmit+0x382>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a8:	4413      	add	r3, r2
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	011a      	lsls	r2, r3, #4
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	4413      	add	r3, r2
 80023b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d0:	2b3e      	cmp	r3, #62	; 0x3e
 80023d2:	d91d      	bls.n	8002410 <HAL_PCD_EP_DB_Transmit+0x332>
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
 80023dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <HAL_PCD_EP_DB_Transmit+0x310>
 80023e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ea:	3b01      	subs	r3, #1
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002408:	b29a      	uxth	r2, r3
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	e044      	b.n	800249a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_PCD_EP_DB_Transmit+0x350>
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002426:	b29a      	uxth	r2, r3
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e035      	b.n	800249a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002444:	3301      	adds	r3, #1
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	b29b      	uxth	r3, r3
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b29a      	uxth	r2, r3
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e01c      	b.n	800249a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d118      	bne.n	800249a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247c:	4413      	add	r3, r2
 800247e:	647b      	str	r3, [r7, #68]	; 0x44
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	011a      	lsls	r2, r3, #4
 8002486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002488:	4413      	add	r3, r2
 800248a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
 8002490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002494:	b29a      	uxth	r2, r3
 8002496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002498:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6959      	ldr	r1, [r3, #20]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	891a      	ldrh	r2, [r3, #8]
 80024a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f002 fb2e 	bl	8004b0c <USB_WritePMA>
 80024b0:	e1e2      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	3306      	adds	r3, #6
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d307      	bcc.n	80024fa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	e002      	b.n	8002500 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 80c0 	bne.w	800268a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d126      	bne.n	8002560 <HAL_PCD_EP_DB_Transmit+0x482>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002520:	b29b      	uxth	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002526:	4413      	add	r3, r2
 8002528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	011a      	lsls	r2, r3, #4
 8002530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002532:	4413      	add	r3, r2
 8002534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002538:	67bb      	str	r3, [r7, #120]	; 0x78
 800253a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	b29a      	uxth	r2, r3
 8002546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002558:	b29a      	uxth	r2, r3
 800255a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	e01a      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d116      	bne.n	8002596 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	667b      	str	r3, [r7, #100]	; 0x64
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800257c:	4413      	add	r3, r2
 800257e:	667b      	str	r3, [r7, #100]	; 0x64
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	011a      	lsls	r2, r3, #4
 8002586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002588:	4413      	add	r3, r2
 800258a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800258e:	663b      	str	r3, [r7, #96]	; 0x60
 8002590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002592:	2200      	movs	r2, #0
 8002594:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	677b      	str	r3, [r7, #116]	; 0x74
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12b      	bne.n	80025fc <HAL_PCD_EP_DB_Transmit+0x51e>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	4413      	add	r3, r2
 80025ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	011a      	lsls	r2, r3, #4
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	e017      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x54e>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d113      	bne.n	800262c <HAL_PCD_EP_DB_Transmit+0x54e>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002612:	4413      	add	r3, r2
 8002614:	677b      	str	r3, [r7, #116]	; 0x74
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	011a      	lsls	r2, r3, #4
 800261c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261e:	4413      	add	r3, r2
 8002620:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
 8002626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f002 fdd3 	bl	80051de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 811a 	bne.w	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	441a      	add	r2, r3
 8002670:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800267c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	b29b      	uxth	r3, r3
 8002686:	8013      	strh	r3, [r2, #0]
 8002688:	e0f6      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d121      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	441a      	add	r2, r3
 80026c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 80ca 	bne.w	8002878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ec:	441a      	add	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026fa:	441a      	add	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d30b      	bcc.n	8002724 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	6a1a      	ldr	r2, [r3, #32]
 8002718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	e017      	b.n	8002754 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800272c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800273c:	e00a      	b.n	8002754 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	657b      	str	r3, [r7, #84]	; 0x54
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d165      	bne.n	800282e <HAL_PCD_EP_DB_Transmit+0x750>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002776:	4413      	add	r3, r2
 8002778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	011a      	lsls	r2, r3, #4
 8002780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002782:	4413      	add	r3, r2
 8002784:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002788:	65bb      	str	r3, [r7, #88]	; 0x58
 800278a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002794:	b29a      	uxth	r2, r3
 8002796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279e:	2b3e      	cmp	r3, #62	; 0x3e
 80027a0:	d91d      	bls.n	80027de <HAL_PCD_EP_DB_Transmit+0x700>
 80027a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x6de>
 80027b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b8:	3b01      	subs	r3, #1
 80027ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80027bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e041      	b.n	8002862 <HAL_PCD_EP_DB_Transmit+0x784>
 80027de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_PCD_EP_DB_Transmit+0x71e>
 80027e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	e032      	b.n	8002862 <HAL_PCD_EP_DB_Transmit+0x784>
 80027fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
 8002804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_PCD_EP_DB_Transmit+0x738>
 8002810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002812:	3301      	adds	r3, #1
 8002814:	66bb      	str	r3, [r7, #104]	; 0x68
 8002816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29a      	uxth	r2, r3
 800281c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800281e:	b29b      	uxth	r3, r3
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	b29b      	uxth	r3, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	b29a      	uxth	r2, r3
 8002828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	e019      	b.n	8002862 <HAL_PCD_EP_DB_Transmit+0x784>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	785b      	ldrb	r3, [r3, #1]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d115      	bne.n	8002862 <HAL_PCD_EP_DB_Transmit+0x784>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002844:	4413      	add	r3, r2
 8002846:	657b      	str	r3, [r7, #84]	; 0x54
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	011a      	lsls	r2, r3, #4
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	4413      	add	r3, r2
 8002852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002856:	653b      	str	r3, [r7, #80]	; 0x50
 8002858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285c:	b29a      	uxth	r2, r3
 800285e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002860:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6959      	ldr	r1, [r3, #20]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	895a      	ldrh	r2, [r3, #10]
 800286e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002872:	b29b      	uxth	r3, r3
 8002874:	f002 f94a 	bl	8004b0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002892:	82bb      	strh	r3, [r7, #20]
 8002894:	8abb      	ldrh	r3, [r7, #20]
 8002896:	f083 0310 	eor.w	r3, r3, #16
 800289a:	82bb      	strh	r3, [r7, #20]
 800289c:	8abb      	ldrh	r3, [r7, #20]
 800289e:	f083 0320 	eor.w	r3, r3, #32
 80028a2:	82bb      	strh	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	8abb      	ldrh	r3, [r7, #20]
 80028b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3790      	adds	r7, #144	; 0x90
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_Init>:

uint32_t uwTickPrio   = (1UL << __NVIC_PRIO_BITS); /* Invalid PRIO */

HAL_TickFreqTypeDef uwTickFreq = HAL_TICK_FREQ_DEFAULT;  /* 1KHz */

HAL_StatusTypeDef HAL_Init(void){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_Init+0x24>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_Init+0x24>)
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6013      	str	r3, [r2, #0]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f7fd fe0d 	bl	8000504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f806 	bl	80028fc <HAL_InitTick>

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_InitTick>:

__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x54>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_InitTick+0x58>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fe27 	bl	800056e <HAL_SYSTICK_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00e      	b.n	8002948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d80a      	bhi.n	8002946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002930:	2200      	movs	r2, #0
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f7fd fdef 	bl	800051a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <HAL_InitTick+0x5c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000000 	.word	0x20000000
 8002954:	20000008 	.word	0x20000008
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_IncTick>:

__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_IncTick+0x1c>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_IncTick+0x20>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_IncTick+0x20>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000008 	.word	0x20000008
 800297c:	20000458 	.word	0x20000458

08002980 <HAL_Delay>:



__weak void HAL_Delay(uint32_t Delay)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7fd fdb2 	bl	80004f0 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d005      	beq.n	80029a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_Delay+0x44>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a6:	bf00      	nop
 80029a8:	f7fd fda2 	bl	80004f0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d8f7      	bhi.n	80029a8 <HAL_Delay+0x28>
  {
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008

080029c8 <USB_CoreInit>:
#include "../Core/Src/Inc_USB_Device2.h"
#include "../Core/Src/Inc_USB_Device.h"

HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg){
 80029c8:	b084      	sub	sp, #16
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	f107 0014 	add.w	r0, r7, #20
 80029d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(USBx);
  UNUSED(cfg);
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	b004      	add	sp, #16
 80029e6:	4770      	bx	lr

080029e8 <USB_EnableGlobalInt>:

HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx){
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <USB_DisableGlobalInt>:

HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx){
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <USB_SetCurrentMode>:

HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode){
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <USB_DevInit>:

HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg){
 8002a60:	b084      	sub	sp, #16
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	f107 0014 	add.w	r0, r7, #20
 8002a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	b004      	add	sp, #16
 8002a9e:	4770      	bx	lr

08002aa0 <USB_ActivateEndpoint>:

HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8002aa0:	b480      	push	{r7}
 8002aa2:	b09d      	sub	sp, #116	; 0x74
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	78db      	ldrb	r3, [r3, #3]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d81f      	bhi.n	8002b12 <USB_ActivateEndpoint+0x72>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <USB_ActivateEndpoint+0x38>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	08002b1b 	.word	0x08002b1b
 8002ae4:	08002af7 	.word	0x08002af7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ae8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002af4:	e012      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002af6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002afa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002afe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b02:	e00b      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b10:	e004      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002b18:	e000      	b.n	8002b1c <USB_ActivateEndpoint+0x7c>
      break;
 8002b1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	7b1b      	ldrb	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 8178 	bne.w	8002e7e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8084 	beq.w	8002ca0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	011a      	lsls	r2, r3, #4
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	88db      	ldrh	r3, [r3, #6]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	827b      	strh	r3, [r7, #18]
 8002bda:	8a7b      	ldrh	r3, [r7, #18]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <USB_ActivateEndpoint+0x17c>
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	823b      	strh	r3, [r7, #16]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	8a3b      	ldrh	r3, [r7, #16]
 8002c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	78db      	ldrb	r3, [r3, #3]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d020      	beq.n	8002c66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3a:	81bb      	strh	r3, [r7, #12]
 8002c3c:	89bb      	ldrh	r3, [r7, #12]
 8002c3e:	f083 0320 	eor.w	r3, r3, #32
 8002c42:	81bb      	strh	r3, [r7, #12]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	89bb      	ldrh	r3, [r7, #12]
 8002c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	8013      	strh	r3, [r2, #0]
 8002c64:	e2d5      	b.n	8003212 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	81fb      	strh	r3, [r7, #14]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	89fb      	ldrh	r3, [r7, #14]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]
 8002c9e:	e2b8      	b.n	8003212 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	4413      	add	r3, r2
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	011a      	lsls	r2, r3, #4
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	88db      	ldrh	r3, [r3, #6]
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	4413      	add	r3, r2
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d0e:	d91d      	bls.n	8002d4c <USB_ActivateEndpoint+0x2ac>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <USB_ActivateEndpoint+0x28a>
 8002d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d26:	3b01      	subs	r3, #1
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	029b      	lsls	r3, r3, #10
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	e026      	b.n	8002d9a <USB_ActivateEndpoint+0x2fa>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <USB_ActivateEndpoint+0x2ca>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e017      	b.n	8002d9a <USB_ActivateEndpoint+0x2fa>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <USB_ActivateEndpoint+0x2e4>
 8002d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d80:	3301      	adds	r3, #1
 8002d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002da8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01b      	beq.n	8002dea <USB_ActivateEndpoint+0x34a>
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc8:	843b      	strh	r3, [r7, #32]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	8c3b      	ldrh	r3, [r7, #32]
 8002dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d124      	bne.n	8002e3c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e08:	83bb      	strh	r3, [r7, #28]
 8002e0a:	8bbb      	ldrh	r3, [r7, #28]
 8002e0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e10:	83bb      	strh	r3, [r7, #28]
 8002e12:	8bbb      	ldrh	r3, [r7, #28]
 8002e14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e18:	83bb      	strh	r3, [r7, #28]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	8bbb      	ldrh	r3, [r7, #28]
 8002e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8013      	strh	r3, [r2, #0]
 8002e3a:	e1ea      	b.n	8003212 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	83fb      	strh	r3, [r7, #30]
 8002e54:	8bfb      	ldrh	r3, [r7, #30]
 8002e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e5a:	83fb      	strh	r3, [r7, #30]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	8bfb      	ldrh	r3, [r7, #30]
 8002e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8013      	strh	r3, [r2, #0]
 8002e7c:	e1c9      	b.n	8003212 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	78db      	ldrb	r3, [r3, #3]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d11e      	bne.n	8002ec4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	8013      	strh	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f10:	4413      	add	r3, r2
 8002f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	011a      	lsls	r2, r3, #4
 8002f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f22:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	891b      	ldrh	r3, [r3, #8]
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	657b      	str	r3, [r7, #84]	; 0x54
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f44:	4413      	add	r3, r2
 8002f46:	657b      	str	r3, [r7, #84]	; 0x54
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	011a      	lsls	r2, r3, #4
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	895b      	ldrh	r3, [r3, #10]
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 8093 	bne.w	8003098 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002f82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01b      	beq.n	8002fc6 <USB_ActivateEndpoint+0x526>
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	441a      	add	r2, r3
 8002fb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002fd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01b      	beq.n	8003016 <USB_ActivateEndpoint+0x576>
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003012:	b29b      	uxth	r3, r3
 8003014:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302c:	873b      	strh	r3, [r7, #56]	; 0x38
 800302e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003030:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003034:	873b      	strh	r3, [r7, #56]	; 0x38
 8003036:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003038:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800303c:	873b      	strh	r3, [r7, #56]	; 0x38
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	441a      	add	r2, r3
 8003048:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800304a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	b29b      	uxth	r3, r3
 800305c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003074:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]
 8003096:	e0bc      	b.n	8003212 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01d      	beq.n	80030f0 <USB_ActivateEndpoint+0x650>
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	441a      	add	r2, r3
 80030d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003100:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01d      	beq.n	8003148 <USB_ActivateEndpoint+0x6a8>
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	441a      	add	r2, r3
 8003130:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	78db      	ldrb	r3, [r3, #3]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d024      	beq.n	800319a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800316a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800316e:	f083 0320 	eor.w	r3, r3, #32
 8003172:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	441a      	add	r2, r3
 8003180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003194:	b29b      	uxth	r3, r3
 8003196:	8013      	strh	r3, [r2, #0]
 8003198:	e01d      	b.n	80031d6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	441a      	add	r2, r3
 80031be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003212:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003216:	4618      	mov	r0, r3
 8003218:	3774      	adds	r7, #116	; 0x74
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <USB_DeactivateEndpoint>:

HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8003220:	b480      	push	{r7}
 8003222:	b08d      	sub	sp, #52	; 0x34
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	7b1b      	ldrb	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 808e 	bne.w	8003350 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d044      	beq.n	80032c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	81bb      	strh	r3, [r7, #12]
 800324a:	89bb      	ldrh	r3, [r7, #12]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01b      	beq.n	800328c <USB_DeactivateEndpoint+0x6c>
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	817b      	strh	r3, [r7, #10]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a2:	813b      	strh	r3, [r7, #8]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	893b      	ldrh	r3, [r7, #8]
 80032b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	8013      	strh	r3, [r2, #0]
 80032c4:	e192      	b.n	80035ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	827b      	strh	r3, [r7, #18]
 80032d4:	8a7b      	ldrh	r3, [r7, #18]
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01b      	beq.n	8003316 <USB_DeactivateEndpoint+0xf6>
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	823b      	strh	r3, [r7, #16]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	8a3b      	ldrh	r3, [r7, #16]
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332c:	81fb      	strh	r3, [r7, #14]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	89fb      	ldrh	r3, [r7, #14]
 800333a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]
 800334e:	e14d      	b.n	80035ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 80a5 	bne.w	80034a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	843b      	strh	r3, [r7, #32]
 8003368:	8c3b      	ldrh	r3, [r7, #32]
 800336a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01b      	beq.n	80033aa <USB_DeactivateEndpoint+0x18a>
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	83fb      	strh	r3, [r7, #30]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	441a      	add	r2, r3
 8003394:	8bfb      	ldrh	r3, [r7, #30]
 8003396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800339e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	83bb      	strh	r3, [r7, #28]
 80033b8:	8bbb      	ldrh	r3, [r7, #28]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01b      	beq.n	80033fa <USB_DeactivateEndpoint+0x1da>
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d8:	837b      	strh	r3, [r7, #26]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	8b7b      	ldrh	r3, [r7, #26]
 80033e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003410:	833b      	strh	r3, [r7, #24]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	441a      	add	r2, r3
 800341c:	8b3b      	ldrh	r3, [r7, #24]
 800341e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800342e:	b29b      	uxth	r3, r3
 8003430:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	82fb      	strh	r3, [r7, #22]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	441a      	add	r2, r3
 8003454:	8afb      	ldrh	r3, [r7, #22]
 8003456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003480:	82bb      	strh	r3, [r7, #20]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8abb      	ldrh	r3, [r7, #20]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
 80034a2:	e0a3      	b.n	80035ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <USB_DeactivateEndpoint+0x2d4>
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003502:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <USB_DeactivateEndpoint+0x324>
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	853b      	strh	r3, [r7, #40]	; 0x28
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003540:	b29b      	uxth	r3, r3
 8003542:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003578:	b29b      	uxth	r3, r3
 800357a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003592:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3734      	adds	r7, #52	; 0x34
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <USB_EPStartXfer>:

HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0c2      	sub	sp, #264	; 0x108
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	6018      	str	r0, [r3, #0]
 8003602:	463b      	mov	r3, r7
 8003604:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003606:	463b      	mov	r3, r7
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 8545 	bne.w	800409c <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003612:	463b      	mov	r3, r7
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	463b      	mov	r3, r7
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	429a      	cmp	r2, r3
 8003620:	d905      	bls.n	800362e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003622:	463b      	mov	r3, r7
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800362c:	e004      	b.n	8003638 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800362e:	463b      	mov	r3, r7
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003638:	463b      	mov	r3, r7
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	7b1b      	ldrb	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d128      	bne.n	8003694 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003642:	463b      	mov	r3, r7
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	463b      	mov	r3, r7
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	88da      	ldrh	r2, [r3, #6]
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003652:	b29b      	uxth	r3, r3
 8003654:	1d38      	adds	r0, r7, #4
 8003656:	6800      	ldr	r0, [r0, #0]
 8003658:	f001 fa58 	bl	8004b0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	463b      	mov	r3, r7
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	011a      	lsls	r2, r3, #4
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	f000 bcdb 	b.w	800404a <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003694:	463b      	mov	r3, r7
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	78db      	ldrb	r3, [r3, #3]
 800369a:	2b02      	cmp	r3, #2
 800369c:	f040 836f 	bne.w	8003d7e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80036a0:	463b      	mov	r3, r7
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	463b      	mov	r3, r7
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f240 8313 	bls.w	8003cd8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	463b      	mov	r3, r7
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	463b      	mov	r3, r7
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80036f6:	463b      	mov	r3, r7
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003700:	1ad2      	subs	r2, r2, r3
 8003702:	463b      	mov	r3, r7
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	463b      	mov	r3, r7
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 816d 	beq.w	80039fe <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
 800372a:	463b      	mov	r3, r7
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	785b      	ldrb	r3, [r3, #1]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d16e      	bne.n	8003812 <USB_EPStartXfer+0x21a>
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	4413      	add	r3, r2
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
 800374c:	463b      	mov	r3, r7
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	011a      	lsls	r2, r3, #4
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	4413      	add	r3, r2
 8003758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003768:	b29a      	uxth	r2, r3
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003772:	2b3e      	cmp	r3, #62	; 0x3e
 8003774:	d921      	bls.n	80037ba <USB_EPStartXfer+0x1c2>
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <USB_EPStartXfer+0x19e>
 800378c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003790:	3b01      	subs	r3, #1
 8003792:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	029b      	lsls	r3, r3, #10
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	e047      	b.n	800384a <USB_EPStartXfer+0x252>
 80037ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <USB_EPStartXfer+0x1e0>
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	e038      	b.n	800384a <USB_EPStartXfer+0x252>
 80037d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <USB_EPStartXfer+0x200>
 80037ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037f2:	3301      	adds	r3, #1
 80037f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003802:	b29b      	uxth	r3, r3
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	b29b      	uxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b29a      	uxth	r2, r3
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	801a      	strh	r2, [r3, #0]
 8003810:	e01b      	b.n	800384a <USB_EPStartXfer+0x252>
 8003812:	463b      	mov	r3, r7
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d116      	bne.n	800384a <USB_EPStartXfer+0x252>
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003824:	b29b      	uxth	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	4413      	add	r3, r2
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
 800382e:	463b      	mov	r3, r7
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	011a      	lsls	r2, r3, #4
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	4413      	add	r3, r2
 800383a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003844:	b29a      	uxth	r2, r3
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800384a:	463b      	mov	r3, r7
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	895b      	ldrh	r3, [r3, #10]
 8003850:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003854:	463b      	mov	r3, r7
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6959      	ldr	r1, [r3, #20]
 800385a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800385e:	b29b      	uxth	r3, r3
 8003860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003864:	1d38      	adds	r0, r7, #4
 8003866:	6800      	ldr	r0, [r0, #0]
 8003868:	f001 f950 	bl	8004b0c <USB_WritePMA>
            ep->xfer_buff += len;
 800386c:	463b      	mov	r3, r7
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003876:	441a      	add	r2, r3
 8003878:	463b      	mov	r3, r7
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800387e:	463b      	mov	r3, r7
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	463b      	mov	r3, r7
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d909      	bls.n	80038a2 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800388e:	463b      	mov	r3, r7
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	463b      	mov	r3, r7
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	621a      	str	r2, [r3, #32]
 80038a0:	e008      	b.n	80038b4 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80038a2:	463b      	mov	r3, r7
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80038ac:	463b      	mov	r3, r7
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038b4:	463b      	mov	r3, r7
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d16e      	bne.n	800399c <USB_EPStartXfer+0x3a4>
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	463b      	mov	r3, r7
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	011a      	lsls	r2, r3, #4
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4413      	add	r3, r2
 80038e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fc:	2b3e      	cmp	r3, #62	; 0x3e
 80038fe:	d921      	bls.n	8003944 <USB_EPStartXfer+0x34c>
 8003900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <USB_EPStartXfer+0x328>
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391a:	3b01      	subs	r3, #1
 800391c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29a      	uxth	r2, r3
 8003926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392a:	b29b      	uxth	r3, r3
 800392c:	029b      	lsls	r3, r3, #10
 800392e:	b29b      	uxth	r3, r3
 8003930:	4313      	orrs	r3, r2
 8003932:	b29b      	uxth	r3, r3
 8003934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393c:	b29a      	uxth	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e04a      	b.n	80039da <USB_EPStartXfer+0x3e2>
 8003944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <USB_EPStartXfer+0x36a>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395a:	b29a      	uxth	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e03b      	b.n	80039da <USB_EPStartXfer+0x3e2>
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800396c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <USB_EPStartXfer+0x38a>
 8003978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397c:	3301      	adds	r3, #1
 800397e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29a      	uxth	r2, r3
 8003988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398c:	b29b      	uxth	r3, r3
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	b29b      	uxth	r3, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	b29a      	uxth	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	e01e      	b.n	80039da <USB_EPStartXfer+0x3e2>
 800399c:	463b      	mov	r3, r7
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d119      	bne.n	80039da <USB_EPStartXfer+0x3e2>
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	623b      	str	r3, [r7, #32]
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	4413      	add	r3, r2
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	463b      	mov	r3, r7
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80039da:	463b      	mov	r3, r7
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	891b      	ldrh	r3, [r3, #8]
 80039e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039e4:	463b      	mov	r3, r7
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6959      	ldr	r1, [r3, #20]
 80039ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80039f4:	1d38      	adds	r0, r7, #4
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	f001 f888 	bl	8004b0c <USB_WritePMA>
 80039fc:	e325      	b.n	800404a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039fe:	463b      	mov	r3, r7
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d16e      	bne.n	8003ae6 <USB_EPStartXfer+0x4ee>
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1c:	4413      	add	r3, r2
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a20:	463b      	mov	r3, r7
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	011a      	lsls	r2, r3, #4
 8003a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
 8003a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a46:	2b3e      	cmp	r3, #62	; 0x3e
 8003a48:	d921      	bls.n	8003a8e <USB_EPStartXfer+0x496>
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <USB_EPStartXfer+0x472>
 8003a60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a64:	3b01      	subs	r3, #1
 8003a66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e04a      	b.n	8003b24 <USB_EPStartXfer+0x52c>
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <USB_EPStartXfer+0x4b4>
 8003a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e03b      	b.n	8003b24 <USB_EPStartXfer+0x52c>
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <USB_EPStartXfer+0x4d4>
 8003ac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	029b      	lsls	r3, r3, #10
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae2:	801a      	strh	r2, [r3, #0]
 8003ae4:	e01e      	b.n	8003b24 <USB_EPStartXfer+0x52c>
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d119      	bne.n	8003b24 <USB_EPStartXfer+0x52c>
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	653b      	str	r3, [r7, #80]	; 0x50
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b04:	4413      	add	r3, r2
 8003b06:	653b      	str	r3, [r7, #80]	; 0x50
 8003b08:	463b      	mov	r3, r7
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	011a      	lsls	r2, r3, #4
 8003b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b24:	463b      	mov	r3, r7
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	891b      	ldrh	r3, [r3, #8]
 8003b2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b2e:	463b      	mov	r3, r7
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6959      	ldr	r1, [r3, #20]
 8003b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b3e:	1d38      	adds	r0, r7, #4
 8003b40:	6800      	ldr	r0, [r0, #0]
 8003b42:	f000 ffe3 	bl	8004b0c <USB_WritePMA>
            ep->xfer_buff += len;
 8003b46:	463b      	mov	r3, r7
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b50:	441a      	add	r2, r3
 8003b52:	463b      	mov	r3, r7
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b58:	463b      	mov	r3, r7
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	463b      	mov	r3, r7
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d909      	bls.n	8003b7c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8003b68:	463b      	mov	r3, r7
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	463b      	mov	r3, r7
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	621a      	str	r2, [r3, #32]
 8003b7a:	e008      	b.n	8003b8e <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003b86:	463b      	mov	r3, r7
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40
 8003b94:	463b      	mov	r3, r7
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d16e      	bne.n	8003c7c <USB_EPStartXfer+0x684>
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba4:	1d3b      	adds	r3, r7, #4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	4413      	add	r3, r2
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb6:	463b      	mov	r3, r7
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011a      	lsls	r2, r3, #4
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8003bde:	d921      	bls.n	8003c24 <USB_EPStartXfer+0x62c>
 8003be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <USB_EPStartXfer+0x608>
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e047      	b.n	8003cb4 <USB_EPStartXfer+0x6bc>
 8003c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <USB_EPStartXfer+0x64a>
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e038      	b.n	8003cb4 <USB_EPStartXfer+0x6bc>
 8003c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <USB_EPStartXfer+0x66a>
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	4313      	orrs	r3, r2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	e01b      	b.n	8003cb4 <USB_EPStartXfer+0x6bc>
 8003c7c:	463b      	mov	r3, r7
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d116      	bne.n	8003cb4 <USB_EPStartXfer+0x6bc>
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c94:	4413      	add	r3, r2
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	463b      	mov	r3, r7
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	011a      	lsls	r2, r3, #4
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	895b      	ldrh	r3, [r3, #10]
 8003cba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cbe:	463b      	mov	r3, r7
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6959      	ldr	r1, [r3, #20]
 8003cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003cce:	1d38      	adds	r0, r7, #4
 8003cd0:	6800      	ldr	r0, [r0, #0]
 8003cd2:	f000 ff1b 	bl	8004b0c <USB_WritePMA>
 8003cd6:	e1b8      	b.n	800404a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003cd8:	463b      	mov	r3, r7
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	463b      	mov	r3, r7
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3a:	4413      	add	r3, r2
 8003d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d3e:	463b      	mov	r3, r7
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	011a      	lsls	r2, r3, #4
 8003d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d48:	4413      	add	r3, r2
 8003d4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	891b      	ldrh	r3, [r3, #8]
 8003d60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d64:	463b      	mov	r3, r7
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6959      	ldr	r1, [r3, #20]
 8003d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003d74:	1d38      	adds	r0, r7, #4
 8003d76:	6800      	ldr	r0, [r0, #0]
 8003d78:	f000 fec8 	bl	8004b0c <USB_WritePMA>
 8003d7c:	e165      	b.n	800404a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d7e:	463b      	mov	r3, r7
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	463b      	mov	r3, r7
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	463b      	mov	r3, r7
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80a5 	beq.w	8003ef6 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	673b      	str	r3, [r7, #112]	; 0x70
 8003db2:	463b      	mov	r3, r7
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d16e      	bne.n	8003e9a <USB_EPStartXfer+0x8a2>
 8003dbc:	1d3b      	adds	r3, r7, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd0:	4413      	add	r3, r2
 8003dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	011a      	lsls	r2, r3, #4
 8003ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dde:	4413      	add	r3, r2
 8003de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003de4:	667b      	str	r3, [r7, #100]	; 0x64
 8003de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003dfc:	d921      	bls.n	8003e42 <USB_EPStartXfer+0x84a>
 8003dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <USB_EPStartXfer+0x826>
 8003e14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e047      	b.n	8003ed2 <USB_EPStartXfer+0x8da>
 8003e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <USB_EPStartXfer+0x868>
 8003e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	e038      	b.n	8003ed2 <USB_EPStartXfer+0x8da>
 8003e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <USB_EPStartXfer+0x888>
 8003e76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	029b      	lsls	r3, r3, #10
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	e01b      	b.n	8003ed2 <USB_EPStartXfer+0x8da>
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d116      	bne.n	8003ed2 <USB_EPStartXfer+0x8da>
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb2:	4413      	add	r3, r2
 8003eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8003eb6:	463b      	mov	r3, r7
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	011a      	lsls	r2, r3, #4
 8003ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	895b      	ldrh	r3, [r3, #10]
 8003ed8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003edc:	463b      	mov	r3, r7
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6959      	ldr	r1, [r3, #20]
 8003ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003eec:	1d38      	adds	r0, r7, #4
 8003eee:	6800      	ldr	r0, [r0, #0]
 8003ef0:	f000 fe0c 	bl	8004b0c <USB_WritePMA>
 8003ef4:	e0a9      	b.n	800404a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d16e      	bne.n	8003fde <USB_EPStartXfer+0x9e6>
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f14:	4413      	add	r3, r2
 8003f16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f18:	463b      	mov	r3, r7
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	011a      	lsls	r2, r3, #4
 8003f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f22:	4413      	add	r3, r2
 8003f24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f40:	d921      	bls.n	8003f86 <USB_EPStartXfer+0x98e>
 8003f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d104      	bne.n	8003f62 <USB_EPStartXfer+0x96a>
 8003f58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e050      	b.n	8004028 <USB_EPStartXfer+0xa30>
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <USB_EPStartXfer+0x9ac>
 8003f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa0:	801a      	strh	r2, [r3, #0]
 8003fa2:	e041      	b.n	8004028 <USB_EPStartXfer+0xa30>
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <USB_EPStartXfer+0x9cc>
 8003fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	e024      	b.n	8004028 <USB_EPStartXfer+0xa30>
 8003fde:	463b      	mov	r3, r7
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d11f      	bne.n	8004028 <USB_EPStartXfer+0xa30>
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004000:	4413      	add	r3, r2
 8004002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004006:	463b      	mov	r3, r7
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	011a      	lsls	r2, r3, #4
 800400e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004012:	4413      	add	r3, r2
 8004014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004020:	b29a      	uxth	r2, r3
 8004022:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004026:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004028:	463b      	mov	r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	891b      	ldrh	r3, [r3, #8]
 800402e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004032:	463b      	mov	r3, r7
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6959      	ldr	r1, [r3, #20]
 8004038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800403c:	b29b      	uxth	r3, r3
 800403e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004042:	1d38      	adds	r0, r7, #4
 8004044:	6800      	ldr	r0, [r0, #0]
 8004046:	f000 fd61 	bl	8004b0c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	463b      	mov	r3, r7
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	897b      	ldrh	r3, [r7, #10]
 8004068:	f083 0310 	eor.w	r3, r3, #16
 800406c:	817b      	strh	r3, [r7, #10]
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	f083 0320 	eor.w	r3, r3, #32
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	463b      	mov	r3, r7
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]
 800409a:	e3f3      	b.n	8004884 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800409c:	463b      	mov	r3, r7
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	7b1b      	ldrb	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 809c 	bne.w	80041e0 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80040a8:	463b      	mov	r3, r7
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	463b      	mov	r3, r7
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d90e      	bls.n	80040d6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80040b8:	463b      	mov	r3, r7
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80040c2:	463b      	mov	r3, r7
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	463b      	mov	r3, r7
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	619a      	str	r2, [r3, #24]
 80040d4:	e008      	b.n	80040e8 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80040d6:	463b      	mov	r3, r7
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80040e0:	463b      	mov	r3, r7
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004100:	4413      	add	r3, r2
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004106:	463b      	mov	r3, r7
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	011a      	lsls	r2, r3, #4
 800410e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004112:	4413      	add	r3, r2
 8004114:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800411c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004128:	b29a      	uxth	r2, r3
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004134:	2b3e      	cmp	r3, #62	; 0x3e
 8004136:	d923      	bls.n	8004180 <USB_EPStartXfer+0xb88>
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <USB_EPStartXfer+0xb60>
 800414e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004152:	3b01      	subs	r3, #1
 8004154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29a      	uxth	r2, r3
 8004160:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004164:	b29b      	uxth	r3, r3
 8004166:	029b      	lsls	r3, r3, #10
 8004168:	b29b      	uxth	r3, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004176:	b29a      	uxth	r2, r3
 8004178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e353      	b.n	8004828 <USB_EPStartXfer+0x1230>
 8004180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10c      	bne.n	80041a2 <USB_EPStartXfer+0xbaa>
 8004188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004198:	b29a      	uxth	r2, r3
 800419a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e342      	b.n	8004828 <USB_EPStartXfer+0x1230>
 80041a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <USB_EPStartXfer+0xbca>
 80041b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041bc:	3301      	adds	r3, #1
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e323      	b.n	8004828 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80041e0:	463b      	mov	r3, r7
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	78db      	ldrb	r3, [r3, #3]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	f040 81a9 	bne.w	800453e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80041ec:	463b      	mov	r3, r7
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 8082 	bne.w	80042fc <USB_EPStartXfer+0xd04>
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004210:	4413      	add	r3, r2
 8004212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004216:	463b      	mov	r3, r7
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	011a      	lsls	r2, r3, #4
 800421e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004222:	4413      	add	r3, r2
 8004224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800422c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004238:	b29a      	uxth	r2, r3
 800423a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	463b      	mov	r3, r7
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b3e      	cmp	r3, #62	; 0x3e
 8004248:	d925      	bls.n	8004296 <USB_EPStartXfer+0xc9e>
 800424a:	463b      	mov	r3, r7
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004256:	463b      	mov	r3, r7
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <USB_EPStartXfer+0xc76>
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	3b01      	subs	r3, #1
 800426a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800426e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	b29b      	uxth	r3, r3
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	b29b      	uxth	r3, r3
 8004280:	4313      	orrs	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	e058      	b.n	8004348 <USB_EPStartXfer+0xd50>
 8004296:	463b      	mov	r3, r7
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10c      	bne.n	80042ba <USB_EPStartXfer+0xcc2>
 80042a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e046      	b.n	8004348 <USB_EPStartXfer+0xd50>
 80042ba:	463b      	mov	r3, r7
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <USB_EPStartXfer+0xce6>
 80042d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d8:	3301      	adds	r3, #1
 80042da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e025      	b.n	8004348 <USB_EPStartXfer+0xd50>
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d120      	bne.n	8004348 <USB_EPStartXfer+0xd50>
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800431e:	4413      	add	r3, r2
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004324:	463b      	mov	r3, r7
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	011a      	lsls	r2, r3, #4
 800432c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004330:	4413      	add	r3, r2
 8004332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433a:	463b      	mov	r3, r7
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	b29a      	uxth	r2, r3
 8004342:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004346:	801a      	strh	r2, [r3, #0]
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004350:	463b      	mov	r3, r7
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 8082 	bne.w	8004460 <USB_EPStartXfer+0xe68>
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004374:	4413      	add	r3, r2
 8004376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800437a:	463b      	mov	r3, r7
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004386:	4413      	add	r3, r2
 8004388:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800438c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800439c:	b29a      	uxth	r2, r3
 800439e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	463b      	mov	r3, r7
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b3e      	cmp	r3, #62	; 0x3e
 80043ac:	d925      	bls.n	80043fa <USB_EPStartXfer+0xe02>
 80043ae:	463b      	mov	r3, r7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043ba:	463b      	mov	r3, r7
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <USB_EPStartXfer+0xdda>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	3b01      	subs	r3, #1
 80043ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29a      	uxth	r2, r3
 80043da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043de:	b29b      	uxth	r3, r3
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f6:	801a      	strh	r2, [r3, #0]
 80043f8:	e054      	b.n	80044a4 <USB_EPStartXfer+0xeac>
 80043fa:	463b      	mov	r3, r7
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <USB_EPStartXfer+0xe26>
 8004404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	e042      	b.n	80044a4 <USB_EPStartXfer+0xeac>
 800441e:	463b      	mov	r3, r7
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800442a:	463b      	mov	r3, r7
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <USB_EPStartXfer+0xe4a>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443c:	3301      	adds	r3, #1
 800443e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29a      	uxth	r2, r3
 800444a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444e:	b29b      	uxth	r3, r3
 8004450:	029b      	lsls	r3, r3, #10
 8004452:	b29b      	uxth	r3, r3
 8004454:	4313      	orrs	r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e021      	b.n	80044a4 <USB_EPStartXfer+0xeac>
 8004460:	463b      	mov	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d11c      	bne.n	80044a4 <USB_EPStartXfer+0xeac>
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800447a:	4413      	add	r3, r2
 800447c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004480:	463b      	mov	r3, r7
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	011a      	lsls	r2, r3, #4
 8004488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800448c:	4413      	add	r3, r2
 800448e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004496:	463b      	mov	r3, r7
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	b29a      	uxth	r2, r3
 800449e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80044a4:	463b      	mov	r3, r7
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 81bc 	beq.w	8004828 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	463b      	mov	r3, r7
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80044c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <USB_EPStartXfer+0xee4>
 80044d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10d      	bne.n	80044f8 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80044dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 819f 	bne.w	8004828 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80044ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 8198 	bne.w	8004828 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	463b      	mov	r3, r7
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	441a      	add	r2, r3
 8004524:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004538:	b29b      	uxth	r3, r3
 800453a:	8013      	strh	r3, [r2, #0]
 800453c:	e174      	b.n	8004828 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800453e:	463b      	mov	r3, r7
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	78db      	ldrb	r3, [r3, #3]
 8004544:	2b01      	cmp	r3, #1
 8004546:	f040 816d 	bne.w	8004824 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800454a:	463b      	mov	r3, r7
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	463b      	mov	r3, r7
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d90e      	bls.n	8004578 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800455a:	463b      	mov	r3, r7
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004564:	463b      	mov	r3, r7
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800456e:	1ad2      	subs	r2, r2, r3
 8004570:	463b      	mov	r3, r7
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	619a      	str	r2, [r3, #24]
 8004576:	e008      	b.n	800458a <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8004578:	463b      	mov	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004582:	463b      	mov	r3, r7
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800458a:	463b      	mov	r3, r7
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d17b      	bne.n	800468c <USB_EPStartXfer+0x1094>
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800459c:	1d3b      	adds	r3, r7, #4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045ac:	4413      	add	r3, r2
 80045ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b2:	463b      	mov	r3, r7
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045be:	4413      	add	r3, r2
 80045c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e0:	2b3e      	cmp	r3, #62	; 0x3e
 80045e2:	d923      	bls.n	800462c <USB_EPStartXfer+0x1034>
 80045e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <USB_EPStartXfer+0x100c>
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fe:	3b01      	subs	r3, #1
 8004600:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29a      	uxth	r2, r3
 800460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004610:	b29b      	uxth	r3, r3
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	b29b      	uxth	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004622:	b29a      	uxth	r2, r3
 8004624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e054      	b.n	80046d6 <USB_EPStartXfer+0x10de>
 800462c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10c      	bne.n	800464e <USB_EPStartXfer+0x1056>
 8004634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004644:	b29a      	uxth	r2, r3
 8004646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	e043      	b.n	80046d6 <USB_EPStartXfer+0x10de>
 800464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <USB_EPStartXfer+0x1076>
 8004664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004668:	3301      	adds	r3, #1
 800466a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800466e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29a      	uxth	r2, r3
 8004676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467a:	b29b      	uxth	r3, r3
 800467c:	029b      	lsls	r3, r3, #10
 800467e:	b29b      	uxth	r3, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	b29a      	uxth	r2, r3
 8004684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e024      	b.n	80046d6 <USB_EPStartXfer+0x10de>
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11f      	bne.n	80046d6 <USB_EPStartXfer+0x10de>
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ae:	4413      	add	r3, r2
 80046b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046b4:	463b      	mov	r3, r7
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	011a      	lsls	r2, r3, #4
 80046bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046c0:	4413      	add	r3, r2
 80046c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	1d3b      	adds	r3, r7, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046de:	463b      	mov	r3, r7
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d17b      	bne.n	80047e0 <USB_EPStartXfer+0x11e8>
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80046f0:	1d3b      	adds	r3, r7, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004700:	4413      	add	r3, r2
 8004702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	011a      	lsls	r2, r3, #4
 800470e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004712:	4413      	add	r3, r2
 8004714:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800471c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004728:	b29a      	uxth	r2, r3
 800472a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800472e:	801a      	strh	r2, [r3, #0]
 8004730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004734:	2b3e      	cmp	r3, #62	; 0x3e
 8004736:	d923      	bls.n	8004780 <USB_EPStartXfer+0x1188>
 8004738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <USB_EPStartXfer+0x1160>
 800474e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004752:	3b01      	subs	r3, #1
 8004754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29a      	uxth	r2, r3
 8004760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004764:	b29b      	uxth	r3, r3
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	b29b      	uxth	r3, r3
 800476a:	4313      	orrs	r3, r2
 800476c:	b29b      	uxth	r3, r3
 800476e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004776:	b29a      	uxth	r2, r3
 8004778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	e053      	b.n	8004828 <USB_EPStartXfer+0x1230>
 8004780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10c      	bne.n	80047a2 <USB_EPStartXfer+0x11aa>
 8004788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004798:	b29a      	uxth	r2, r3
 800479a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	e042      	b.n	8004828 <USB_EPStartXfer+0x1230>
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <USB_EPStartXfer+0x11ca>
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047bc:	3301      	adds	r3, #1
 80047be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	e023      	b.n	8004828 <USB_EPStartXfer+0x1230>
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d11e      	bne.n	8004828 <USB_EPStartXfer+0x1230>
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047fa:	4413      	add	r3, r2
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004800:	463b      	mov	r3, r7
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	011a      	lsls	r2, r3, #4
 8004808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800480c:	4413      	add	r3, r2
 800480e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481a:	b29a      	uxth	r2, r3
 800481c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e001      	b.n	8004828 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e02e      	b.n	8004886 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	463b      	mov	r3, r7
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004846:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800484a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800484e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004852:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004856:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800485a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	463b      	mov	r3, r7
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	441a      	add	r2, r3
 800486c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004880:	b29b      	uxth	r3, r3
 8004882:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USB_EPSetStall>:

HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	81bb      	strh	r3, [r7, #12]
 80048ba:	89bb      	ldrh	r3, [r7, #12]
 80048bc:	f083 0310 	eor.w	r3, r3, #16
 80048c0:	81bb      	strh	r3, [r7, #12]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	89bb      	ldrh	r3, [r7, #12]
 80048ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
 80048e2:	e01f      	b.n	8004924 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	81fb      	strh	r3, [r7, #14]
 80048fc:	89fb      	ldrh	r3, [r7, #14]
 80048fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004902:	81fb      	strh	r3, [r7, #14]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	89fb      	ldrh	r3, [r7, #14]
 8004910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <USB_EPClearStall>:

HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	7b1b      	ldrb	r3, [r3, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 809d 	bne.w	8004a7e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d04c      	beq.n	80049e6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	823b      	strh	r3, [r7, #16]
 800495a:	8a3b      	ldrh	r3, [r7, #16]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <USB_EPClearStall+0x6c>
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	81fb      	strh	r3, [r7, #14]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	78db      	ldrb	r3, [r3, #3]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d06c      	beq.n	8004a7e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ba:	81bb      	strh	r3, [r7, #12]
 80049bc:	89bb      	ldrh	r3, [r7, #12]
 80049be:	f083 0320 	eor.w	r3, r3, #32
 80049c2:	81bb      	strh	r3, [r7, #12]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
 80049e4:	e04b      	b.n	8004a7e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	82fb      	strh	r3, [r7, #22]
 80049f4:	8afb      	ldrh	r3, [r7, #22]
 80049f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01b      	beq.n	8004a36 <USB_EPClearStall+0x106>
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	82bb      	strh	r3, [r7, #20]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	8abb      	ldrh	r3, [r7, #20]
 8004a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	827b      	strh	r3, [r7, #18]
 8004a4e:	8a7b      	ldrh	r3, [r7, #18]
 8004a50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a54:	827b      	strh	r3, [r7, #18]
 8004a56:	8a7b      	ldrh	r3, [r7, #18]
 8004a58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a5c:	827b      	strh	r3, [r7, #18]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8a7b      	ldrh	r3, [r7, #18]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <USB_SetDevAddress>:

HAL_StatusTypeDef USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address){
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <USB_DevConnect>:

HAL_StatusTypeDef USB_DevConnect(USB_TypeDef *USBx){
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <USB_DevDisconnect>:

HAL_StatusTypeDef USB_DevDisconnect(USB_TypeDef *USBx){
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ReadInterrupts>:

uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx){
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004aea:	68fb      	ldr	r3, [r7, #12]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <USB_EP0_OutStart>:

HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <USB_WritePMA>:

void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes){
 8004b0c:	b480      	push	{r7}
 8004b0e:	b08b      	sub	sp, #44	; 0x2c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4611      	mov	r1, r2
 8004b18:	461a      	mov	r2, r3
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	80fb      	strh	r3, [r7, #6]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004b22:	88bb      	ldrh	r3, [r7, #4]
 8004b24:	3301      	adds	r3, #1
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	005a      	lsls	r2, r3, #1
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	e01e      	b.n	8004b84 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	b21a      	sxth	r2, r3
 8004b56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	8a7a      	ldrh	r2, [r7, #18]
 8004b64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	3302      	adds	r3, #2
 8004b6a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	3302      	adds	r3, #2
 8004b70:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	3b01      	subs	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1dd      	bne.n	8004b46 <USB_WritePMA+0x3a>
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	372c      	adds	r7, #44	; 0x2c
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <USB_ReadPMA>:

void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b08b      	sub	sp, #44	; 0x2c
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	80fb      	strh	r3, [r7, #6]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004bac:	88bb      	ldrh	r3, [r7, #4]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	e01b      	b.n	8004c08 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	3302      	adds	r3, #2
 8004bdc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3301      	adds	r3, #1
 8004bea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	3302      	adds	r3, #2
 8004c00:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	3b01      	subs	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e0      	bne.n	8004bd0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004c0e:	88bb      	ldrh	r3, [r7, #4]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	701a      	strb	r2, [r3, #0]
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	372c      	adds	r7, #44	; 0x2c
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <USBD_Init>:

USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id){
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL){
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <USBD_Init+0x18>
    return USBD_FAIL;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e01a      	b.n	8004c82 <USBD_Init+0x4e>
  }
  /* Unlink previous class*/
  if (pdev->pClass != NULL){
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <USBD_Init+0x2a>
    pdev->pClass = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }
  /* Assign USBD Descriptors */
  if (pdesc != NULL){
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <USBD_Init+0x38>
    pdev->pDesc = pdesc;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }
  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	79fa      	ldrb	r2, [r7, #7]
 8004c78:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fb60 	bl	8005340 <USBD_LL_Init>
  return USBD_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <USBD_RegisterClass>:

USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass){
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL){
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <USBD_RegisterClass+0x22>
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e001      	b.n	8004cb0 <USBD_RegisterClass+0x26>
  }
  else{
    status = USBD_FAIL;
 8004cac:	2302      	movs	r3, #2
 8004cae:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <USBD_Start>:

USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev){
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb83 	bl	80053d0 <USBD_LL_Start>
  return USBD_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <USBD_RunTestMode>:

USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev){
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);
  return USBD_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	73fb      	strb	r3, [r7, #15]
  if (pdev->pClass != NULL){
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <USBD_SetClassConfig+0x34>
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <USBD_ClrClassConfig>:

USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
  return USBD_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <USBD_LL_SetupStage>:

USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup){
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 f99c 	bl	800609c <USBD_ParseSetupRequest>
  pdev->ep0_state = USBD_EP0_SETUP;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU){
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d016      	beq.n	8004db6 <USBD_LL_SetupStage+0x6a>
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d81c      	bhi.n	8004dc6 <USBD_LL_SetupStage+0x7a>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <USBD_LL_SetupStage+0x4a>
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d008      	beq.n	8004da6 <USBD_LL_SetupStage+0x5a>
 8004d94:	e017      	b.n	8004dc6 <USBD_LL_SetupStage+0x7a>
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fc7e 	bl	80056a0 <USBD_StdDevReq>
      break;
 8004da4:	e01a      	b.n	8004ddc <USBD_LL_SetupStage+0x90>
    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fce0 	bl	8005774 <USBD_StdItfReq>
      break;
 8004db4:	e012      	b.n	8004ddc <USBD_LL_SetupStage+0x90>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fd20 	bl	8005804 <USBD_StdEPReq>
      break;
 8004dc4:	e00a      	b.n	8004ddc <USBD_LL_SetupStage+0x90>
    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb5b 	bl	8005490 <USBD_LL_StallEP>
      break;
 8004dda:	bf00      	nop
  }
  return USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <USBD_LL_DataOutStage>:

USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata){
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b086      	sub	sp, #24
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	460b      	mov	r3, r1
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  if (epnum == 0U){
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d14b      	bne.n	8004e92 <USBD_LL_DataOutStage+0xac>
    pep = &pdev->ep_out[0];
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e00:	617b      	str	r3, [r7, #20]
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d134      	bne.n	8004e76 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d919      	bls.n	8004e4c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	60da      	str	r2, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d203      	bcs.n	8004e3a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	e002      	b.n	8004e40 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f001 fc91 	bl	800676c <USBD_CtlContinueRx>
 8004e4a:	e038      	b.n	8004ebe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d105      	bne.n	8004e6e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f001 fc8e 	bl	8006790 <USBD_CtlSendStatus>
 8004e74:	e023      	b.n	8004ebe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d11e      	bne.n	8004ebe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004e88:	2100      	movs	r1, #0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fb00 	bl	8005490 <USBD_LL_StallEP>
 8004e90:	e015      	b.n	8004ebe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED)){
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d108      	bne.n	8004eba <USBD_LL_DataOutStage+0xd4>
    pdev->pClass->DataOut(pdev, epnum);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	7afa      	ldrb	r2, [r7, #11]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	4798      	blx	r3
 8004eb8:	e001      	b.n	8004ebe <USBD_LL_DataOutStage+0xd8>
  }
  else{
    /* should never be in this condition */
    return USBD_FAIL;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e000      	b.n	8004ec0 <USBD_LL_DataOutStage+0xda>
  }
  return USBD_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <USBD_LL_DataInStage>:

USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  if (epnum == 0U){
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d17f      	bne.n	8004fdc <USBD_LL_DataInStage+0x114>
    pep = &pdev->ep_in[0];
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	617b      	str	r3, [r7, #20]
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d15c      	bne.n	8004fa6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d915      	bls.n	8004f24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	60da      	str	r2, [r3, #12]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f001 fc19 	bl	8006748 <USBD_CtlContinueSendData>
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f16:	2300      	movs	r3, #0
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fb63 	bl	80055e8 <USBD_LL_PrepareReceive>
 8004f22:	e04e      	b.n	8004fc2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	6912      	ldr	r2, [r2, #16]
 8004f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f30:	fb02 f201 	mul.w	r2, r2, r1
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11c      	bne.n	8004f74 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d316      	bcc.n	8004f74 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d20f      	bcs.n	8004f74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f54:	2200      	movs	r2, #0
 8004f56:	2100      	movs	r1, #0
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f001 fbf5 	bl	8006748 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f66:	2300      	movs	r3, #0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 fb3b 	bl	80055e8 <USBD_LL_PrepareReceive>
 8004f72:	e026      	b.n	8004fc2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d105      	bne.n	8004f96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa79 	bl	8005490 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f001 fc09 	bl	80067b6 <USBD_CtlReceiveStatus>
 8004fa4:	e00d      	b.n	8004fc2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d004      	beq.n	8004fba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa67 	bl	8005490 <USBD_LL_StallEP>
      }
    }
    if (pdev->dev_test_mode == 1U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d11d      	bne.n	8005008 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fe81 	bl	8004cd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004fda:	e015      	b.n	8005008 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00d      	beq.n	8005004 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED)){
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d108      	bne.n	8005004 <USBD_LL_DataInStage+0x13c>
    pdev->pClass->DataIn(pdev, epnum);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	7afa      	ldrb	r2, [r7, #11]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	4798      	blx	r3
 8005002:	e001      	b.n	8005008 <USBD_LL_DataInStage+0x140>
  }
  else{
    /* should never be in this condition */
    return USBD_FAIL;
 8005004:	2302      	movs	r3, #2
 8005006:	e000      	b.n	800500a <USBD_LL_DataInStage+0x142>
  }
  return USBD_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev){
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800501a:	2340      	movs	r3, #64	; 0x40
 800501c:	2200      	movs	r2, #0
 800501e:	2100      	movs	r1, #0
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f9f0 	bl	8005406 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2240      	movs	r2, #64	; 0x40
 8005032:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9e2 	bl	8005406 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  if (pdev->pClassData){
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <USBD_LL_Reset+0x78>
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6852      	ldr	r2, [r2, #4]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	4611      	mov	r1, r2
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
  }
  return USBD_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <USBD_LL_SetSpeed>:

USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev, USBD_SpeedTypeDef speed){
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <USBD_LL_Suspend>:

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev){
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  return USBD_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <USBD_LL_Resume>:

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev){
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED){
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d105      	bne.n	80050f8 <USBD_LL_Resume+0x1e>
    pdev->dev_state = pdev->dev_old_state;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }
  return USBD_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <USBD_LL_SOF>:

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev){
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED){
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005112:	2b03      	cmp	r3, #3
 8005114:	d10b      	bne.n	800512e <USBD_LL_SOF+0x2a>
    if (pdev->pClass->SOF != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_PCD_MspInit>:

PCD_HandleTypeDef hpcd_USB_FS;
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle){
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)  {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <HAL_PCD_MspInit+0x44>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d113      	bne.n	8005172 <HAL_PCD_MspInit+0x3a>
    __HAL_RCC_USB_CLK_ENABLE();
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <HAL_PCD_MspInit+0x48>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <HAL_PCD_MspInit+0x48>)
 8005150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005154:	61d3      	str	r3, [r2, #28]
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_PCD_MspInit+0x48>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005162:	2200      	movs	r2, #0
 8005164:	2100      	movs	r1, #0
 8005166:	2014      	movs	r0, #20
 8005168:	f7fb f9d7 	bl	800051a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800516c:	2014      	movs	r0, #20
 800516e:	f7fb f9f0 	bl	8000552 <HAL_NVIC_EnableIRQ>
  }
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40005c00 	.word	0x40005c00
 8005180:	40021000 	.word	0x40021000

08005184 <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd){
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f7ff fdd6 	bl	8004d4c <USBD_LL_SetupStage>
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum){
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	440b      	add	r3, r1
 80051c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	4619      	mov	r1, r3
 80051d2:	f7ff fe08 	bl	8004de6 <USBD_LL_DataOutStage>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum){
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	333c      	adds	r3, #60	; 0x3c
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	4619      	mov	r1, r3
 8005206:	f7ff fe5f 	bl	8004ec8 <USBD_LL_DataInStage>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd){
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff6f 	bl	8005104 <USBD_LL_SOF>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd){
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)  {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d001      	beq.n	8005246 <HAL_PCD_ResetCallback+0x18>
    Error_Handler();
 8005242:	f7fb f85f 	bl	8000304 <Error_Handler>
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff1f 	bl	8005094 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fed8 	bl	8005012 <USBD_LL_Reset>
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_PCD_SuspendCallback>:

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd){
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ff19 	bl	80050b2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)  {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <HAL_PCD_SuspendCallback+0x30>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	4a03      	ldr	r2, [pc, #12]	; (800529c <HAL_PCD_SuspendCallback+0x30>)
 800528e:	f043 0306 	orr.w	r3, r3, #6
 8005292:	6113      	str	r3, [r2, #16]
  }
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ff13 	bl	80050da <USBD_LL_Resume>
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr, uint16_t ep_kind, uint32_t pmaadress){
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	817b      	strh	r3, [r7, #10]
 80052ca:	4613      	mov	r3, r2
 80052cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  if ((0x80U & ep_addr) == 0x80U)  {
 80052ce:	897b      	ldrh	r3, [r7, #10]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_PCDEx_PMAConfig+0x36>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e009      	b.n	8005306 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052f2:	897a      	ldrh	r2, [r7, #10]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
  }
  if (ep_kind == PCD_SNG_BUF)  {
 8005306:	893b      	ldrh	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d107      	bne.n	800531c <HAL_PCDEx_PMAConfig+0x60>
    ep->doublebuffer = 0U;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	731a      	strb	r2, [r3, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	b29a      	uxth	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	80da      	strh	r2, [r3, #6]
 800531a:	e00b      	b.n	8005334 <HAL_PCDEx_PMAConfig+0x78>
  }
  else {
    ep->doublebuffer = 1U;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2201      	movs	r2, #1
 8005320:	731a      	strb	r2, [r3, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	b29a      	uxth	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	b29a      	uxth	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	815a      	strh	r2, [r3, #10]
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <USBD_LL_Init>:

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev){
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  hpcd_USB_FS.pData = pdev;
 8005348:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <USBD_LL_Init+0x88>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <USBD_LL_Init+0x88>)
 8005354:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <USBD_LL_Init+0x88>)
 800535a:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <USBD_LL_Init+0x8c>)
 800535c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <USBD_LL_Init+0x88>)
 8005360:	2208      	movs	r2, #8
 8005362:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005364:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <USBD_LL_Init+0x88>)
 8005366:	2202      	movs	r2, #2
 8005368:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <USBD_LL_Init+0x88>)
 800536c:	2200      	movs	r2, #0
 800536e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005370:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <USBD_LL_Init+0x88>)
 8005372:	2200      	movs	r2, #0
 8005374:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <USBD_LL_Init+0x88>)
 8005378:	2200      	movs	r2, #0
 800537a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)  {
 800537c:	4812      	ldr	r0, [pc, #72]	; (80053c8 <USBD_LL_Init+0x88>)
 800537e:	f7fb fd95 	bl	8000eac <HAL_PCD_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <USBD_LL_Init+0x4c>
    Error_Handler( );
 8005388:	f7fa ffbc 	bl	8000304 <Error_Handler>
  }
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005392:	2318      	movs	r3, #24
 8005394:	2200      	movs	r2, #0
 8005396:	2100      	movs	r1, #0
 8005398:	f7ff ff90 	bl	80052bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053a2:	2358      	movs	r3, #88	; 0x58
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	f7ff ff88 	bl	80052bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b6:	2200      	movs	r2, #0
 80053b8:	2181      	movs	r1, #129	; 0x81
 80053ba:	f7ff ff7f 	bl	80052bc <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	2000045c 	.word	0x2000045c
 80053cc:	40005c00 	.word	0x40005c00

080053d0 <USBD_LL_Start>:

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_Start(pdev->pData);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fb fe5f 	bl	80010aa <HAL_PCD_Start>
 80053ec:	4603      	mov	r3, r0
 80053ee:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f928 	bl	8005648 <USBD_Get_USB_Status>
 80053f8:	4603      	mov	r3, r0
 80053fa:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 80053fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <USBD_LL_OpenEP>:

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps){
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	4608      	mov	r0, r1
 8005410:	4611      	mov	r1, r2
 8005412:	461a      	mov	r2, r3
 8005414:	4603      	mov	r3, r0
 8005416:	70fb      	strb	r3, [r7, #3]
 8005418:	460b      	mov	r3, r1
 800541a:	70bb      	strb	r3, [r7, #2]
 800541c:	4613      	mov	r3, r2
 800541e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800542e:	78f9      	ldrb	r1, [r7, #3]
 8005430:	883a      	ldrh	r2, [r7, #0]
 8005432:	78bb      	ldrb	r3, [r7, #2]
 8005434:	f7fb ffb2 	bl	800139c <HAL_PCD_EP_Open>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f902 	bl	8005648 <USBD_Get_USB_Status>
 8005444:	4603      	mov	r3, r0
 8005446:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005448:	7bbb      	ldrb	r3, [r7, #14]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f7fb fff0 	bl	8001456 <HAL_PCD_EP_Close>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f8e3 	bl	8005648 <USBD_Get_USB_Status>
 8005482:	4603      	mov	r3, r0
 8005484:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005486:	7bbb      	ldrb	r3, [r7, #14]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_LL_StallEP>:

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fc f881 	bl	80015b6 <HAL_PCD_EP_SetStall>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f8c4 	bl	8005648 <USBD_Get_USB_Status>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fc f8c2 	bl	8001676 <HAL_PCD_EP_ClrStall>
 80054f2:	4603      	mov	r3, r0
 80054f4:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f8a5 	bl	8005648 <USBD_Get_USB_Status>
 80054fe:	4603      	mov	r3, r0
 8005500:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005502:	7bbb      	ldrb	r3, [r7, #14]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800551e:	60fb      	str	r3, [r7, #12]
  if((ep_addr & 0x80) == 0x80)  {
 8005520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005524:	2b00      	cmp	r3, #0
 8005526:	da0c      	bge.n	8005542 <USBD_LL_IsStallEP+0x36>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	440b      	add	r3, r1
 800553c:	3302      	adds	r3, #2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	e00b      	b.n	800555a <USBD_LL_IsStallEP+0x4e>
  }
  else  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	440b      	add	r3, r1
 8005554:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8005558:	781b      	ldrb	r3, [r3, #0]
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr){
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f7fb fee5 	bl	8001352 <HAL_PCD_SetAddress>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f85a 	bl	8005648 <USBD_Get_USB_Status>
 8005594:	4603      	mov	r3, r0
 8005596:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005598:	7bbb      	ldrb	r3, [r7, #14]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size){
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	461a      	mov	r2, r3
 80055ae:	460b      	mov	r3, r1
 80055b0:	72fb      	strb	r3, [r7, #11]
 80055b2:	4613      	mov	r3, r2
 80055b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80055c4:	7af9      	ldrb	r1, [r7, #11]
 80055c6:	893b      	ldrh	r3, [r7, #8]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	f7fb ffbd 	bl	8001548 <HAL_PCD_EP_Transmit>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f837 	bl	8005648 <USBD_Get_USB_Status>
 80055da:	4603      	mov	r3, r0
 80055dc:	75bb      	strb	r3, [r7, #22]
  return usb_status;
 80055de:	7dbb      	ldrb	r3, [r7, #22]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	461a      	mov	r2, r3
 80055f4:	460b      	mov	r3, r1
 80055f6:	72fb      	strb	r3, [r7, #11]
 80055f8:	4613      	mov	r3, r2
 80055fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800560a:	7af9      	ldrb	r1, [r7, #11]
 800560c:	893b      	ldrh	r3, [r7, #8]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	f7fb ff69 	bl	80014e6 <HAL_PCD_EP_Receive>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f814 	bl	8005648 <USBD_Get_USB_Status>
 8005620:	4603      	mov	r3, r0
 8005622:	75bb      	strb	r3, [r7, #22]
  return usb_status;
 8005624:	7dbb      	ldrb	r3, [r7, #22]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size){
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005638:	4b02      	ldr	r3, [pc, #8]	; (8005644 <USBD_static_malloc+0x14>)
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr
 8005644:	2000017c 	.word	0x2000017c

08005648 <USBD_Get_USB_Status>:

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status){
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  switch (hal_status)  {
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d817      	bhi.n	800568c <USBD_Get_USB_Status+0x44>
 800565c:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <USBD_Get_USB_Status+0x1c>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005675 	.word	0x08005675
 8005668:	0800567b 	.word	0x0800567b
 800566c:	08005681 	.word	0x08005681
 8005670:	08005687 	.word	0x08005687
    case HAL_OK :
      usb_status = USBD_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	e00b      	b.n	8005692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800567a:	2302      	movs	r3, #2
 800567c:	73fb      	strb	r3, [r7, #15]
      break;
 800567e:	e008      	b.n	8005692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
      break;
 8005684:	e005      	b.n	8005692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005686:	2302      	movs	r3, #2
 8005688:	73fb      	strb	r3, [r7, #15]
      break;
 800568a:	e002      	b.n	8005692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800568c:	2302      	movs	r3, #2
 800568e:	73fb      	strb	r3, [r7, #15]
      break;
 8005690:	bf00      	nop
  }
  return usb_status;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop

080056a0 <USBD_StdDevReq>:
static void USBD_GetConfig(USBD_HandleTypeDef *pdev,     USBD_SetupReqTypedef *req);
static void USBD_GetStatus(USBD_HandleTypeDef *pdev,     USBD_SetupReqTypedef *req);
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,    USBD_SetupReqTypedef *req);
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,    USBD_SetupReqTypedef *req);
static uint8_t USBD_GetLen(uint8_t *buf);
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d005      	beq.n	80056c6 <USBD_StdDevReq+0x26>
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d84f      	bhi.n	800575e <USBD_StdDevReq+0xbe>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <USBD_StdDevReq+0x36>
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d14b      	bne.n	800575e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
      break;
 80056d4:	e048      	b.n	8005768 <USBD_StdDevReq+0xc8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest){
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d839      	bhi.n	8005752 <USBD_StdDevReq+0xb2>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <USBD_StdDevReq+0x44>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005749 	.word	0x08005749
 80056ec:	08005753 	.word	0x08005753
 80056f0:	0800573f 	.word	0x0800573f
 80056f4:	08005753 	.word	0x08005753
 80056f8:	08005717 	.word	0x08005717
 80056fc:	0800570d 	.word	0x0800570d
 8005700:	08005753 	.word	0x08005753
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005721 	.word	0x08005721
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f9dc 	bl	8005acc <USBD_GetDescriptor>
          break;
 8005714:	e022      	b.n	800575c <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb3f 	bl	8005d9c <USBD_SetAddress>
          break;
 800571e:	e01d      	b.n	800575c <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fb7e 	bl	8005e24 <USBD_SetConfig>
          break;
 8005728:	e018      	b.n	800575c <USBD_StdDevReq+0xbc>
        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fc07 	bl	8005f40 <USBD_GetConfig>
          break;
 8005732:	e013      	b.n	800575c <USBD_StdDevReq+0xbc>
        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fc37 	bl	8005faa <USBD_GetStatus>
          break;
 800573c:	e00e      	b.n	800575c <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fc65 	bl	8006010 <USBD_SetFeature>
          break;
 8005746:	e009      	b.n	800575c <USBD_StdDevReq+0xbc>
        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fc74 	bl	8006038 <USBD_ClrFeature>
          break;
 8005750:	e004      	b.n	800575c <USBD_StdDevReq+0xbc>
        default:
          USBD_CtlError(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fc90 	bl	800607a <USBD_CtlError>
          break;
 800575a:	bf00      	nop
      }
      break;
 800575c:	e004      	b.n	8005768 <USBD_StdDevReq+0xc8>
    default:
      USBD_CtlError(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fc8a 	bl	800607a <USBD_CtlError>
      break;
 8005766:	bf00      	nop
  }
  return ret;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop

08005774 <USBD_StdItfReq>:

USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req){
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)  {
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d005      	beq.n	800579a <USBD_StdItfReq+0x26>
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d82e      	bhi.n	80057f0 <USBD_StdItfReq+0x7c>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <USBD_StdItfReq+0x26>
 8005796:	2b20      	cmp	r3, #32
 8005798:	d12a      	bne.n	80057f0 <USBD_StdItfReq+0x7c>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)      {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a0:	3b01      	subs	r3, #1
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d81d      	bhi.n	80057e2 <USBD_StdItfReq+0x6e>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)          {
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	889b      	ldrh	r3, [r3, #4]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d813      	bhi.n	80057d8 <USBD_StdItfReq+0x64>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	88db      	ldrh	r3, [r3, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d110      	bne.n	80057ec <USBD_StdItfReq+0x78>
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10d      	bne.n	80057ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 ffdd 	bl	8006790 <USBD_CtlSendStatus>
            }
          }
          else          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057d6:	e009      	b.n	80057ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fc4d 	bl	800607a <USBD_CtlError>
          break;
 80057e0:	e004      	b.n	80057ec <USBD_StdItfReq+0x78>
        default:
          USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fc48 	bl	800607a <USBD_CtlError>
          break;
 80057ea:	e000      	b.n	80057ee <USBD_StdItfReq+0x7a>
          break;
 80057ec:	bf00      	nop
      }
      break;
 80057ee:	e004      	b.n	80057fa <USBD_StdItfReq+0x86>
    default:
      USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fc41 	bl	800607a <USBD_CtlError>
      break;
 80057f8:	bf00      	nop
  }
  return USBD_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_StdEPReq>:

USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req){
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	889b      	ldrh	r3, [r3, #4]
 8005816:	73bb      	strb	r3, [r7, #14]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)  {
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d007      	beq.n	8005834 <USBD_StdEPReq+0x30>
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	f200 8146 	bhi.w	8005ab6 <USBD_StdEPReq+0x2b2>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <USBD_StdEPReq+0x40>
 800582e:	2b20      	cmp	r3, #32
 8005830:	f040 8141 	bne.w	8005ab6 <USBD_StdEPReq+0x2b2>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
      break;
 8005842:	e13d      	b.n	8005ac0 <USBD_StdEPReq+0x2bc>
    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)      {
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800584c:	2b20      	cmp	r3, #32
 800584e:	d10a      	bne.n	8005866 <USBD_StdEPReq+0x62>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
 800585e:	4603      	mov	r3, r0
 8005860:	73fb      	strb	r3, [r7, #15]
        return ret;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	e12d      	b.n	8005ac2 <USBD_StdEPReq+0x2be>
      }
      switch (req->bRequest)      {
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b03      	cmp	r3, #3
 800586c:	d007      	beq.n	800587e <USBD_StdEPReq+0x7a>
 800586e:	2b03      	cmp	r3, #3
 8005870:	f300 811b 	bgt.w	8005aaa <USBD_StdEPReq+0x2a6>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d072      	beq.n	800595e <USBD_StdEPReq+0x15a>
 8005878:	2b01      	cmp	r3, #1
 800587a:	d03a      	beq.n	80058f2 <USBD_StdEPReq+0xee>
 800587c:	e115      	b.n	8005aaa <USBD_StdEPReq+0x2a6>
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)          {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005884:	2b02      	cmp	r3, #2
 8005886:	d002      	beq.n	800588e <USBD_StdEPReq+0x8a>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d015      	beq.n	80058b8 <USBD_StdEPReq+0xb4>
 800588c:	e02b      	b.n	80058e6 <USBD_StdEPReq+0xe2>
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <USBD_StdEPReq+0xaa>
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d009      	beq.n	80058ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fdf6 	bl	8005490 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fdf2 	bl	8005490 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058ac:	e020      	b.n	80058f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fbe2 	bl	800607a <USBD_CtlError>
              break;
 80058b6:	e01b      	b.n	80058f0 <USBD_StdEPReq+0xec>
            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	885b      	ldrh	r3, [r3, #2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10e      	bne.n	80058de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <USBD_StdEPReq+0xda>
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	d008      	beq.n	80058de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	88db      	ldrh	r3, [r3, #6]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fdd9 	bl	8005490 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 ff56 	bl	8006790 <USBD_CtlSendStatus>
              break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdEPReq+0xec>
            default:
              USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fbc6 	bl	800607a <USBD_CtlError>
              break;
 80058ee:	bf00      	nop
          }
          break;
 80058f0:	e0e0      	b.n	8005ab4 <USBD_StdEPReq+0x2b0>
        case USB_REQ_CLEAR_FEATURE:
          switch (pdev->dev_state)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d002      	beq.n	8005902 <USBD_StdEPReq+0xfe>
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d015      	beq.n	800592c <USBD_StdEPReq+0x128>
 8005900:	e026      	b.n	8005950 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <USBD_StdEPReq+0x11e>
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d009      	beq.n	8005922 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fdbc 	bl	8005490 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fdb8 	bl	8005490 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005920:	e01c      	b.n	800595c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fba8 	bl	800607a <USBD_CtlError>
              break;
 800592a:	e017      	b.n	800595c <USBD_StdEPReq+0x158>
            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	885b      	ldrh	r3, [r3, #2]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d112      	bne.n	800595a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fdc3 	bl	80054ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 ff21 	bl	8006790 <USBD_CtlSendStatus>
              }
              break;
 800594e:	e004      	b.n	800595a <USBD_StdEPReq+0x156>
            default:
              USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fb91 	bl	800607a <USBD_CtlError>
              break;
 8005958:	e000      	b.n	800595c <USBD_StdEPReq+0x158>
              break;
 800595a:	bf00      	nop
          }
          break;
 800595c:	e0aa      	b.n	8005ab4 <USBD_StdEPReq+0x2b0>
        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	2b02      	cmp	r3, #2
 8005966:	d002      	beq.n	800596e <USBD_StdEPReq+0x16a>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d032      	beq.n	80059d2 <USBD_StdEPReq+0x1ce>
 800596c:	e097      	b.n	8005a9e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <USBD_StdEPReq+0x180>
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d004      	beq.n	8005984 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb7c 	bl	800607a <USBD_CtlError>
                break;
 8005982:	e091      	b.n	8005aa8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005988:	2b00      	cmp	r3, #0
 800598a:	da0b      	bge.n	80059a4 <USBD_StdEPReq+0x1a0>
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	3310      	adds	r3, #16
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	e00b      	b.n	80059bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60bb      	str	r3, [r7, #8]
              pep->status = 0x0000U;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2202      	movs	r2, #2
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fea0 	bl	8006710 <USBD_CtlSendData>
              break;
 80059d0:	e06a      	b.n	8005aa8 <USBD_StdEPReq+0x2a4>
            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da11      	bge.n	80059fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3318      	adds	r3, #24
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d117      	bne.n	8005a24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fb3f 	bl	800607a <USBD_CtlError>
                  break;
 80059fc:	e054      	b.n	8005aa8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb2c 	bl	800607a <USBD_CtlError>
                  break;
 8005a22:	e041      	b.n	8005aa8 <USBD_StdEPReq+0x2a4>
                }
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da0b      	bge.n	8005a44 <USBD_StdEPReq+0x240>
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	3310      	adds	r3, #16
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	4413      	add	r3, r2
 8005a40:	3304      	adds	r3, #4
 8005a42:	e00b      	b.n	8005a5c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	60bb      	str	r3, [r7, #8]
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <USBD_StdEPReq+0x266>
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d103      	bne.n	8005a72 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e00e      	b.n	8005a90 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fd48 	bl	800550c <USBD_LL_IsStallEP>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e002      	b.n	8005a90 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
              }
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2202      	movs	r2, #2
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fe3a 	bl	8006710 <USBD_CtlSendData>
              break;
 8005a9c:	e004      	b.n	8005aa8 <USBD_StdEPReq+0x2a4>
            default:
              USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 faea 	bl	800607a <USBD_CtlError>
              break;
 8005aa6:	bf00      	nop
          }
          break;
 8005aa8:	e004      	b.n	8005ab4 <USBD_StdEPReq+0x2b0>
        default:
          USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fae4 	bl	800607a <USBD_CtlError>
          break;
 8005ab2:	bf00      	nop
      }
      break;
 8005ab4:	e004      	b.n	8005ac0 <USBD_StdEPReq+0x2bc>
    default:
      USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fade 	bl	800607a <USBD_CtlError>
      break;
 8005abe:	bf00      	nop
  }
  return ret;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <USBD_GetDescriptor>:

static void USBD_GetDescriptor    (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	72fb      	strb	r3, [r7, #11]
  switch (req->wValue >> 8)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	f200 8128 	bhi.w	8005d42 <USBD_GetDescriptor+0x276>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <USBD_GetDescriptor+0x2c>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b6d 	.word	0x08005b6d
 8005b04:	08005d43 	.word	0x08005d43
 8005b08:	08005d43 	.word	0x08005d43
 8005b0c:	08005ce3 	.word	0x08005ce3
 8005b10:	08005d0f 	.word	0x08005d0f
  {
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	7c12      	ldrb	r2, [r2, #16]
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	60f8      	str	r0, [r7, #12]
      break;
 8005b2a:	e112      	b.n	8005d52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7c1b      	ldrb	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10d      	bne.n	8005b50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f107 0208 	add.w	r2, r7, #8
 8005b40:	4610      	mov	r0, r2
 8005b42:	4798      	blx	r3
 8005b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b4e:	e100      	b.n	8005d52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f107 0208 	add.w	r2, r7, #8
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4798      	blx	r3
 8005b60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	2202      	movs	r2, #2
 8005b68:	701a      	strb	r2, [r3, #0]
      break;
 8005b6a:	e0f2      	b.n	8005d52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	885b      	ldrh	r3, [r3, #2]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	f200 80ac 	bhi.w	8005cd0 <USBD_GetDescriptor+0x204>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <USBD_GetDescriptor+0xb4>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005bcd 	.word	0x08005bcd
 8005b88:	08005c01 	.word	0x08005c01
 8005b8c:	08005c35 	.word	0x08005c35
 8005b90:	08005c69 	.word	0x08005c69
 8005b94:	08005c9d 	.word	0x08005c9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	7c12      	ldrb	r2, [r2, #16]
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bba:	e091      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa5b 	bl	800607a <USBD_CtlError>
            err++;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bca:	e089      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	7c12      	ldrb	r2, [r2, #16]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bee:	e077      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa41 	bl	800607a <USBD_CtlError>
            err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfe:	e06f      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	7c12      	ldrb	r2, [r2, #16]
 8005c18:	f107 0108 	add.w	r1, r7, #8
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c22:	e05d      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa27 	bl	800607a <USBD_CtlError>
            err++;
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	72fb      	strb	r3, [r7, #11]
          break;
 8005c32:	e055      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	7c12      	ldrb	r2, [r2, #16]
 8005c4c:	f107 0108 	add.w	r1, r7, #8
 8005c50:	4610      	mov	r0, r2
 8005c52:	4798      	blx	r3
 8005c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c56:	e043      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa0d 	bl	800607a <USBD_CtlError>
            err++;
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	3301      	adds	r3, #1
 8005c64:	72fb      	strb	r3, [r7, #11]
          break;
 8005c66:	e03b      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	7c12      	ldrb	r2, [r2, #16]
 8005c80:	f107 0108 	add.w	r1, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8a:	e029      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f9f3 	bl	800607a <USBD_CtlError>
            err++;
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	3301      	adds	r3, #1
 8005c98:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9a:	e021      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7c12      	ldrb	r2, [r2, #16]
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cbe:	e00f      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9d9 	bl	800607a <USBD_CtlError>
            err++;
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cce:	e007      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
        default:
          USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f9d1 	bl	800607a <USBD_CtlError>
          err++;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8005cde:	e038      	b.n	8005d52 <USBD_GetDescriptor+0x286>
 8005ce0:	e037      	b.n	8005d52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7c1b      	ldrb	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	f107 0208 	add.w	r2, r7, #8
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
 8005cfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cfc:	e029      	b.n	8005d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f9ba 	bl	800607a <USBD_CtlError>
        err++;
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d0c:	e021      	b.n	8005d52 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7c1b      	ldrb	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f107 0208 	add.w	r2, r7, #8
 8005d22:	4610      	mov	r0, r2
 8005d24:	4798      	blx	r3
 8005d26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	2207      	movs	r2, #7
 8005d2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d30:	e00f      	b.n	8005d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f9a0 	bl	800607a <USBD_CtlError>
        err++;
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d40:	e007      	b.n	8005d52 <USBD_GetDescriptor+0x286>
    default:
      USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f998 	bl	800607a <USBD_CtlError>
      err++;
 8005d4a:	7afb      	ldrb	r3, [r7, #11]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d50:	bf00      	nop
  }
  if (err != 0U)
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11c      	bne.n	8005d92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005d58:	893b      	ldrh	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d011      	beq.n	8005d82 <USBD_GetDescriptor+0x2b6>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	88db      	ldrh	r3, [r3, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	88da      	ldrh	r2, [r3, #6]
 8005d6a:	893b      	ldrh	r3, [r7, #8]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bf28      	it	cs
 8005d70:	4613      	movcs	r3, r2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d76:	893b      	ldrh	r3, [r7, #8]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fcc7 	bl	8006710 <USBD_CtlSendData>
    }
    if (req->wLength == 0U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd00 	bl	8006790 <USBD_CtlSendStatus>
 8005d90:	e000      	b.n	8005d94 <USBD_GetDescriptor+0x2c8>
    return;
 8005d92:	bf00      	nop
    }
  }
}
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop

08005d9c <USBD_SetAddress>:
static void USBD_SetAddress		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	889b      	ldrh	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d130      	bne.n	8005e10 <USBD_SetAddress+0x74>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	88db      	ldrh	r3, [r3, #6]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d12c      	bne.n	8005e10 <USBD_SetAddress+0x74>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	885b      	ldrh	r3, [r3, #2]
 8005dba:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbc:	d828      	bhi.n	8005e10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc8:	73fb      	strb	r3, [r7, #15]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d104      	bne.n	8005dde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f94f 	bl	800607a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ddc:	e01d      	b.n	8005e1a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	7bfa      	ldrb	r2, [r7, #15]
 8005de2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fbba 	bl	8005564 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fccd 	bl	8006790 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e04:	e009      	b.n	8005e1a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0e:	e004      	b.n	8005e1a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f931 	bl	800607a <USBD_CtlError>
  }
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <USBD_SetConfig>:

static void USBD_SetConfig		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;
  cfgidx = (uint8_t)(req->wValue);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	885b      	ldrh	r3, [r3, #2]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e36:	701a      	strb	r2, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e38:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d904      	bls.n	8005e4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f919 	bl	800607a <USBD_CtlError>
 8005e48:	e075      	b.n	8005f36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d002      	beq.n	8005e5a <USBD_SetConfig+0x36>
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d023      	beq.n	8005ea0 <USBD_SetConfig+0x7c>
 8005e58:	e062      	b.n	8005f20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005e5a:	4b38      	ldr	r3, [pc, #224]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01a      	beq.n	8005e98 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005e62:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fe ff34 	bl	8004ce8 <USBD_SetClassConfig>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d104      	bne.n	8005e90 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f8f6 	bl	800607a <USBD_CtlError>
            return;
 8005e8e:	e052      	b.n	8005f36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fc7d 	bl	8006790 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005e96:	e04e      	b.n	8005f36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fc79 	bl	8006790 <USBD_CtlSendStatus>
        break;
 8005e9e:	e04a      	b.n	8005f36 <USBD_SetConfig+0x112>
      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d112      	bne.n	8005ece <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005eb0:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <USBD_SetConfig+0x118>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005eba:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fe ff30 	bl	8004d26 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fc62 	bl	8006790 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ecc:	e033      	b.n	8005f36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d01d      	beq.n	8005f18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fe ff1e 	bl	8004d26 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <USBD_SetConfig+0x118>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fe fef4 	bl	8004ce8 <USBD_SetClassConfig>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d104      	bne.n	8005f10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8b6 	bl	800607a <USBD_CtlError>
            return;
 8005f0e:	e012      	b.n	8005f36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc3d 	bl	8006790 <USBD_CtlSendStatus>
        break;
 8005f16:	e00e      	b.n	8005f36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc39 	bl	8006790 <USBD_CtlSendStatus>
        break;
 8005f1e:	e00a      	b.n	8005f36 <USBD_SetConfig+0x112>
      default:
        USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f8a9 	bl	800607a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <USBD_SetConfig+0x118>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fe fef9 	bl	8004d26 <USBD_ClrClassConfig>
        break;
 8005f34:	bf00      	nop
    }
  }
}
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000190 	.word	0x20000190

08005f40 <USBD_GetConfig>:

static void USBD_GetConfig		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88db      	ldrh	r3, [r3, #6]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d004      	beq.n	8005f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f890 	bl	800607a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f5a:	e022      	b.n	8005fa2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	dc02      	bgt.n	8005f6c <USBD_GetConfig+0x2c>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dc03      	bgt.n	8005f72 <USBD_GetConfig+0x32>
 8005f6a:	e015      	b.n	8005f98 <USBD_GetConfig+0x58>
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d00b      	beq.n	8005f88 <USBD_GetConfig+0x48>
 8005f70:	e012      	b.n	8005f98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fbc5 	bl	8006710 <USBD_CtlSendData>
        break;
 8005f86:	e00c      	b.n	8005fa2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fbbd 	bl	8006710 <USBD_CtlSendData>
        break;
 8005f96:	e004      	b.n	8005fa2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f86d 	bl	800607a <USBD_CtlError>
        break;
 8005fa0:	bf00      	nop
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_GetStatus>:

static void USBD_GetStatus		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d81e      	bhi.n	8005ffe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	88db      	ldrh	r3, [r3, #6]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d004      	beq.n	8005fd2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f855 	bl	800607a <USBD_CtlError>
        break;
 8005fd0:	e01a      	b.n	8006008 <USBD_GetStatus+0x5e>
      }
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	60da      	str	r2, [r3, #12]
      if (pdev->dev_remote_wakeup)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f043 0202 	orr.w	r2, r3, #2
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]
      }
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fb8a 	bl	8006710 <USBD_CtlSendData>
      break;
 8005ffc:	e004      	b.n	8006008 <USBD_GetStatus+0x5e>
    default:
      USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f83a 	bl	800607a <USBD_CtlError>
      break;
 8006006:	bf00      	nop
  }
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_SetFeature>:

static void USBD_SetFeature		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	885b      	ldrh	r3, [r3, #2]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d106      	bne.n	8006030 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbb0 	bl	8006790 <USBD_CtlSendStatus>
  }
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_ClrFeature>:

static void USBD_ClrFeature       (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006048:	3b01      	subs	r3, #1
 800604a:	2b02      	cmp	r3, #2
 800604c:	d80b      	bhi.n	8006066 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	885b      	ldrh	r3, [r3, #2]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10c      	bne.n	8006070 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb96 	bl	8006790 <USBD_CtlSendStatus>
      }
      break;
 8006064:	e004      	b.n	8006070 <USBD_ClrFeature+0x38>
    default:
      USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f806 	bl	800607a <USBD_CtlError>
      break;
 800606e:	e000      	b.n	8006072 <USBD_ClrFeature+0x3a>
      break;
 8006070:	bf00      	nop
  }
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_CtlError>:

void USBD_CtlError				  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006084:	2180      	movs	r1, #128	; 0x80
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fa02 	bl	8005490 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff f9fe 	bl	8005490 <USBD_LL_StallEP>
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_ParseSetupRequest>:

void USBD_ParseSetupRequest		  (USBD_SetupReqTypedef *req, uint8_t *pdata){
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3302      	adds	r3, #2
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	3303      	adds	r3, #3
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	3305      	adds	r3, #5
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	3306      	adds	r3, #6
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	3307      	adds	r3, #7
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	b29b      	uxth	r3, r3
 8006102:	4413      	add	r3, r2
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	80da      	strh	r2, [r3, #6]
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USBD_GetString>:

void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len){
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	75fb      	strb	r3, [r7, #23]
  if (desc != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d032      	beq.n	8006190 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f834 	bl	8006198 <USBD_GetLen>
 8006130:	4603      	mov	r3, r0
 8006132:	3301      	adds	r3, #1
 8006134:	b29b      	uxth	r3, r3
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	75fa      	strb	r2, [r7, #23]
 8006144:	461a      	mov	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4413      	add	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	75fa      	strb	r2, [r7, #23]
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4413      	add	r3, r2
 800615c:	2203      	movs	r2, #3
 800615e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006160:	e012      	b.n	8006188 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	60fa      	str	r2, [r7, #12]
 8006168:	7dfa      	ldrb	r2, [r7, #23]
 800616a:	1c51      	adds	r1, r2, #1
 800616c:	75f9      	strb	r1, [r7, #23]
 800616e:	4611      	mov	r1, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	440a      	add	r2, r1
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	75fa      	strb	r2, [r7, #23]
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4413      	add	r3, r2
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e8      	bne.n	8006162 <USBD_GetString+0x4e>
    }
  }
}
 8006190:	bf00      	nop
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USBD_GetLen>:

static uint8_t USBD_GetLen(uint8_t *buf){
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
  while (*buf != '\0')
 80061a4:	e005      	b.n	80061b2 <USBD_GetLen+0x1a>
  {
    len++;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	3301      	adds	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3301      	adds	r3, #1
 80061b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f5      	bne.n	80061a6 <USBD_GetLen+0xe>
  }
  return len;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr
	...

080061c8 <USBD_FS_DeviceDescriptor>:

__ALIGN_BEGIN uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] __ALIGN_END = {
  USB_SIZ_STRING_SERIAL,
  USB_DESC_TYPE_STRING,
};
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2212      	movs	r2, #18
 80061d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000028 	.word	0x20000028

080061ec <USBD_FS_LangIDStrDescriptor>:

uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	6039      	str	r1, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2204      	movs	r2, #4
 80061fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80061fe:	4b03      	ldr	r3, [pc, #12]	; (800620c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	2000003c 	.word	0x2000003c

08006210 <USBD_FS_ProductStrDescriptor>:

uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4904      	ldr	r1, [pc, #16]	; (8006230 <USBD_FS_ProductStrDescriptor+0x20>)
 8006220:	4804      	ldr	r0, [pc, #16]	; (8006234 <USBD_FS_ProductStrDescriptor+0x24>)
 8006222:	f7ff ff77 	bl	8006114 <USBD_GetString>
  return USBD_StrDesc;
 8006226:	4b02      	ldr	r3, [pc, #8]	; (8006230 <USBD_FS_ProductStrDescriptor+0x20>)
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	2000074c 	.word	0x2000074c
 8006234:	0800684c 	.word	0x0800684c

08006238 <USBD_FS_ManufacturerStrDescriptor>:

uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	4904      	ldr	r1, [pc, #16]	; (8006258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006248:	4804      	ldr	r0, [pc, #16]	; (800625c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800624a:	f7ff ff63 	bl	8006114 <USBD_GetString>
  return USBD_StrDesc;
 800624e:	4b02      	ldr	r3, [pc, #8]	; (8006258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2000074c 	.word	0x2000074c
 800625c:	08006864 	.word	0x08006864

08006260 <USBD_FS_SerialStrDescriptor>:

uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	6039      	str	r1, [r7, #0]
 800626a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	221a      	movs	r2, #26
 8006270:	801a      	strh	r2, [r3, #0]
  Get_SerialNum();
 8006272:	f000 f82f 	bl	80062d4 <Get_SerialNum>
  return (uint8_t *) USBD_StringSerial;
 8006276:	4b02      	ldr	r3, [pc, #8]	; (8006280 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000040 	.word	0x20000040

08006284 <USBD_FS_ConfigStrDescriptor>:

uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	4904      	ldr	r1, [pc, #16]	; (80062a4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006294:	4804      	ldr	r0, [pc, #16]	; (80062a8 <USBD_FS_ConfigStrDescriptor+0x24>)
 8006296:	f7ff ff3d 	bl	8006114 <USBD_GetString>
  return USBD_StrDesc;
 800629a:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <USBD_FS_ConfigStrDescriptor+0x20>)
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	2000074c 	.word	0x2000074c
 80062a8:	08006878 	.word	0x08006878

080062ac <USBD_FS_InterfaceStrDescriptor>:

uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	4904      	ldr	r1, [pc, #16]	; (80062cc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80062bc:	4804      	ldr	r0, [pc, #16]	; (80062d0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80062be:	f7ff ff29 	bl	8006114 <USBD_GetString>
  return USBD_StrDesc;
 80062c2:	4b02      	ldr	r3, [pc, #8]	; (80062cc <USBD_FS_InterfaceStrDescriptor+0x20>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2000074c 	.word	0x2000074c
 80062d0:	08006884 	.word	0x08006884

080062d4 <Get_SerialNum>:

static void Get_SerialNum(void){
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <Get_SerialNum+0x44>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80062e0:	4b0e      	ldr	r3, [pc, #56]	; (800631c <Get_SerialNum+0x48>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <Get_SerialNum+0x4c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  if (deviceserial0 != 0)  {
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80062fa:	2208      	movs	r2, #8
 80062fc:	4909      	ldr	r1, [pc, #36]	; (8006324 <Get_SerialNum+0x50>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f814 	bl	800632c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006304:	2204      	movs	r2, #4
 8006306:	4908      	ldr	r1, [pc, #32]	; (8006328 <Get_SerialNum+0x54>)
 8006308:	68b8      	ldr	r0, [r7, #8]
 800630a:	f000 f80f 	bl	800632c <IntToUnicode>
  }
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	1ffff7e8 	.word	0x1ffff7e8
 800631c:	1ffff7ec 	.word	0x1ffff7ec
 8006320:	1ffff7f0 	.word	0x1ffff7f0
 8006324:	20000042 	.word	0x20000042
 8006328:	20000052 	.word	0x20000052

0800632c <IntToUnicode>:

static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len){
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	75fb      	strb	r3, [r7, #23]
  for (idx = 0; idx < len; idx++)  {
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
 8006342:	e027      	b.n	8006394 <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA)    {
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	0f1b      	lsrs	r3, r3, #28
 8006348:	2b09      	cmp	r3, #9
 800634a:	d80b      	bhi.n	8006364 <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	0f1b      	lsrs	r3, r3, #28
 8006350:	b2da      	uxtb	r2, r3
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4619      	mov	r1, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	440b      	add	r3, r1
 800635c:	3230      	adds	r2, #48	; 0x30
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e00a      	b.n	800637a <IntToUnicode+0x4e>
    }
    else    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	0f1b      	lsrs	r3, r3, #28
 8006368:	b2da      	uxtb	r2, r3
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	4619      	mov	r1, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	440b      	add	r3, r1
 8006374:	3237      	adds	r2, #55	; 0x37
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
    }
    value = value << 4;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
    pbuf[2 * idx + 1] = 0;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	3301      	adds	r3, #1
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4413      	add	r3, r2
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)  {
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	3301      	adds	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
 8006394:	7dfa      	ldrb	r2, [r7, #23]
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	429a      	cmp	r2, r3
 800639a:	d3d3      	bcc.n	8006344 <IntToUnicode+0x18>
  }
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <USBD_HID_Init>:
	0x19, 0x00,                    /*   USAGE_MINIMUM (Reserved (no event indicated))*/
	0x29, 0x65,                    /*   USAGE_MAXIMUM (Keyboard Application)*/
	0x81, 0x00,                    /*   INPUT (Data,Ary,Abs)*/
	0xc0                           /* END_COLLECTION*/
};
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80063b4:	2304      	movs	r3, #4
 80063b6:	2203      	movs	r2, #3
 80063b8:	2181      	movs	r1, #129	; 0x81
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff f823 	bl	8005406 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80063c6:	2010      	movs	r0, #16
 80063c8:	f7ff f932 	bl	8005630 <USBD_static_malloc>
 80063cc:	4602      	mov	r2, r0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80063de:	2302      	movs	r3, #2
 80063e0:	e005      	b.n	80063ee <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e8:	2200      	movs	r2, #0
 80063ea:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_HID_DeInit>:

static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006402:	2181      	movs	r1, #129	; 0x81
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff f824 	bl	8005452 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <USBD_HID_DeInit+0x2c>
  {
    pdev->pClassData = NULL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_HID_Setup>:

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006456:	2b00      	cmp	r3, #0
 8006458:	d045      	beq.n	80064e6 <USBD_HID_Setup+0xba>
 800645a:	2b20      	cmp	r3, #32
 800645c:	f040 80d3 	bne.w	8006606 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	3b02      	subs	r3, #2
 8006466:	2b09      	cmp	r3, #9
 8006468:	d835      	bhi.n	80064d6 <USBD_HID_Setup+0xaa>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBD_HID_Setup+0x44>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064c7 	.word	0x080064c7
 8006474:	080064a7 	.word	0x080064a7
 8006478:	080064d7 	.word	0x080064d7
 800647c:	080064d7 	.word	0x080064d7
 8006480:	080064d7 	.word	0x080064d7
 8006484:	080064d7 	.word	0x080064d7
 8006488:	080064d7 	.word	0x080064d7
 800648c:	080064d7 	.word	0x080064d7
 8006490:	080064b5 	.word	0x080064b5
 8006494:	08006499 	.word	0x08006499
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	885b      	ldrh	r3, [r3, #2]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	601a      	str	r2, [r3, #0]
          break;
 80064a4:	e01e      	b.n	80064e4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2201      	movs	r2, #1
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f92f 	bl	8006710 <USBD_CtlSendData>
          break;
 80064b2:	e017      	b.n	80064e4 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	885b      	ldrh	r3, [r3, #2]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	605a      	str	r2, [r3, #4]
          break;
 80064c4:	e00e      	b.n	80064e4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	3304      	adds	r3, #4
 80064ca:	2201      	movs	r2, #1
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f91e 	bl	8006710 <USBD_CtlSendData>
          break;
 80064d4:	e006      	b.n	80064e4 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fdce 	bl	800607a <USBD_CtlError>
          ret = USBD_FAIL;
 80064de:	2302      	movs	r3, #2
 80064e0:	75fb      	strb	r3, [r7, #23]
          break;
 80064e2:	bf00      	nop
      }
      break;
 80064e4:	e096      	b.n	8006614 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b0b      	cmp	r3, #11
 80064ec:	f200 8083 	bhi.w	80065f6 <USBD_HID_Setup+0x1ca>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <USBD_HID_Setup+0xcc>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006529 	.word	0x08006529
 80064fc:	080065f7 	.word	0x080065f7
 8006500:	080065f7 	.word	0x080065f7
 8006504:	080065f7 	.word	0x080065f7
 8006508:	080065f7 	.word	0x080065f7
 800650c:	080065f7 	.word	0x080065f7
 8006510:	08006551 	.word	0x08006551
 8006514:	080065f7 	.word	0x080065f7
 8006518:	080065f7 	.word	0x080065f7
 800651c:	080065f7 	.word	0x080065f7
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065d1 	.word	0x080065d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652e:	2b03      	cmp	r3, #3
 8006530:	d107      	bne.n	8006542 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006532:	f107 030e 	add.w	r3, r7, #14
 8006536:	2202      	movs	r2, #2
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8e8 	bl	8006710 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006540:	e060      	b.n	8006604 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fd98 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 800654a:	2302      	movs	r3, #2
 800654c:	75fb      	strb	r3, [r7, #23]
          break;
 800654e:	e059      	b.n	8006604 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	885b      	ldrh	r3, [r3, #2]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b22      	cmp	r3, #34	; 0x22
 800655a:	d108      	bne.n	800656e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	88db      	ldrh	r3, [r3, #6]
 8006560:	2b3f      	cmp	r3, #63	; 0x3f
 8006562:	bf28      	it	cs
 8006564:	233f      	movcs	r3, #63	; 0x3f
 8006566:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006568:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <USBD_HID_Setup+0x1f4>)
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e015      	b.n	800659a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	885b      	ldrh	r3, [r3, #2]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b21      	cmp	r3, #33	; 0x21
 8006578:	d108      	bne.n	800658c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800657a:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <USBD_HID_Setup+0x1f8>)
 800657c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	2b09      	cmp	r3, #9
 8006584:	bf28      	it	cs
 8006586:	2309      	movcs	r3, #9
 8006588:	83fb      	strh	r3, [r7, #30]
 800658a:	e006      	b.n	800659a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fd73 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 8006594:	2302      	movs	r3, #2
 8006596:	75fb      	strb	r3, [r7, #23]
            break;
 8006598:	e034      	b.n	8006604 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800659a:	8bfb      	ldrh	r3, [r7, #30]
 800659c:	461a      	mov	r2, r3
 800659e:	69b9      	ldr	r1, [r7, #24]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8b5 	bl	8006710 <USBD_CtlSendData>
          break;
 80065a6:	e02d      	b.n	8006604 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d107      	bne.n	80065c2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3308      	adds	r3, #8
 80065b6:	2201      	movs	r2, #1
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8a8 	bl	8006710 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065c0:	e020      	b.n	8006604 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fd58 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 80065ca:	2302      	movs	r3, #2
 80065cc:	75fb      	strb	r3, [r7, #23]
          break;
 80065ce:	e019      	b.n	8006604 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d106      	bne.n	80065e8 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	885b      	ldrh	r3, [r3, #2]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065e6:	e00d      	b.n	8006604 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fd45 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 80065f0:	2302      	movs	r3, #2
 80065f2:	75fb      	strb	r3, [r7, #23]
          break;
 80065f4:	e006      	b.n	8006604 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fd3e 	bl	800607a <USBD_CtlError>
          ret = USBD_FAIL;
 80065fe:	2302      	movs	r3, #2
 8006600:	75fb      	strb	r3, [r7, #23]
          break;
 8006602:	bf00      	nop
      }
      break;
 8006604:	e006      	b.n	8006614 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff fd36 	bl	800607a <USBD_CtlError>
      ret = USBD_FAIL;
 800660e:	2302      	movs	r3, #2
 8006610:	75fb      	strb	r3, [r7, #23]
      break;
 8006612:	bf00      	nop
  }

  return ret;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000118 	.word	0x20000118
 8006624:	20000100 	.word	0x20000100

08006628 <USBD_HID_SendReport>:

uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len){
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006644:	2b03      	cmp	r3, #3
 8006646:	d10c      	bne.n	8006662 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	7b1b      	ldrb	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2201      	movs	r2, #1
 8006654:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	2181      	movs	r1, #129	; 0x81
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7fe ffa0 	bl	80055a2 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_HID_GetFSCfgDesc>:

static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length){
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2222      	movs	r2, #34	; 0x22
 8006678:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000094 	.word	0x20000094

0800668c <USBD_HID_GetHSCfgDesc>:

static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length){
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2222      	movs	r2, #34	; 0x22
 8006698:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800669a:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	200000b8 	.word	0x200000b8

080066ac <USBD_HID_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length){
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2222      	movs	r2, #34	; 0x22
 80066b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80066ba:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	200000dc 	.word	0x200000dc

080066cc <USBD_HID_DataIn>:

static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum){
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066de:	2200      	movs	r2, #0
 80066e0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr
	...

080066f0 <USBD_HID_GetDeviceQualifierDesc>:

static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length){
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	220a      	movs	r2, #10
 80066fc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80066fe:	4b03      	ldr	r3, [pc, #12]	; (800670c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	2000010c 	.word	0x2000010c

08006710 <USBD_CtlSendData>:

USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2202      	movs	r2, #2
 8006722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7fe ff32 	bl	80055a2 <USBD_LL_Transmit>
  return USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_CtlContinueSendData>:

USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	2100      	movs	r1, #0
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7fe ff20 	bl	80055a2 <USBD_LL_Transmit>
  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_CtlContinueRx>:

USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	2100      	movs	r1, #0
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7fe ff31 	bl	80055e8 <USBD_LL_PrepareReceive>
  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_CtlSendStatus>:

USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev){
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2204      	movs	r2, #4
 800679c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067a0:	2300      	movs	r3, #0
 80067a2:	2200      	movs	r2, #0
 80067a4:	2100      	movs	r1, #0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fe fefb 	bl	80055a2 <USBD_LL_Transmit>
  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_CtlReceiveStatus>:

USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev){
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2205      	movs	r2, #5
 80067c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067c6:	2300      	movs	r3, #0
 80067c8:	2200      	movs	r2, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fe ff0b 	bl	80055e8 <USBD_LL_PrepareReceive>
  return USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <__libc_init_array>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	2600      	movs	r6, #0
 80067e0:	4d0c      	ldr	r5, [pc, #48]	; (8006814 <__libc_init_array+0x38>)
 80067e2:	4c0d      	ldr	r4, [pc, #52]	; (8006818 <__libc_init_array+0x3c>)
 80067e4:	1b64      	subs	r4, r4, r5
 80067e6:	10a4      	asrs	r4, r4, #2
 80067e8:	42a6      	cmp	r6, r4
 80067ea:	d109      	bne.n	8006800 <__libc_init_array+0x24>
 80067ec:	f000 f822 	bl	8006834 <_init>
 80067f0:	2600      	movs	r6, #0
 80067f2:	4d0a      	ldr	r5, [pc, #40]	; (800681c <__libc_init_array+0x40>)
 80067f4:	4c0a      	ldr	r4, [pc, #40]	; (8006820 <__libc_init_array+0x44>)
 80067f6:	1b64      	subs	r4, r4, r5
 80067f8:	10a4      	asrs	r4, r4, #2
 80067fa:	42a6      	cmp	r6, r4
 80067fc:	d105      	bne.n	800680a <__libc_init_array+0x2e>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	f855 3b04 	ldr.w	r3, [r5], #4
 8006804:	4798      	blx	r3
 8006806:	3601      	adds	r6, #1
 8006808:	e7ee      	b.n	80067e8 <__libc_init_array+0xc>
 800680a:	f855 3b04 	ldr.w	r3, [r5], #4
 800680e:	4798      	blx	r3
 8006810:	3601      	adds	r6, #1
 8006812:	e7f2      	b.n	80067fa <__libc_init_array+0x1e>
 8006814:	080068b8 	.word	0x080068b8
 8006818:	080068b8 	.word	0x080068b8
 800681c:	080068b8 	.word	0x080068b8
 8006820:	080068bc 	.word	0x080068bc

08006824 <memset>:
 8006824:	4603      	mov	r3, r0
 8006826:	4402      	add	r2, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	f803 1b01 	strb.w	r1, [r3], #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <_init>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr

08006840 <_fini>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr
