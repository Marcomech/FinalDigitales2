
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068bc  080068bc  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  080068bc  080068bc  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068bc  080068bc  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080068c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  08006a1c  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08006a1c  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d8b  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a8a  00000000  00000000  00026f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00027998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  00027e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c94  00000000  00000000  00028260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b06  00000000  00000000  00039ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ddc5  00000000  00000000  0003d9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009b7bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001354  00000000  00000000  0009b814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08006838 	.word	0x08006838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08006838 	.word	0x08006838

0800014c <SystemInit>:

uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8U]  = {0, 0, 0, 0, 1, 2, 3, 4};

void SystemInit (void){}
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <SysTick_Handler>:
void USB_DEVICE_Init(void);
void Error_Handler();

extern PCD_HandleTypeDef hpcd_USB_FS;

void SysTick_Handler(void){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
   HAL_IncTick();
 800015c:	f002 fc00 	bl	8002960 <HAL_IncTick>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800016a:	f000 ffc2 	bl	80010f2 <HAL_PCD_IRQHandler>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	2000045c 	.word	0x2000045c

08000178 <main>:

keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};

int main(void){
 8000178:	b580      	push	{r7, lr}
 800017a:	b084      	sub	sp, #16
 800017c:	af00      	add	r7, sp, #0
  HAL_Init();
 800017e:	f002 fbab 	bl	80028d8 <HAL_Init>
  SystemClock_Config();
 8000182:	f000 f841 	bl	8000208 <SystemClock_Config>
  USB_DEVICE_Init();
 8000186:	f000 f899 	bl	80002bc <USB_DEVICE_Init>

  uint8_t report[sizeof(keyboardHID)];

  for (volatile int i=0; i<=5; i++){
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	e033      	b.n	80001f8 <main+0x80>
	  HAL_Delay(200);
 8000190:	20c8      	movs	r0, #200	; 0xc8
 8000192:	f002 fbf7 	bl	8002984 <HAL_Delay>
	  keyboardhid.KeyCode1 = 0x2C;
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <main+0x88>)
 8000198:	222c      	movs	r2, #44	; 0x2c
 800019a:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KeyCode2 = 0x0B;
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <main+0x88>)
 800019e:	220b      	movs	r2, #11
 80001a0:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KeyCode3 = 0x12;
 80001a2:	4b17      	ldr	r3, [pc, #92]	; (8000200 <main+0x88>)
 80001a4:	2212      	movs	r2, #18
 80001a6:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KeyCode4 = 0x0F;
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <main+0x88>)
 80001aa:	220f      	movs	r2, #15
 80001ac:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KeyCode5 = 0x04;
 80001ae:	4b14      	ldr	r3, [pc, #80]	; (8000200 <main+0x88>)
 80001b0:	2204      	movs	r2, #4
 80001b2:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(report));
 80001b4:	2208      	movs	r2, #8
 80001b6:	4912      	ldr	r1, [pc, #72]	; (8000200 <main+0x88>)
 80001b8:	4812      	ldr	r0, [pc, #72]	; (8000204 <main+0x8c>)
 80001ba:	f006 fa37 	bl	800662c <USBD_HID_SendReport>
	  HAL_Delay(30);
 80001be:	201e      	movs	r0, #30
 80001c0:	f002 fbe0 	bl	8002984 <HAL_Delay>

	  keyboardhid.KeyCode1 = 0x00;
 80001c4:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <main+0x88>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KeyCode2 = 0x00;
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <main+0x88>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KeyCode3 = 0x00;
 80001d0:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <main+0x88>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KeyCode4 = 0x00;
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x88>)
 80001d8:	2200      	movs	r2, #0
 80001da:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KeyCode5 = 0x00;
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <main+0x88>)
 80001de:	2200      	movs	r2, #0
 80001e0:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(report));
 80001e2:	2208      	movs	r2, #8
 80001e4:	4906      	ldr	r1, [pc, #24]	; (8000200 <main+0x88>)
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <main+0x8c>)
 80001e8:	f006 fa20 	bl	800662c <USBD_HID_SendReport>
	  HAL_Delay(200);
 80001ec:	20c8      	movs	r0, #200	; 0xc8
 80001ee:	f002 fbc9 	bl	8002984 <HAL_Delay>
  for (volatile int i=0; i<=5; i++){
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b05      	cmp	r3, #5
 80001fc:	ddc8      	ble.n	8000190 <main+0x18>
  }
  while (1)  {  }
 80001fe:	e7fe      	b.n	80001fe <main+0x86>
 8000200:	20000174 	.word	0x20000174
 8000204:	20000194 	.word	0x20000194

08000208 <SystemClock_Config>:
}

void SystemClock_Config(void){
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	; 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f006 fb06 	bl	8006828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)  {
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f994 	bl	800058c <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
    Error_Handler();
 800026a:	f000 f84d 	bl	8000308 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)  {
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fbfe 	bl	8000a8c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
    Error_Handler();
 8000296:	f000 f837 	bl	8000308 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029a:	2310      	movs	r3, #16
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)  {
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fcdb 	bl	8000c60 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xac>
    Error_Handler();
 80002b0:	f000 f82a 	bl	8000308 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	; 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <USB_DEVICE_Init>:

void USB_DEVICE_Init(void){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)  {
 80002c0:	2200      	movs	r2, #0
 80002c2:	490e      	ldr	r1, [pc, #56]	; (80002fc <USB_DEVICE_Init+0x40>)
 80002c4:	480e      	ldr	r0, [pc, #56]	; (8000300 <USB_DEVICE_Init+0x44>)
 80002c6:	f004 fcb7 	bl	8004c38 <USBD_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <USB_DEVICE_Init+0x18>
    Error_Handler();
 80002d0:	f000 f81a 	bl	8000308 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)  {
 80002d4:	490b      	ldr	r1, [pc, #44]	; (8000304 <USB_DEVICE_Init+0x48>)
 80002d6:	480a      	ldr	r0, [pc, #40]	; (8000300 <USB_DEVICE_Init+0x44>)
 80002d8:	f004 fcd9 	bl	8004c8e <USBD_RegisterClass>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <USB_DEVICE_Init+0x2a>
    Error_Handler();
 80002e2:	f000 f811 	bl	8000308 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)  {
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <USB_DEVICE_Init+0x44>)
 80002e8:	f004 fcea 	bl	8004cc0 <USBD_Start>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <USB_DEVICE_Init+0x3a>
    Error_Handler();
 80002f2:	f000 f809 	bl	8000308 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000000c 	.word	0x2000000c
 8000300:	20000194 	.word	0x20000194
 8000304:	2000005c 	.word	0x2000005c

08000308 <Error_Handler>:


void Error_Handler(){
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  //__disable_irq();
  while (1)  {  }
 800030c:	e7fe      	b.n	800030c <Error_Handler+0x4>
	...

08000310 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000310:	f7ff ff1c 	bl	800014c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480b      	ldr	r0, [pc, #44]	; (8000344 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000316:	490c      	ldr	r1, [pc, #48]	; (8000348 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000318:	4a0c      	ldr	r2, [pc, #48]	; (800034c <LoopFillZerobss+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a09      	ldr	r2, [pc, #36]	; (8000350 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800032c:	4c09      	ldr	r4, [pc, #36]	; (8000354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800033a:	f006 fa51 	bl	80067e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff1b 	bl	8000178 <main>
  bx lr
 8000342:	4770      	bx	lr
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800034c:	080068c4 	.word	0x080068c4
  ldr r2, =_sbss
 8000350:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000354:	2000094c 	.word	0x2000094c

08000358 <ADC1_2_IRQHandler>:


    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <__NVIC_SetPriorityGrouping>:
#define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */



__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <__NVIC_SetPriorityGrouping+0x44>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000378:	4013      	ands	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800038c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	60d3      	str	r3, [r2, #12]
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <__NVIC_GetPriorityGrouping>:



__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <__NVIC_GetPriorityGrouping+0x18>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	0a1b      	lsrs	r3, r3, #8
 80003ae:	f003 0307 	and.w	r3, r3, #7
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <__NVIC_EnableIRQ>:



__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db0b      	blt.n	80003ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 021f 	and.w	r2, r3, #31
 80003d8:	4906      	ldr	r1, [pc, #24]	; (80003f4 <__NVIC_EnableIRQ+0x34>)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	095b      	lsrs	r3, r3, #5
 80003e0:	2001      	movs	r0, #1
 80003e2:	fa00 f202 	lsl.w	r2, r0, r2
 80003e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	e000e100 	.word	0xe000e100

080003f8 <__NVIC_SetPriority>:
}



__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	6039      	str	r1, [r7, #0]
 8000402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000408:	2b00      	cmp	r3, #0
 800040a:	db0a      	blt.n	8000422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	b2da      	uxtb	r2, r3
 8000410:	490c      	ldr	r1, [pc, #48]	; (8000444 <__NVIC_SetPriority+0x4c>)
 8000412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000420:	e00a      	b.n	8000438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4908      	ldr	r1, [pc, #32]	; (8000448 <__NVIC_SetPriority+0x50>)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 030f 	and.w	r3, r3, #15
 800042e:	3b04      	subs	r3, #4
 8000430:	0112      	lsls	r2, r2, #4
 8000432:	b2d2      	uxtb	r2, r2
 8000434:	440b      	add	r3, r1
 8000436:	761a      	strb	r2, [r3, #24]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000e100 	.word	0xe000e100
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <NVIC_EncodePriority>:
}



__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800044c:	b480      	push	{r7}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f003 0307 	and.w	r3, r3, #7
 800045e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	f1c3 0307 	rsb	r3, r3, #7
 8000466:	2b04      	cmp	r3, #4
 8000468:	bf28      	it	cs
 800046a:	2304      	movcs	r3, #4
 800046c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3304      	adds	r3, #4
 8000472:	2b06      	cmp	r3, #6
 8000474:	d902      	bls.n	800047c <NVIC_EncodePriority+0x30>
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	3b03      	subs	r3, #3
 800047a:	e000      	b.n	800047e <NVIC_EncodePriority+0x32>
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000480:	f04f 32ff 	mov.w	r2, #4294967295
 8000484:	69bb      	ldr	r3, [r7, #24]
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	43da      	mvns	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	401a      	ands	r2, r3
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000494:	f04f 31ff 	mov.w	r1, #4294967295
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	43d9      	mvns	r1, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a4:	4313      	orrs	r3, r2
         );
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3724      	adds	r7, #36	; 0x24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <SysTick_Config>:

#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)


__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff90 	bl	80003f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_GetTick>:
#include "stm32f1xx_hal.h"


__weak uint32_t HAL_GetTick(void){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return uwTick;
 80004f8:	4b02      	ldr	r3, [pc, #8]	; (8000504 <HAL_GetTick+0x10>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	20000458 	.word	0x20000458

08000508 <HAL_NVIC_SetPriorityGrouping>:

void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ff23 	bl	800035c <__NVIC_SetPriorityGrouping>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <HAL_NVIC_SetPriority>:

void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 800051e:	b580      	push	{r7, lr}
 8000520:	b086      	sub	sp, #24
 8000522:	af00      	add	r7, sp, #0
 8000524:	4603      	mov	r3, r0
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	607a      	str	r2, [r7, #4]
 800052a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000530:	f7ff ff38 	bl	80003a4 <__NVIC_GetPriorityGrouping>
 8000534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	6978      	ldr	r0, [r7, #20]
 800053c:	f7ff ff86 	bl	800044c <NVIC_EncodePriority>
 8000540:	4602      	mov	r2, r0
 8000542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000546:	4611      	mov	r1, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff55 	bl	80003f8 <__NVIC_SetPriority>
}
 800054e:	bf00      	nop
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <HAL_NVIC_EnableIRQ>:

void HAL_NVIC_EnableIRQ(IRQn_Type IRQn){
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	4603      	mov	r3, r0
 800055e:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  NVIC_EnableIRQ(IRQn);
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff2b 	bl	80003c0 <__NVIC_EnableIRQ>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <HAL_SYSTICK_Config>:

uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb){
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ff98 	bl	80004b0 <SysTick_Config>
 8000580:	4603      	mov	r3, r0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <HAL_RCC_OscConfig>:

static void RCC_Delay(uint32_t mdelay);

HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  if (RCC_OscInitStruct == NULL)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <HAL_RCC_OscConfig+0x12>
  {
   return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e26c      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f000 8087 	beq.w	80006ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005ac:	4b92      	ldr	r3, [pc, #584]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f003 030c 	and.w	r3, r3, #12
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d00c      	beq.n	80005d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b8:	4b8f      	ldr	r3, [pc, #572]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f003 030c 	and.w	r3, r3, #12
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d112      	bne.n	80005ea <HAL_RCC_OscConfig+0x5e>
 80005c4:	4b8c      	ldr	r3, [pc, #560]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d0:	d10b      	bne.n	80005ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d2:	4b89      	ldr	r3, [pc, #548]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d06c      	beq.n	80006b8 <HAL_RCC_OscConfig+0x12c>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d168      	bne.n	80006b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e246      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f2:	d106      	bne.n	8000602 <HAL_RCC_OscConfig+0x76>
 80005f4:	4b80      	ldr	r3, [pc, #512]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a7f      	ldr	r2, [pc, #508]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80005fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e02e      	b.n	8000660 <HAL_RCC_OscConfig+0xd4>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10c      	bne.n	8000624 <HAL_RCC_OscConfig+0x98>
 800060a:	4b7b      	ldr	r3, [pc, #492]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a7a      	ldr	r2, [pc, #488]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4b78      	ldr	r3, [pc, #480]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a77      	ldr	r2, [pc, #476]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800061c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e01d      	b.n	8000660 <HAL_RCC_OscConfig+0xd4>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800062c:	d10c      	bne.n	8000648 <HAL_RCC_OscConfig+0xbc>
 800062e:	4b72      	ldr	r3, [pc, #456]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a71      	ldr	r2, [pc, #452]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4b6f      	ldr	r3, [pc, #444]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a6e      	ldr	r2, [pc, #440]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e00b      	b.n	8000660 <HAL_RCC_OscConfig+0xd4>
 8000648:	4b6b      	ldr	r3, [pc, #428]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a6a      	ldr	r2, [pc, #424]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800064e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b68      	ldr	r3, [pc, #416]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a67      	ldr	r2, [pc, #412]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800065a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d013      	beq.n	8000690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000668:	f7ff ff44 	bl	80004f4 <HAL_GetTick>
 800066c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800066e:	e008      	b.n	8000682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000670:	f7ff ff40 	bl	80004f4 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b64      	cmp	r3, #100	; 0x64
 800067c:	d901      	bls.n	8000682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800067e:	2303      	movs	r3, #3
 8000680:	e1fa      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000682:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f0      	beq.n	8000670 <HAL_RCC_OscConfig+0xe4>
 800068e:	e014      	b.n	80006ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000690:	f7ff ff30 	bl	80004f4 <HAL_GetTick>
 8000694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000696:	e008      	b.n	80006aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000698:	f7ff ff2c 	bl	80004f4 <HAL_GetTick>
 800069c:	4602      	mov	r2, r0
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	2b64      	cmp	r3, #100	; 0x64
 80006a4:	d901      	bls.n	80006aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80006a6:	2303      	movs	r3, #3
 80006a8:	e1e6      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006aa:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f0      	bne.n	8000698 <HAL_RCC_OscConfig+0x10c>
 80006b6:	e000      	b.n	80006ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d063      	beq.n	800078e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80006c6:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f003 030c 	and.w	r3, r3, #12
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00b      	beq.n	80006ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006d2:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f003 030c 	and.w	r3, r3, #12
 80006da:	2b08      	cmp	r3, #8
 80006dc:	d11c      	bne.n	8000718 <HAL_RCC_OscConfig+0x18c>
 80006de:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d116      	bne.n	8000718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d005      	beq.n	8000702 <HAL_RCC_OscConfig+0x176>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d001      	beq.n	8000702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e1ba      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4939      	ldr	r1, [pc, #228]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000712:	4313      	orrs	r3, r2
 8000714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000716:	e03a      	b.n	800078e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d020      	beq.n	8000762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000720:	4b36      	ldr	r3, [pc, #216]	; (80007fc <HAL_RCC_OscConfig+0x270>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000726:	f7ff fee5 	bl	80004f4 <HAL_GetTick>
 800072a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800072c:	e008      	b.n	8000740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800072e:	f7ff fee1 	bl	80004f4 <HAL_GetTick>
 8000732:	4602      	mov	r2, r0
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	2b02      	cmp	r3, #2
 800073a:	d901      	bls.n	8000740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800073c:	2303      	movs	r3, #3
 800073e:	e19b      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f0      	beq.n	800072e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	4927      	ldr	r1, [pc, #156]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 800075c:	4313      	orrs	r3, r2
 800075e:	600b      	str	r3, [r1, #0]
 8000760:	e015      	b.n	800078e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <HAL_RCC_OscConfig+0x270>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000768:	f7ff fec4 	bl	80004f4 <HAL_GetTick>
 800076c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800076e:	e008      	b.n	8000782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000770:	f7ff fec0 	bl	80004f4 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b02      	cmp	r3, #2
 800077c:	d901      	bls.n	8000782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800077e:	2303      	movs	r3, #3
 8000780:	e17a      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f0      	bne.n	8000770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d03a      	beq.n	8000810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d019      	beq.n	80007d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_RCC_OscConfig+0x274>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007a8:	f7ff fea4 	bl	80004f4 <HAL_GetTick>
 80007ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007ae:	e008      	b.n	80007c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007b0:	f7ff fea0 	bl	80004f4 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d901      	bls.n	80007c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80007be:	2303      	movs	r3, #3
 80007c0:	e15a      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_RCC_OscConfig+0x26c>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f0      	beq.n	80007b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fb50 	bl	8000e74 <RCC_Delay>
 80007d4:	e01c      	b.n	8000810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_RCC_OscConfig+0x274>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007dc:	f7ff fe8a 	bl	80004f4 <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007e2:	e00f      	b.n	8000804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007e4:	f7ff fe86 	bl	80004f4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d908      	bls.n	8000804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80007f2:	2303      	movs	r3, #3
 80007f4:	e140      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	42420000 	.word	0x42420000
 8000800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000804:	4b9e      	ldr	r3, [pc, #632]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e9      	bne.n	80007e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	2b00      	cmp	r3, #0
 800081a:	f000 80a6 	beq.w	800096a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000822:	4b97      	ldr	r3, [pc, #604]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10d      	bne.n	800084a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b94      	ldr	r3, [pc, #592]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a93      	ldr	r2, [pc, #588]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b91      	ldr	r3, [pc, #580]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000846:	2301      	movs	r3, #1
 8000848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800084a:	4b8e      	ldr	r3, [pc, #568]	; (8000a84 <HAL_RCC_OscConfig+0x4f8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000852:	2b00      	cmp	r3, #0
 8000854:	d118      	bne.n	8000888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000856:	4b8b      	ldr	r3, [pc, #556]	; (8000a84 <HAL_RCC_OscConfig+0x4f8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a8a      	ldr	r2, [pc, #552]	; (8000a84 <HAL_RCC_OscConfig+0x4f8>)
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000862:	f7ff fe47 	bl	80004f4 <HAL_GetTick>
 8000866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000868:	e008      	b.n	800087c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800086a:	f7ff fe43 	bl	80004f4 <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	2b64      	cmp	r3, #100	; 0x64
 8000876:	d901      	bls.n	800087c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000878:	2303      	movs	r3, #3
 800087a:	e0fd      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087c:	4b81      	ldr	r3, [pc, #516]	; (8000a84 <HAL_RCC_OscConfig+0x4f8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f0      	beq.n	800086a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d106      	bne.n	800089e <HAL_RCC_OscConfig+0x312>
 8000890:	4b7b      	ldr	r3, [pc, #492]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	4a7a      	ldr	r2, [pc, #488]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6213      	str	r3, [r2, #32]
 800089c:	e02d      	b.n	80008fa <HAL_RCC_OscConfig+0x36e>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10c      	bne.n	80008c0 <HAL_RCC_OscConfig+0x334>
 80008a6:	4b76      	ldr	r3, [pc, #472]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	4a75      	ldr	r2, [pc, #468]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008ac:	f023 0301 	bic.w	r3, r3, #1
 80008b0:	6213      	str	r3, [r2, #32]
 80008b2:	4b73      	ldr	r3, [pc, #460]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008b4:	6a1b      	ldr	r3, [r3, #32]
 80008b6:	4a72      	ldr	r2, [pc, #456]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008b8:	f023 0304 	bic.w	r3, r3, #4
 80008bc:	6213      	str	r3, [r2, #32]
 80008be:	e01c      	b.n	80008fa <HAL_RCC_OscConfig+0x36e>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	d10c      	bne.n	80008e2 <HAL_RCC_OscConfig+0x356>
 80008c8:	4b6d      	ldr	r3, [pc, #436]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008ca:	6a1b      	ldr	r3, [r3, #32]
 80008cc:	4a6c      	ldr	r2, [pc, #432]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6213      	str	r3, [r2, #32]
 80008d4:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008d6:	6a1b      	ldr	r3, [r3, #32]
 80008d8:	4a69      	ldr	r2, [pc, #420]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6213      	str	r3, [r2, #32]
 80008e0:	e00b      	b.n	80008fa <HAL_RCC_OscConfig+0x36e>
 80008e2:	4b67      	ldr	r3, [pc, #412]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008e4:	6a1b      	ldr	r3, [r3, #32]
 80008e6:	4a66      	ldr	r2, [pc, #408]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008e8:	f023 0301 	bic.w	r3, r3, #1
 80008ec:	6213      	str	r3, [r2, #32]
 80008ee:	4b64      	ldr	r3, [pc, #400]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	4a63      	ldr	r2, [pc, #396]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80008f4:	f023 0304 	bic.w	r3, r3, #4
 80008f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d015      	beq.n	800092e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000902:	f7ff fdf7 	bl	80004f4 <HAL_GetTick>
 8000906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000908:	e00a      	b.n	8000920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800090a:	f7ff fdf3 	bl	80004f4 <HAL_GetTick>
 800090e:	4602      	mov	r2, r0
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	f241 3288 	movw	r2, #5000	; 0x1388
 8000918:	4293      	cmp	r3, r2
 800091a:	d901      	bls.n	8000920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800091c:	2303      	movs	r3, #3
 800091e:	e0ab      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000920:	4b57      	ldr	r3, [pc, #348]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000922:	6a1b      	ldr	r3, [r3, #32]
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0ee      	beq.n	800090a <HAL_RCC_OscConfig+0x37e>
 800092c:	e014      	b.n	8000958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800092e:	f7ff fde1 	bl	80004f4 <HAL_GetTick>
 8000932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000934:	e00a      	b.n	800094c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000936:	f7ff fddd 	bl	80004f4 <HAL_GetTick>
 800093a:	4602      	mov	r2, r0
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	f241 3288 	movw	r2, #5000	; 0x1388
 8000944:	4293      	cmp	r3, r2
 8000946:	d901      	bls.n	800094c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000948:	2303      	movs	r3, #3
 800094a:	e095      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 800094e:	6a1b      	ldr	r3, [r3, #32]
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1ee      	bne.n	8000936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d105      	bne.n	800096a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800095e:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a47      	ldr	r2, [pc, #284]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 8081 	beq.w	8000a76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 030c 	and.w	r3, r3, #12
 800097c:	2b08      	cmp	r3, #8
 800097e:	d061      	beq.n	8000a44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d146      	bne.n	8000a16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000988:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <HAL_RCC_OscConfig+0x4fc>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098e:	f7ff fdb1 	bl	80004f4 <HAL_GetTick>
 8000992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000994:	e008      	b.n	80009a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000996:	f7ff fdad 	bl	80004f4 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d901      	bls.n	80009a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80009a4:	2303      	movs	r3, #3
 80009a6:	e067      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009a8:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1f0      	bne.n	8000996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a1b      	ldr	r3, [r3, #32]
 80009b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009bc:	d108      	bne.n	80009d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	492d      	ldr	r1, [pc, #180]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80009cc:	4313      	orrs	r3, r2
 80009ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a19      	ldr	r1, [r3, #32]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e0:	430b      	orrs	r3, r1
 80009e2:	4927      	ldr	r1, [pc, #156]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 80009e4:	4313      	orrs	r3, r2
 80009e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <HAL_RCC_OscConfig+0x4fc>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ee:	f7ff fd81 	bl	80004f4 <HAL_GetTick>
 80009f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009f4:	e008      	b.n	8000a08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009f6:	f7ff fd7d 	bl	80004f4 <HAL_GetTick>
 80009fa:	4602      	mov	r2, r0
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d901      	bls.n	8000a08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000a04:	2303      	movs	r3, #3
 8000a06:	e037      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f0      	beq.n	80009f6 <HAL_RCC_OscConfig+0x46a>
 8000a14:	e02f      	b.n	8000a76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_RCC_OscConfig+0x4fc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fd6a 	bl	80004f4 <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a24:	f7ff fd66 	bl	80004f4 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e020      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f0      	bne.n	8000a24 <HAL_RCC_OscConfig+0x498>
 8000a42:	e018      	b.n	8000a76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d101      	bne.n	8000a50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e013      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_RCC_OscConfig+0x4f4>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d106      	bne.n	8000a72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d001      	beq.n	8000a76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40007000 	.word	0x40007000
 8000a88:	42420060 	.word	0x42420060

08000a8c <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  if (RCC_ClkInitStruct == NULL)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e0d0      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000aa0:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d910      	bls.n	8000ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aae:	4b67      	ldr	r3, [pc, #412]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f023 0207 	bic.w	r2, r3, #7
 8000ab6:	4965      	ldr	r1, [pc, #404]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000abe:	4b63      	ldr	r3, [pc, #396]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d001      	beq.n	8000ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e0b8      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d020      	beq.n	8000b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d005      	beq.n	8000af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ae8:	4b59      	ldr	r3, [pc, #356]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a58      	ldr	r2, [pc, #352]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a52      	ldr	r2, [pc, #328]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b0c:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	494d      	ldr	r1, [pc, #308]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d040      	beq.n	8000bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d107      	bne.n	8000b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b32:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d115      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e07f      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d107      	bne.n	8000b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b4a:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d109      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e073      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5a:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e06b      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f023 0203 	bic.w	r2, r3, #3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4936      	ldr	r1, [pc, #216]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b7c:	f7ff fcba 	bl	80004f4 <HAL_GetTick>
 8000b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b82:	e00a      	b.n	8000b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b84:	f7ff fcb6 	bl	80004f4 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d901      	bls.n	8000b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e053      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 020c 	and.w	r2, r3, #12
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d1eb      	bne.n	8000b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d210      	bcs.n	8000bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 0207 	bic.w	r2, r3, #7
 8000bc2:	4922      	ldr	r1, [pc, #136]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_RCC_ClockConfig+0x1c0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d001      	beq.n	8000bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e032      	b.n	8000c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d008      	beq.n	8000bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	4916      	ldr	r1, [pc, #88]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c1a:	f000 f8d7 	bl	8000dcc <HAL_RCC_GetSysClockFreq>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_RCC_ClockConfig+0x1c4>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	490a      	ldr	r1, [pc, #40]	; (8000c54 <HAL_RCC_ClockConfig+0x1c8>)
 8000c2c:	5ccb      	ldrb	r3, [r1, r3]
 8000c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <HAL_RCC_ClockConfig+0x1cc>)
 8000c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_RCC_ClockConfig+0x1d0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fe60 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000
 8000c50:	40021000 	.word	0x40021000
 8000c54:	08006898 	.word	0x08006898
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_RCCEx_PeriphCLKConfig>:

HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d07d      	beq.n	8000d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c80:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10d      	bne.n	8000ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a4b      	ldr	r2, [pc, #300]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	61d3      	str	r3, [r2, #28]
 8000c98:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca8:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d118      	bne.n	8000ce6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cb4:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cc0:	f7ff fc18 	bl	80004f4 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc6:	e008      	b.n	8000cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc8:	f7ff fc14 	bl	80004f4 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e06d      	b.n	8000db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f0      	beq.n	8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000cee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d02e      	beq.n	8000d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d027      	beq.n	8000d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000d1a:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d014      	beq.n	8000d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fbe3 	bl	80004f4 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d30:	e00a      	b.n	8000d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d32:	f7ff fbdf 	bl	80004f4 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e036      	b.n	8000db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0ee      	beq.n	8000d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d105      	bne.n	8000d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d008      	beq.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	490b      	ldr	r1, [pc, #44]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d008      	beq.n	8000db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4904      	ldr	r1, [pc, #16]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40007000 	.word	0x40007000
 8000dc8:	42420440 	.word	0x42420440

08000dcc <HAL_RCC_GetSysClockFreq>:

uint32_t HAL_RCC_GetSysClockFreq(void){
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0

  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]

  tmpreg = RCC->CFGR;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d002      	beq.n	8000dfc <HAL_RCC_GetSysClockFreq+0x30>
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d003      	beq.n	8000e02 <HAL_RCC_GetSysClockFreq+0x36>
 8000dfa:	e027      	b.n	8000e4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8000dfe:	613b      	str	r3, [r7, #16]
      break;
 8000e00:	e027      	b.n	8000e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	0c9b      	lsrs	r3, r3, #18
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d010      	beq.n	8000e3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	0c5b      	lsrs	r3, r3, #17
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e2e:	fb02 f203 	mul.w	r2, r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e004      	b.n	8000e46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	613b      	str	r3, [r7, #16]
      break;
 8000e4a:	e002      	b.n	8000e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e4e:	613b      	str	r3, [r7, #16]
      break;
 8000e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e52:	693b      	ldr	r3, [r7, #16]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	007a1200 	.word	0x007a1200
 8000e68:	080068a8 	.word	0x080068a8
 8000e6c:	080068b8 	.word	0x080068b8
 8000e70:	003d0900 	.word	0x003d0900

08000e74 <RCC_Delay>:

static void RCC_Delay(uint32_t mdelay){
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <RCC_Delay+0x34>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <RCC_Delay+0x38>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	0a5b      	lsrs	r3, r3, #9
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	60fb      	str	r3, [r7, #12]
  do  {
    __NOP();
 8000e90:	bf00      	nop
  }
  while (Delay --);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	60fa      	str	r2, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f9      	bne.n	8000e90 <RCC_Delay+0x1c>
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	10624dd3 	.word	0x10624dd3

08000eb0 <HAL_PCD_Init>:
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd);
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal);
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal);


HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd){
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af06      	add	r7, sp, #24
 8000eb6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  if (hpcd == NULL)  {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_PCD_Init+0x12>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0f1      	b.n	80010a6 <HAL_PCD_Init+0x1f6>
  }
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  if (hpcd->State == HAL_PCD_STATE_RESET)  {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <HAL_PCD_Init+0x2c>
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f004 f930 	bl	800513c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2203      	movs	r2, #3
 8000ee0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fd95 	bl	8002a18 <USB_DisableGlobalInt>

  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)  {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	687e      	ldr	r6, [r7, #4]
 8000ef6:	466d      	mov	r5, sp
 8000ef8:	f106 0410 	add.w	r4, r6, #16
 8000efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	1d33      	adds	r3, r6, #4
 8000f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f001 fd5f 	bl	80029cc <USB_CoreInit>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_PCD_Init+0x70>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2202      	movs	r2, #2
 8000f18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0c2      	b.n	80010a6 <HAL_PCD_Init+0x1f6>
  }

  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fd90 	bl	8002a4c <USB_SetCurrentMode>

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)  {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e040      	b.n	8000fb4 <HAL_PCD_Init+0x104>
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	3301      	adds	r3, #1
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3338      	adds	r3, #56	; 0x38
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	333c      	adds	r3, #60	; 0x3c
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3340      	adds	r3, #64	; 0x40
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)  {
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3b9      	bcc.n	8000f32 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e044      	b.n	800104e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3301      	adds	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3b5      	bcc.n	8000fc4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	687e      	ldr	r6, [r7, #4]
 8001060:	466d      	mov	r5, sp
 8001062:	f106 0410 	add.w	r4, r6, #16
 8001066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	602b      	str	r3, [r5, #0]
 800106e:	1d33      	adds	r3, r6, #4
 8001070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f001 fcf6 	bl	8002a64 <USB_DevInit>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00d      	b.n	80010a6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fd12 	bl	8004ac8 <USB_DevDisconnect>

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ae <HAL_PCD_Start>:

HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_PCD_Start+0x16>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e012      	b.n	80010ea <HAL_PCD_Start+0x3c>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fc8b 	bl	80029ec <USB_EnableGlobalInt>

  (void)USB_DevConnect(hpcd->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fcea 	bl	8004ab4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_PCD_IRQHandler>:

void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fcec 	bl	8004adc <USB_ReadInterrupts>
 8001104:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fb06 	bl	8001722 <PCD_EP_ISR_Handler>

    return;
 8001116:	e11b      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111e:	2b00      	cmp	r3, #0
 8001120:	d013      	beq.n	800114a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001134:	b292      	uxth	r2, r2
 8001136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44


    HAL_PCD_ResetCallback(hpcd);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f004 f879 	bl	8005232 <HAL_PCD_ResetCallback>

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f907 	bl	8001356 <HAL_PCD_SetAddress>

    return;
 8001148:	e102      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00c      	beq.n	800116e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001166:	b292      	uxth	r2, r2
 8001168:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800116c:	e0f0      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001180:	b29a      	uxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800118a:	b292      	uxth	r2, r2
 800118c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001190:	e0de      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d027      	beq.n	80011ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	b292      	uxth	r2, r2
 80011b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0208 	bic.w	r2, r2, #8
 80011c6:	b292      	uxth	r2, r2
 80011c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40


    HAL_PCD_ResumeCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f004 f869 	bl	80052a4 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011e4:	b292      	uxth	r2, r2
 80011e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011ea:	e0b1      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8085 	beq.w	8001302 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	77fb      	strb	r3, [r7, #31]
 80011fc:	e011      	b.n	8001222 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	441a      	add	r2, r3
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	8812      	ldrh	r2, [r2, #0]
 800120e:	b292      	uxth	r2, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	f107 0120 	add.w	r1, r7, #32
 8001216:	440b      	add	r3, r1
 8001218:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	3301      	adds	r3, #1
 8001220:	77fb      	strb	r3, [r7, #31]
 8001222:	7ffb      	ldrb	r3, [r7, #31]
 8001224:	2b07      	cmp	r3, #7
 8001226:	d9ea      	bls.n	80011fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	b292      	uxth	r2, r2
 800123c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001258:	bf00      	nop
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001262:	b29b      	uxth	r3, r3
 8001264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f6      	beq.n	800125a <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	77fb      	strb	r3, [r7, #31]
 8001288:	e010      	b.n	80012ac <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800128a:	7ffb      	ldrb	r3, [r7, #31]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	4611      	mov	r1, r2
 8001292:	7ffa      	ldrb	r2, [r7, #31]
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	440a      	add	r2, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0120 	add.w	r1, r7, #32
 800129e:	440b      	add	r3, r1
 80012a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	3301      	adds	r3, #1
 80012aa:	77fb      	strb	r3, [r7, #31]
 80012ac:	7ffb      	ldrb	r3, [r7, #31]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d9eb      	bls.n	800128a <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0208 	orr.w	r2, r2, #8
 80012c4:	b292      	uxth	r2, r2
 80012c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012dc:	b292      	uxth	r2, r2
 80012de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0204 	orr.w	r2, r2, #4
 80012f4:	b292      	uxth	r2, r2
 80012f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    HAL_PCD_SuspendCallback(hpcd);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f003 ffb8 	bl	8005270 <HAL_PCD_SuspendCallback>

    return;
 8001300:	e026      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00f      	beq.n	800132c <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800131e:	b292      	uxth	r2, r2
 8001320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    HAL_PCD_SOFCallback(hpcd);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f003 ff76 	bl	8005216 <HAL_PCD_SOFCallback>

    return;
 800132a:	e011      	b.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001348:	b292      	uxth	r2, r2
 800134a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800134e:	bf00      	nop
  }
}
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_PCD_SetAddress>:

HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_PCD_SetAddress+0x1a>
 800136c:	2302      	movs	r3, #2
 800136e:	e013      	b.n	8001398 <HAL_PCD_SetAddress+0x42>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	78fa      	ldrb	r2, [r7, #3]
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f003 fb80 	bl	8004a8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_PCD_EP_Open>:

HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	70fb      	strb	r3, [r7, #3]
 80013b2:	460b      	mov	r3, r1
 80013b4:	803b      	strh	r3, [r7, #0]
 80013b6:	4613      	mov	r3, r2
 80013b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da0e      	bge.n	80013e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	705a      	strb	r2, [r3, #1]
 80013e2:	e00e      	b.n	8001402 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	f003 0207 	and.w	r2, r3, #7
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	b2da      	uxtb	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800140e:	883a      	ldrh	r2, [r7, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	78ba      	ldrb	r2, [r7, #2]
 8001418:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800141a:	78bb      	ldrb	r3, [r7, #2]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d102      	bne.n	8001426 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_PCD_EP_Open+0x94>
 8001430:	2302      	movs	r3, #2
 8001432:	e00e      	b.n	8001452 <HAL_PCD_EP_Open+0xb2>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fb2e 	bl	8002aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001450:	7afb      	ldrb	r3, [r7, #11]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_PCD_EP_Close>:

HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da0e      	bge.n	800148c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	705a      	strb	r2, [r3, #1]
 800148a:	e00e      	b.n	80014aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	f003 0207 	and.w	r2, r3, #7
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_PCD_EP_Close+0x6a>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e00e      	b.n	80014e2 <HAL_PCD_EP_Close+0x88>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68f9      	ldr	r1, [r7, #12]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fea6 	bl	8003224 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_PCD_EP_Receive>:

HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	460b      	mov	r3, r1
 80014f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f003 0207 	and.w	r2, r3, #7
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	b2da      	uxtb	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 f85d 	bl	80035fc <USB_EPStartXfer>

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_PCD_EP_Transmit>:

HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	460b      	mov	r3, r1
 800155a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2201      	movs	r2, #1
 8001596:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6979      	ldr	r1, [r7, #20]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f826 	bl	80035fc <USB_EPStartXfer>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_PCD_EP_SetStall>:

HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	f003 0207 	and.w	r2, r3, #7
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d901      	bls.n	80015d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e04c      	b.n	8001672 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da0e      	bge.n	80015fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
 80015fc:	e00c      	b.n	8001618 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	b2da      	uxtb	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_PCD_EP_SetStall+0x7e>
 8001634:	2302      	movs	r3, #2
 8001636:	e01c      	b.n	8001672 <HAL_PCD_EP_SetStall+0xb8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	4618      	mov	r0, r3
 8001648:	f003 f924 	bl	8004894 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f003 fa49 	bl	8004afa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_PCD_EP_ClrStall>:

HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 020f 	and.w	r2, r3, #15
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d901      	bls.n	8001698 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e040      	b.n	800171a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	da0e      	bge.n	80016be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	705a      	strb	r2, [r3, #1]
 80016bc:	e00e      	b.n	80016dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f003 0207 	and.w	r2, r3, #7
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_PCD_EP_ClrStall+0x82>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e00e      	b.n	800171a <HAL_PCD_EP_ClrStall+0xa0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f912 	bl	8004934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <PCD_EP_ISR_Handler>:

static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b096      	sub	sp, #88	; 0x58
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800172a:	e3bf      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001734:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001746:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8179 	bne.w	8001a42 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d152      	bne.n	8001802 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176c:	81fb      	strh	r3, [r7, #14]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800177c:	b29b      	uxth	r3, r3
 800177e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	3302      	adds	r3, #2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	441a      	add	r2, r3
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	615a      	str	r2, [r3, #20]

        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017c0:	2100      	movs	r1, #0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f003 fd0d 	bl	80051e2 <HAL_PCD_DataInStageCallback>

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 836b 	beq.w	8001eac <PCD_EP_ISR_Handler+0x78a>
 80017d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8366 	bne.w	8001eac <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b292      	uxth	r2, r2
 80017f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001800:	e354      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001808:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001814:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181c:	2b00      	cmp	r3, #0
 800181e:	d034      	beq.n	800188a <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	3306      	adds	r3, #6
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001858:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800185a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800185e:	b29b      	uxth	r3, r3
 8001860:	f003 f99b 	bl	8004b9a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001870:	4013      	ands	r3, r2
 8001872:	823b      	strh	r3, [r7, #16]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	8a3a      	ldrh	r2, [r7, #16]
 800187a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187e:	b292      	uxth	r2, r2
 8001880:	801a      	strh	r2, [r3, #0]


          HAL_PCD_SetupStageCallback(hpcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f003 fc80 	bl	8005188 <HAL_PCD_SetupStageCallback>
 8001888:	e310      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800188a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800188e:	2b00      	cmp	r3, #0
 8001890:	f280 830c 	bge.w	8001eac <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018a0:	4013      	ands	r3, r2
 80018a2:	83fb      	strh	r3, [r7, #30]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	8bfa      	ldrh	r2, [r7, #30]
 80018aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ae:	b292      	uxth	r2, r2
 80018b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	3306      	adds	r3, #6
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <PCD_EP_ISR_Handler+0x1f8>
 80018e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	6959      	ldr	r1, [r3, #20]
 80018f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f003 f94b 	bl	8004b9a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	441a      	add	r2, r3
 800190e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001910:	615a      	str	r2, [r3, #20]

            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f003 fc49 	bl	80051ac <HAL_PCD_DataOutStageCallback>
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 82bd 	bne.w	8001eac <PCD_EP_ISR_Handler+0x78a>
 8001932:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001936:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800193a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800193e:	f000 82b5 	beq.w	8001eac <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001950:	b29b      	uxth	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4413      	add	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196c:	b29a      	uxth	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b3e      	cmp	r3, #62	; 0x3e
 8001978:	d91d      	bls.n	80019b6 <PCD_EP_ISR_Handler+0x294>
 800197a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
 8001982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <PCD_EP_ISR_Handler+0x272>
 800198e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001990:	3b01      	subs	r3, #1
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199c:	b29b      	uxth	r3, r3
 800199e:	029b      	lsls	r3, r3, #10
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e026      	b.n	8001a04 <PCD_EP_ISR_Handler+0x2e2>
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10a      	bne.n	80019d4 <PCD_EP_ISR_Handler+0x2b2>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	e017      	b.n	8001a04 <PCD_EP_ISR_Handler+0x2e2>
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <PCD_EP_ISR_Handler+0x2cc>
 80019e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ea:	3301      	adds	r3, #1
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a14:	827b      	strh	r3, [r7, #18]
 8001a16:	8a7b      	ldrh	r3, [r7, #18]
 8001a18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a1c:	827b      	strh	r3, [r7, #18]
 8001a1e:	8a7b      	ldrh	r3, [r7, #18]
 8001a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a24:	827b      	strh	r3, [r7, #18]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	8a7b      	ldrh	r3, [r7, #18]
 8001a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	8013      	strh	r3, [r2, #0]
 8001a40:	e234      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a56:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f280 80fc 	bge.w	8001c58 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a76:	4013      	ands	r3, r2
 8001a78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a92:	b292      	uxth	r2, r2
 8001a94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a96:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aae:	7b1b      	ldrb	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d125      	bne.n	8001b00 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3306      	adds	r3, #6
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001adc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8092 	beq.w	8001c0e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af0:	6959      	ldr	r1, [r3, #20]
 8001af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af4:	88da      	ldrh	r2, [r3, #6]
 8001af6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001afa:	f003 f84e 	bl	8004b9a <USB_ReadPMA>
 8001afe:	e086      	b.n	8001c0e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b02:	78db      	ldrb	r3, [r3, #3]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d10a      	bne.n	8001b1e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f9d9 	bl	8001ec8 <HAL_PCD_EP_DB_Receive>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b1c:	e077      	b.n	8001c0e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b38:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	441a      	add	r2, r3
 8001b4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d024      	beq.n	8001bc6 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3302      	adds	r3, #2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ba8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02e      	beq.n	8001c0e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	6959      	ldr	r1, [r3, #20]
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bba:	891a      	ldrh	r2, [r3, #8]
 8001bbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc0:	f002 ffeb 	bl	8004b9a <USB_ReadPMA>
 8001bc4:	e023      	b.n	8001c0e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3306      	adds	r3, #6
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	895a      	ldrh	r2, [r3, #10]
 8001c06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c0a:	f002 ffc6 	bl	8004b9a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c16:	441a      	add	r2, r3
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c24:	441a      	add	r2, r3
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <PCD_EP_ISR_Handler+0x51c>
 8001c32:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d206      	bcs.n	8001c4c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f003 fab1 	bl	80051ac <HAL_PCD_DataOutStageCallback>
        {
 8001c4a:	e005      	b.n	8001c58 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fcd2 	bl	80035fc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8123 	beq.w	8001eac <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	441a      	add	r2, r3
 8001ca6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	78db      	ldrb	r3, [r3, #3]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 80a2 	bne.w	8001e04 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	7b1b      	ldrb	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8093 	beq.w	8001df6 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d046      	beq.n	8001d6a <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	785b      	ldrb	r3, [r3, #1]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d126      	bne.n	8001d32 <PCD_EP_ISR_Handler+0x610>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	4413      	add	r3, r2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	011a      	lsls	r2, r3, #4
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	4413      	add	r3, r2
 8001d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	e061      	b.n	8001df6 <PCD_EP_ISR_Handler+0x6d4>
 8001d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d15d      	bne.n	8001df6 <PCD_EP_ISR_Handler+0x6d4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	4413      	add	r3, r2
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	011a      	lsls	r2, r3, #4
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	e045      	b.n	8001df6 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d126      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x6a4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	4413      	add	r3, r2
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	011a      	lsls	r2, r3, #4
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	4413      	add	r3, r2
 8001d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	e017      	b.n	8001df6 <PCD_EP_ISR_Handler+0x6d4>
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d113      	bne.n	8001df6 <PCD_EP_ISR_Handler+0x6d4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ddc:	4413      	add	r3, r2
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	011a      	lsls	r2, r3, #4
 8001de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de8:	4413      	add	r3, r2
 8001dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f003 f9f0 	bl	80051e2 <HAL_PCD_DataInStageCallback>
 8001e02:	e053      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d146      	bne.n	8001e9e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	3302      	adds	r3, #2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d907      	bls.n	8001e58 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e50:	1ad2      	subs	r2, r2, r3
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	e002      	b.n	8001e5e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f003 f9b8 	bl	80051e2 <HAL_PCD_DataInStageCallback>
 8001e72:	e01b      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e7c:	441a      	add	r2, r3
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e8a:	441a      	add	r2, r3
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 fbb0 	bl	80035fc <USB_EPStartXfer>
 8001e9c:	e006      	b.n	8001eac <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f91b 	bl	80020e2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f6ff ac37 	blt.w	800172c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3758      	adds	r7, #88	; 0x58
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_EP_DB_Receive>:

static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d07e      	beq.n	8001fde <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	8b7b      	ldrh	r3, [r7, #26]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d306      	bcc.n	8001f22 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	8b7b      	ldrh	r3, [r7, #26]
 8001f1a:	1ad2      	subs	r2, r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	619a      	str	r2, [r3, #24]
 8001f20:	e002      	b.n	8001f28 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d123      	bne.n	8001f78 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	833b      	strh	r3, [r7, #24]
 8001f4c:	8b3b      	ldrh	r3, [r7, #24]
 8001f4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f52:	833b      	strh	r3, [r7, #24]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	8b3b      	ldrh	r3, [r7, #24]
 8001f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01f      	beq.n	8001fc2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9c:	82fb      	strh	r3, [r7, #22]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	8afb      	ldrh	r3, [r7, #22]
 8001fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8087 	beq.w	80020d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	6959      	ldr	r1, [r3, #20]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	891a      	ldrh	r2, [r3, #8]
 8001fd6:	8b7b      	ldrh	r3, [r7, #26]
 8001fd8:	f002 fddf 	bl	8004b9a <USB_ReadPMA>
 8001fdc:	e07c      	b.n	80020d8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3306      	adds	r3, #6
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002006:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	8b7b      	ldrh	r3, [r7, #26]
 800200e:	429a      	cmp	r2, r3
 8002010:	d306      	bcc.n	8002020 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	8b7b      	ldrh	r3, [r7, #26]
 8002018:	1ad2      	subs	r2, r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	619a      	str	r2, [r3, #24]
 800201e:	e002      	b.n	8002026 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d123      	bne.n	8002076 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002048:	83fb      	strh	r3, [r7, #30]
 800204a:	8bfb      	ldrh	r3, [r7, #30]
 800204c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002050:	83fb      	strh	r3, [r7, #30]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	441a      	add	r2, r3
 8002060:	8bfb      	ldrh	r3, [r7, #30]
 8002062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	b29b      	uxth	r3, r3
 8002074:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11f      	bne.n	80020c0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209a:	83bb      	strh	r3, [r7, #28]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	8bbb      	ldrh	r3, [r7, #28]
 80020ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020bc:	b29b      	uxth	r3, r3
 80020be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020c0:	8b7b      	ldrh	r3, [r7, #26]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	895a      	ldrh	r2, [r3, #10]
 80020d2:	8b7b      	ldrh	r3, [r7, #26]
 80020d4:	f002 fd61 	bl	8004b9a <USB_ReadPMA>
    }
  }

  return count;
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_DB_Transmit>:

static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd, PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b0a4      	sub	sp, #144	; 0x90
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 81dd 	beq.w	80024b6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	3302      	adds	r3, #2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002124:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002130:	429a      	cmp	r2, r3
 8002132:	d907      	bls.n	8002144 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	619a      	str	r2, [r3, #24]
 8002142:	e002      	b.n	800214a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80b9 	bne.w	80022c6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d126      	bne.n	80021aa <HAL_PCD_EP_DB_Transmit+0xc8>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	4413      	add	r3, r2
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	011a      	lsls	r2, r3, #4
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	4413      	add	r3, r2
 800217e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218e:	b29a      	uxth	r2, r3
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	801a      	strh	r2, [r3, #0]
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	801a      	strh	r2, [r3, #0]
 80021a8:	e01a      	b.n	80021e0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	785b      	ldrb	r3, [r3, #1]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d116      	bne.n	80021e0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	4413      	add	r3, r2
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	011a      	lsls	r2, r3, #4
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	4413      	add	r3, r2
 80021d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	2200      	movs	r2, #0
 80021de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d126      	bne.n	800223c <HAL_PCD_EP_DB_Transmit+0x15a>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	4413      	add	r3, r2
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	011a      	lsls	r2, r3, #4
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002220:	b29a      	uxth	r2, r3
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002234:	b29a      	uxth	r2, r3
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	e017      	b.n	800226c <HAL_PCD_EP_DB_Transmit+0x18a>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d113      	bne.n	800226c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	4413      	add	r3, r2
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	011a      	lsls	r2, r3, #4
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	4413      	add	r3, r2
 8002260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2200      	movs	r2, #0
 800226a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f002 ffb5 	bl	80051e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 82fc 	beq.w	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	82fb      	strh	r3, [r7, #22]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	441a      	add	r2, r3
 80022ae:	8afb      	ldrh	r3, [r7, #22]
 80022b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	8013      	strh	r3, [r2, #0]
 80022c4:	e2da      	b.n	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d021      	beq.n	8002314 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	441a      	add	r2, r3
 80022fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	b29b      	uxth	r3, r3
 8002312:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 82ae 	bne.w	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002328:	441a      	add	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002336:	441a      	add	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d30b      	bcc.n	8002360 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002358:	1ad2      	subs	r2, r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	621a      	str	r2, [r3, #32]
 800235e:	e017      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002368:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800236c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002378:	e00a      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d165      	bne.n	8002464 <HAL_PCD_EP_DB_Transmit+0x382>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	4413      	add	r3, r2
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	011a      	lsls	r2, r3, #4
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b8:	4413      	add	r3, r2
 80023ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	801a      	strh	r2, [r3, #0]
 80023d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d4:	2b3e      	cmp	r3, #62	; 0x3e
 80023d6:	d91d      	bls.n	8002414 <HAL_PCD_EP_DB_Transmit+0x332>
 80023d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x310>
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	3b01      	subs	r3, #1
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b29b      	uxth	r3, r3
 8002404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240c:	b29a      	uxth	r2, r3
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	e044      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x350>
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242a:	b29a      	uxth	r2, r3
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e035      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
 800243a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002448:	3301      	adds	r3, #1
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29a      	uxth	r2, r3
 8002452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002454:	b29b      	uxth	r3, r3
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	b29b      	uxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b29a      	uxth	r2, r3
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	e01c      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d118      	bne.n	800249e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002480:	4413      	add	r3, r2
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	011a      	lsls	r2, r3, #4
 800248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248c:	4413      	add	r3, r2
 800248e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002498:	b29a      	uxth	r2, r3
 800249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6959      	ldr	r1, [r3, #20]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	891a      	ldrh	r2, [r3, #8]
 80024aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f002 fb2e 	bl	8004b10 <USB_WritePMA>
 80024b4:	e1e2      	b.n	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	3306      	adds	r3, #6
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d307      	bcc.n	80024fe <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024f6:	1ad2      	subs	r2, r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	619a      	str	r2, [r3, #24]
 80024fc:	e002      	b.n	8002504 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 80c0 	bne.w	800268e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d126      	bne.n	8002564 <HAL_PCD_EP_DB_Transmit+0x482>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800252a:	4413      	add	r3, r2
 800252c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	011a      	lsls	r2, r3, #4
 8002534:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002536:	4413      	add	r3, r2
 8002538:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800253c:	67bb      	str	r3, [r7, #120]	; 0x78
 800253e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002548:	b29a      	uxth	r2, r3
 800254a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255c:	b29a      	uxth	r2, r3
 800255e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	e01a      	b.n	800259a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d116      	bne.n	800259a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	667b      	str	r3, [r7, #100]	; 0x64
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002580:	4413      	add	r3, r2
 8002582:	667b      	str	r3, [r7, #100]	; 0x64
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800258c:	4413      	add	r3, r2
 800258e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002592:	663b      	str	r3, [r7, #96]	; 0x60
 8002594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002596:	2200      	movs	r2, #0
 8002598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	677b      	str	r3, [r7, #116]	; 0x74
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	785b      	ldrb	r3, [r3, #1]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12b      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0x51e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	4413      	add	r3, r2
 80025be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	011a      	lsls	r2, r3, #4
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	4413      	add	r3, r2
 80025ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	e017      	b.n	8002630 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	785b      	ldrb	r3, [r3, #1]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d113      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002616:	4413      	add	r3, r2
 8002618:	677b      	str	r3, [r7, #116]	; 0x74
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	011a      	lsls	r2, r3, #4
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	4413      	add	r3, r2
 8002624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002628:	673b      	str	r3, [r7, #112]	; 0x70
 800262a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262c:	2200      	movs	r2, #0
 800262e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f002 fdd3 	bl	80051e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 811a 	bne.w	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	441a      	add	r2, r3
 8002674:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
 800268c:	e0f6      	b.n	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d121      	bne.n	80026dc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 80ca 	bne.w	800287c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026f0:	441a      	add	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026fe:	441a      	add	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d30b      	bcc.n	8002728 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	621a      	str	r2, [r3, #32]
 8002726:	e017      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d108      	bne.n	8002742 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002730:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002734:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002740:	e00a      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	657b      	str	r3, [r7, #84]	; 0x54
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d165      	bne.n	8002832 <HAL_PCD_EP_DB_Transmit+0x750>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277a:	4413      	add	r3, r2
 800277c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	011a      	lsls	r2, r3, #4
 8002784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002786:	4413      	add	r3, r2
 8002788:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800278c:	65bb      	str	r3, [r7, #88]	; 0x58
 800278e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002798:	b29a      	uxth	r2, r3
 800279a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a2:	2b3e      	cmp	r3, #62	; 0x3e
 80027a4:	d91d      	bls.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x700>
 80027a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80027ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027bc:	3b01      	subs	r3, #1
 80027be:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e041      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x784>
 80027e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_PCD_EP_DB_Transmit+0x71e>
 80027ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	e032      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x784>
 8002800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	66bb      	str	r3, [r7, #104]	; 0x68
 8002808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_PCD_EP_DB_Transmit+0x738>
 8002814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002816:	3301      	adds	r3, #1
 8002818:	66bb      	str	r3, [r7, #104]	; 0x68
 800281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29a      	uxth	r2, r3
 8002820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002822:	b29b      	uxth	r3, r3
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	b29b      	uxth	r3, r3
 8002828:	4313      	orrs	r3, r2
 800282a:	b29a      	uxth	r2, r3
 800282c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	e019      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x784>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d115      	bne.n	8002866 <HAL_PCD_EP_DB_Transmit+0x784>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	4413      	add	r3, r2
 800284a:	657b      	str	r3, [r7, #84]	; 0x54
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	011a      	lsls	r2, r3, #4
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	4413      	add	r3, r2
 8002856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800285a:	653b      	str	r3, [r7, #80]	; 0x50
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002860:	b29a      	uxth	r2, r3
 8002862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002864:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6959      	ldr	r1, [r3, #20]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	895a      	ldrh	r2, [r3, #10]
 8002872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002876:	b29b      	uxth	r3, r3
 8002878:	f002 f94a 	bl	8004b10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002896:	82bb      	strh	r3, [r7, #20]
 8002898:	8abb      	ldrh	r3, [r7, #20]
 800289a:	f083 0310 	eor.w	r3, r3, #16
 800289e:	82bb      	strh	r3, [r7, #20]
 80028a0:	8abb      	ldrh	r3, [r7, #20]
 80028a2:	f083 0320 	eor.w	r3, r3, #32
 80028a6:	82bb      	strh	r3, [r7, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	8abb      	ldrh	r3, [r7, #20]
 80028b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3790      	adds	r7, #144	; 0x90
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_Init>:

uint32_t uwTickPrio   = (1UL << __NVIC_PRIO_BITS); /* Invalid PRIO */

HAL_TickFreqTypeDef uwTickFreq = HAL_TICK_FREQ_DEFAULT;  /* 1KHz */

HAL_StatusTypeDef HAL_Init(void){
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_Init+0x24>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_Init+0x24>)
 80028e2:	f043 0310 	orr.w	r3, r3, #16
 80028e6:	6013      	str	r3, [r2, #0]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f7fd fe0d 	bl	8000508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f000 f806 	bl	8002900 <HAL_InitTick>

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40022000 	.word	0x40022000

08002900 <HAL_InitTick>:

__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_InitTick+0x54>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_InitTick+0x58>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fe27 	bl	8000572 <HAL_SYSTICK_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e00e      	b.n	800294c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d80a      	bhi.n	800294a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f7fd fdef 	bl	800051e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002940:	4a06      	ldr	r2, [pc, #24]	; (800295c <HAL_InitTick+0x5c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000000 	.word	0x20000000
 8002958:	20000008 	.word	0x20000008
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_IncTick>:

__weak void HAL_IncTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_IncTick+0x1c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_IncTick+0x20>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a03      	ldr	r2, [pc, #12]	; (8002980 <HAL_IncTick+0x20>)
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	20000008 	.word	0x20000008
 8002980:	20000458 	.word	0x20000458

08002984 <HAL_Delay>:



__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7fd fdb2 	bl	80004f4 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7fd fda2 	bl	80004f4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000008 	.word	0x20000008

080029cc <USB_CoreInit>:
#include "../Core/Src/Inc_USB_Device.h"

#include "stm32f1xx.h"
#include "stm32f1xx_hal.h"

HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg){
 80029cc:	b084      	sub	sp, #16
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	f107 0014 	add.w	r0, r7, #20
 80029da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(USBx);
  UNUSED(cfg);
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	b004      	add	sp, #16
 80029ea:	4770      	bx	lr

080029ec <USB_EnableGlobalInt>:

HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx){
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <USB_DisableGlobalInt>:

HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx){
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4013      	ands	r3, r2
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <USB_SetCurrentMode>:

HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode){
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <USB_DevInit>:

HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg){
 8002a64:	b084      	sub	sp, #16
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	f107 0014 	add.w	r0, r7, #20
 8002a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	b004      	add	sp, #16
 8002aa2:	4770      	bx	lr

08002aa4 <USB_ActivateEndpoint>:

HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8002aa4:	b480      	push	{r7}
 8002aa6:	b09d      	sub	sp, #116	; 0x74
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d81f      	bhi.n	8002b16 <USB_ActivateEndpoint+0x72>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <USB_ActivateEndpoint+0x38>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	08002b1f 	.word	0x08002b1f
 8002ae8:	08002afb 	.word	0x08002afb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002aec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002af8:	e012      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002afa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002afe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b02:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b06:	e00b      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b14:	e004      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002b1c:	e000      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>
      break;
 8002b1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	7b1b      	ldrb	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 8178 	bne.w	8002e82 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8084 	beq.w	8002ca4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	011a      	lsls	r2, r3, #4
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	88db      	ldrh	r3, [r3, #6]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	827b      	strh	r3, [r7, #18]
 8002bde:	8a7b      	ldrh	r3, [r7, #18]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <USB_ActivateEndpoint+0x17c>
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	823b      	strh	r3, [r7, #16]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	8a3b      	ldrh	r3, [r7, #16]
 8002c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	78db      	ldrb	r3, [r3, #3]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d020      	beq.n	8002c6a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3e:	81bb      	strh	r3, [r7, #12]
 8002c40:	89bb      	ldrh	r3, [r7, #12]
 8002c42:	f083 0320 	eor.w	r3, r3, #32
 8002c46:	81bb      	strh	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	89bb      	ldrh	r3, [r7, #12]
 8002c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	8013      	strh	r3, [r2, #0]
 8002c68:	e2d5      	b.n	8003216 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c80:	81fb      	strh	r3, [r7, #14]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]
 8002ca2:	e2b8      	b.n	8003216 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	4413      	add	r3, r2
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	011a      	lsls	r2, r3, #4
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	88db      	ldrh	r3, [r3, #6]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	4413      	add	r3, r2
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	011a      	lsls	r2, r3, #4
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b3e      	cmp	r3, #62	; 0x3e
 8002d12:	d91d      	bls.n	8002d50 <USB_ActivateEndpoint+0x2ac>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <USB_ActivateEndpoint+0x28a>
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	029b      	lsls	r3, r3, #10
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	e026      	b.n	8002d9e <USB_ActivateEndpoint+0x2fa>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <USB_ActivateEndpoint+0x2ca>
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	e017      	b.n	8002d9e <USB_ActivateEndpoint+0x2fa>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <USB_ActivateEndpoint+0x2e4>
 8002d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d84:	3301      	adds	r3, #1
 8002d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4313      	orrs	r3, r2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	847b      	strh	r3, [r7, #34]	; 0x22
 8002dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01b      	beq.n	8002dee <USB_ActivateEndpoint+0x34a>
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	843b      	strh	r3, [r7, #32]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	8c3b      	ldrh	r3, [r7, #32]
 8002dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d124      	bne.n	8002e40 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	83bb      	strh	r3, [r7, #28]
 8002e0e:	8bbb      	ldrh	r3, [r7, #28]
 8002e10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e14:	83bb      	strh	r3, [r7, #28]
 8002e16:	8bbb      	ldrh	r3, [r7, #28]
 8002e18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e1c:	83bb      	strh	r3, [r7, #28]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	8bbb      	ldrh	r3, [r7, #28]
 8002e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8013      	strh	r3, [r2, #0]
 8002e3e:	e1ea      	b.n	8003216 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	83fb      	strh	r3, [r7, #30]
 8002e58:	8bfb      	ldrh	r3, [r7, #30]
 8002e5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e5e:	83fb      	strh	r3, [r7, #30]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	8bfb      	ldrh	r3, [r7, #30]
 8002e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]
 8002e80:	e1c9      	b.n	8003216 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	78db      	ldrb	r3, [r3, #3]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d11e      	bne.n	8002ec8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	8013      	strh	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	441a      	add	r2, r3
 8002eec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f14:	4413      	add	r3, r2
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	011a      	lsls	r2, r3, #4
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	891b      	ldrh	r3, [r3, #8]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f36:	801a      	strh	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f48:	4413      	add	r3, r2
 8002f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	011a      	lsls	r2, r3, #4
 8002f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	895b      	ldrh	r3, [r3, #10]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	785b      	ldrb	r3, [r3, #1]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 8093 	bne.w	800309c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01b      	beq.n	8002fca <USB_ActivateEndpoint+0x526>
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002fd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01b      	beq.n	800301a <USB_ActivateEndpoint+0x576>
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	441a      	add	r2, r3
 8003004:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800300a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003012:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003016:	b29b      	uxth	r3, r3
 8003018:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	873b      	strh	r3, [r7, #56]	; 0x38
 8003032:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003034:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003038:	873b      	strh	r3, [r7, #56]	; 0x38
 800303a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800303c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003040:	873b      	strh	r3, [r7, #56]	; 0x38
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003078:	86fb      	strh	r3, [r7, #54]	; 0x36
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]
 800309a:	e0bc      	b.n	8003216 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01d      	beq.n	80030f4 <USB_ActivateEndpoint+0x650>
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	441a      	add	r2, r3
 80030dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01d      	beq.n	800314c <USB_ActivateEndpoint+0x6a8>
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	441a      	add	r2, r3
 8003134:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800313c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003148:	b29b      	uxth	r3, r3
 800314a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	78db      	ldrb	r3, [r3, #3]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d024      	beq.n	800319e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800316e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003172:	f083 0320 	eor.w	r3, r3, #32
 8003176:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003198:	b29b      	uxth	r3, r3
 800319a:	8013      	strh	r3, [r2, #0]
 800319c:	e01d      	b.n	80031da <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003216:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800321a:	4618      	mov	r0, r3
 800321c:	3774      	adds	r7, #116	; 0x74
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <USB_DeactivateEndpoint>:

HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8003224:	b480      	push	{r7}
 8003226:	b08d      	sub	sp, #52	; 0x34
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	7b1b      	ldrb	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 808e 	bne.w	8003354 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	785b      	ldrb	r3, [r3, #1]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d044      	beq.n	80032ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	81bb      	strh	r3, [r7, #12]
 800324e:	89bb      	ldrh	r3, [r7, #12]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <USB_DeactivateEndpoint+0x6c>
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	817b      	strh	r3, [r7, #10]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800328c:	b29b      	uxth	r3, r3
 800328e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a6:	813b      	strh	r3, [r7, #8]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	893b      	ldrh	r3, [r7, #8]
 80032b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8013      	strh	r3, [r2, #0]
 80032c8:	e192      	b.n	80035f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	827b      	strh	r3, [r7, #18]
 80032d8:	8a7b      	ldrh	r3, [r7, #18]
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01b      	beq.n	800331a <USB_DeactivateEndpoint+0xf6>
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	823b      	strh	r3, [r7, #16]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	8a3b      	ldrh	r3, [r7, #16]
 8003306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	81fb      	strh	r3, [r7, #14]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	441a      	add	r2, r3
 800333c:	89fb      	ldrh	r3, [r7, #14]
 800333e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334e:	b29b      	uxth	r3, r3
 8003350:	8013      	strh	r3, [r2, #0]
 8003352:	e14d      	b.n	80035f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 80a5 	bne.w	80034a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	843b      	strh	r3, [r7, #32]
 800336c:	8c3b      	ldrh	r3, [r7, #32]
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01b      	beq.n	80033ae <USB_DeactivateEndpoint+0x18a>
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338c:	83fb      	strh	r3, [r7, #30]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	8bfb      	ldrh	r3, [r7, #30]
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	83bb      	strh	r3, [r7, #28]
 80033bc:	8bbb      	ldrh	r3, [r7, #28]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01b      	beq.n	80033fe <USB_DeactivateEndpoint+0x1da>
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033dc:	837b      	strh	r3, [r7, #26]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	8b7b      	ldrh	r3, [r7, #26]
 80033ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	833b      	strh	r3, [r7, #24]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	8b3b      	ldrh	r3, [r7, #24]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344c:	82fb      	strh	r3, [r7, #22]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	8afb      	ldrh	r3, [r7, #22]
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003484:	82bb      	strh	r3, [r7, #20]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	8abb      	ldrh	r3, [r7, #20]
 8003492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	8013      	strh	r3, [r2, #0]
 80034a6:	e0a3      	b.n	80035f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <USB_DeactivateEndpoint+0x2d4>
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <USB_DeactivateEndpoint+0x324>
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	853b      	strh	r3, [r7, #40]	; 0x28
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003544:	b29b      	uxth	r3, r3
 8003546:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800356c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357c:	b29b      	uxth	r3, r3
 800357e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003596:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3734      	adds	r7, #52	; 0x34
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <USB_EPStartXfer>:

HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0c2      	sub	sp, #264	; 0x108
 8003600:	af00      	add	r7, sp, #0
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	6018      	str	r0, [r3, #0]
 8003606:	463b      	mov	r3, r7
 8003608:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800360a:	463b      	mov	r3, r7
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b01      	cmp	r3, #1
 8003612:	f040 8545 	bne.w	80040a0 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003616:	463b      	mov	r3, r7
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	463b      	mov	r3, r7
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d905      	bls.n	8003632 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003626:	463b      	mov	r3, r7
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003630:	e004      	b.n	800363c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003632:	463b      	mov	r3, r7
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800363c:	463b      	mov	r3, r7
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	7b1b      	ldrb	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d128      	bne.n	8003698 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003646:	463b      	mov	r3, r7
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6959      	ldr	r1, [r3, #20]
 800364c:	463b      	mov	r3, r7
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	88da      	ldrh	r2, [r3, #6]
 8003652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003656:	b29b      	uxth	r3, r3
 8003658:	1d38      	adds	r0, r7, #4
 800365a:	6800      	ldr	r0, [r0, #0]
 800365c:	f001 fa58 	bl	8004b10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	463b      	mov	r3, r7
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	011a      	lsls	r2, r3, #4
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	f000 bcdb 	b.w	800404e <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003698:	463b      	mov	r3, r7
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	78db      	ldrb	r3, [r3, #3]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	f040 836f 	bne.w	8003d82 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80036a4:	463b      	mov	r3, r7
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	463b      	mov	r3, r7
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f240 8313 	bls.w	8003cdc <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	463b      	mov	r3, r7
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	463b      	mov	r3, r7
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80036f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80036fa:	463b      	mov	r3, r7
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003704:	1ad2      	subs	r2, r2, r3
 8003706:	463b      	mov	r3, r7
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	463b      	mov	r3, r7
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 816d 	beq.w	8003a02 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
 800372e:	463b      	mov	r3, r7
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	785b      	ldrb	r3, [r3, #1]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d16e      	bne.n	8003816 <USB_EPStartXfer+0x21a>
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	4413      	add	r3, r2
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003750:	463b      	mov	r3, r7
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	011a      	lsls	r2, r3, #4
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	4413      	add	r3, r2
 800375c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376c:	b29a      	uxth	r2, r3
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003776:	2b3e      	cmp	r3, #62	; 0x3e
 8003778:	d921      	bls.n	80037be <USB_EPStartXfer+0x1c2>
 800377a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <USB_EPStartXfer+0x19e>
 8003790:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003794:	3b01      	subs	r3, #1
 8003796:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	029b      	lsls	r3, r3, #10
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	e047      	b.n	800384e <USB_EPStartXfer+0x252>
 80037be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <USB_EPStartXfer+0x1e0>
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	e038      	b.n	800384e <USB_EPStartXfer+0x252>
 80037dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <USB_EPStartXfer+0x200>
 80037f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037f6:	3301      	adds	r3, #1
 80037f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29a      	uxth	r2, r3
 8003802:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003806:	b29b      	uxth	r3, r3
 8003808:	029b      	lsls	r3, r3, #10
 800380a:	b29b      	uxth	r3, r3
 800380c:	4313      	orrs	r3, r2
 800380e:	b29a      	uxth	r2, r3
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	e01b      	b.n	800384e <USB_EPStartXfer+0x252>
 8003816:	463b      	mov	r3, r7
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d116      	bne.n	800384e <USB_EPStartXfer+0x252>
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003828:	b29b      	uxth	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	4413      	add	r3, r2
 8003830:	633b      	str	r3, [r7, #48]	; 0x30
 8003832:	463b      	mov	r3, r7
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	011a      	lsls	r2, r3, #4
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	4413      	add	r3, r2
 800383e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003848:	b29a      	uxth	r2, r3
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800384e:	463b      	mov	r3, r7
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	895b      	ldrh	r3, [r3, #10]
 8003854:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003858:	463b      	mov	r3, r7
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6959      	ldr	r1, [r3, #20]
 800385e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003862:	b29b      	uxth	r3, r3
 8003864:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003868:	1d38      	adds	r0, r7, #4
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	f001 f950 	bl	8004b10 <USB_WritePMA>
            ep->xfer_buff += len;
 8003870:	463b      	mov	r3, r7
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387a:	441a      	add	r2, r3
 800387c:	463b      	mov	r3, r7
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003882:	463b      	mov	r3, r7
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	463b      	mov	r3, r7
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	429a      	cmp	r2, r3
 8003890:	d909      	bls.n	80038a6 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8003892:	463b      	mov	r3, r7
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800389c:	1ad2      	subs	r2, r2, r3
 800389e:	463b      	mov	r3, r7
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	621a      	str	r2, [r3, #32]
 80038a4:	e008      	b.n	80038b8 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80038a6:	463b      	mov	r3, r7
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80038b0:	463b      	mov	r3, r7
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038b8:	463b      	mov	r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d16e      	bne.n	80039a0 <USB_EPStartXfer+0x3a4>
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4413      	add	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	463b      	mov	r3, r7
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	011a      	lsls	r2, r3, #4
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003900:	2b3e      	cmp	r3, #62	; 0x3e
 8003902:	d921      	bls.n	8003948 <USB_EPStartXfer+0x34c>
 8003904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <USB_EPStartXfer+0x328>
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391e:	3b01      	subs	r3, #1
 8003920:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29a      	uxth	r2, r3
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392e:	b29b      	uxth	r3, r3
 8003930:	029b      	lsls	r3, r3, #10
 8003932:	b29b      	uxth	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003940:	b29a      	uxth	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	e04a      	b.n	80039de <USB_EPStartXfer+0x3e2>
 8003948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <USB_EPStartXfer+0x36a>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395e:	b29a      	uxth	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e03b      	b.n	80039de <USB_EPStartXfer+0x3e2>
 8003966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <USB_EPStartXfer+0x38a>
 800397c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003980:	3301      	adds	r3, #1
 8003982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29a      	uxth	r2, r3
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003990:	b29b      	uxth	r3, r3
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	b29b      	uxth	r3, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	b29a      	uxth	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e01e      	b.n	80039de <USB_EPStartXfer+0x3e2>
 80039a0:	463b      	mov	r3, r7
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	785b      	ldrb	r3, [r3, #1]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d119      	bne.n	80039de <USB_EPStartXfer+0x3e2>
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	4413      	add	r3, r2
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	463b      	mov	r3, r7
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	011a      	lsls	r2, r3, #4
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d8:	b29a      	uxth	r2, r3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80039de:	463b      	mov	r3, r7
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	891b      	ldrh	r3, [r3, #8]
 80039e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039e8:	463b      	mov	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6959      	ldr	r1, [r3, #20]
 80039ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80039f8:	1d38      	adds	r0, r7, #4
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f001 f888 	bl	8004b10 <USB_WritePMA>
 8003a00:	e325      	b.n	800404e <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a02:	463b      	mov	r3, r7
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d16e      	bne.n	8003aea <USB_EPStartXfer+0x4ee>
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a20:	4413      	add	r3, r2
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	463b      	mov	r3, r7
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	011a      	lsls	r2, r3, #4
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	4413      	add	r3, r2
 8003a30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
 8003a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003a4c:	d921      	bls.n	8003a92 <USB_EPStartXfer+0x496>
 8003a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <USB_EPStartXfer+0x472>
 8003a64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	029b      	lsls	r3, r3, #10
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	e04a      	b.n	8003b28 <USB_EPStartXfer+0x52c>
 8003a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <USB_EPStartXfer+0x4b4>
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e03b      	b.n	8003b28 <USB_EPStartXfer+0x52c>
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <USB_EPStartXfer+0x4d4>
 8003ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aca:	3301      	adds	r3, #1
 8003acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	e01e      	b.n	8003b28 <USB_EPStartXfer+0x52c>
 8003aea:	463b      	mov	r3, r7
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d119      	bne.n	8003b28 <USB_EPStartXfer+0x52c>
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	653b      	str	r3, [r7, #80]	; 0x50
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b08:	4413      	add	r3, r2
 8003b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	011a      	lsls	r2, r3, #4
 8003b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b16:	4413      	add	r3, r2
 8003b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b28:	463b      	mov	r3, r7
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	891b      	ldrh	r3, [r3, #8]
 8003b2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b32:	463b      	mov	r3, r7
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6959      	ldr	r1, [r3, #20]
 8003b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b42:	1d38      	adds	r0, r7, #4
 8003b44:	6800      	ldr	r0, [r0, #0]
 8003b46:	f000 ffe3 	bl	8004b10 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b54:	441a      	add	r2, r3
 8003b56:	463b      	mov	r3, r7
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	463b      	mov	r3, r7
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d909      	bls.n	8003b80 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	463b      	mov	r3, r7
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	621a      	str	r2, [r3, #32]
 8003b7e:	e008      	b.n	8003b92 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b80:	463b      	mov	r3, r7
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40
 8003b98:	463b      	mov	r3, r7
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d16e      	bne.n	8003c80 <USB_EPStartXfer+0x684>
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	4413      	add	r3, r2
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bba:	463b      	mov	r3, r7
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	011a      	lsls	r2, r3, #4
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be0:	2b3e      	cmp	r3, #62	; 0x3e
 8003be2:	d921      	bls.n	8003c28 <USB_EPStartXfer+0x62c>
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <USB_EPStartXfer+0x608>
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	029b      	lsls	r3, r3, #10
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e047      	b.n	8003cb8 <USB_EPStartXfer+0x6bc>
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <USB_EPStartXfer+0x64a>
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	801a      	strh	r2, [r3, #0]
 8003c44:	e038      	b.n	8003cb8 <USB_EPStartXfer+0x6bc>
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <USB_EPStartXfer+0x66a>
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	3301      	adds	r3, #1
 8003c62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	029b      	lsls	r3, r3, #10
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4313      	orrs	r3, r2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	e01b      	b.n	8003cb8 <USB_EPStartXfer+0x6bc>
 8003c80:	463b      	mov	r3, r7
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	785b      	ldrb	r3, [r3, #1]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d116      	bne.n	8003cb8 <USB_EPStartXfer+0x6bc>
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	4413      	add	r3, r2
 8003c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	011a      	lsls	r2, r3, #4
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003cb8:	463b      	mov	r3, r7
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	895b      	ldrh	r3, [r3, #10]
 8003cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6959      	ldr	r1, [r3, #20]
 8003cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003cd2:	1d38      	adds	r0, r7, #4
 8003cd4:	6800      	ldr	r0, [r0, #0]
 8003cd6:	f000 ff1b 	bl	8004b10 <USB_WritePMA>
 8003cda:	e1b8      	b.n	800404e <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003cdc:	463b      	mov	r3, r7
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	463b      	mov	r3, r7
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	463b      	mov	r3, r7
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	441a      	add	r2, r3
 8003d12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3e:	4413      	add	r3, r2
 8003d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d42:	463b      	mov	r3, r7
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d5e:	463b      	mov	r3, r7
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	891b      	ldrh	r3, [r3, #8]
 8003d64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d68:	463b      	mov	r3, r7
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6959      	ldr	r1, [r3, #20]
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003d78:	1d38      	adds	r0, r7, #4
 8003d7a:	6800      	ldr	r0, [r0, #0]
 8003d7c:	f000 fec8 	bl	8004b10 <USB_WritePMA>
 8003d80:	e165      	b.n	800404e <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d82:	463b      	mov	r3, r7
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	463b      	mov	r3, r7
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	463b      	mov	r3, r7
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a5 	beq.w	8003efa <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
 8003db6:	463b      	mov	r3, r7
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d16e      	bne.n	8003e9e <USB_EPStartXfer+0x8a2>
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd4:	4413      	add	r3, r2
 8003dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd8:	463b      	mov	r3, r7
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	011a      	lsls	r2, r3, #4
 8003de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003de2:	4413      	add	r3, r2
 8003de4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003de8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8003e00:	d921      	bls.n	8003e46 <USB_EPStartXfer+0x84a>
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <USB_EPStartXfer+0x826>
 8003e18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e42:	801a      	strh	r2, [r3, #0]
 8003e44:	e047      	b.n	8003ed6 <USB_EPStartXfer+0x8da>
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <USB_EPStartXfer+0x868>
 8003e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	e038      	b.n	8003ed6 <USB_EPStartXfer+0x8da>
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <USB_EPStartXfer+0x888>
 8003e7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e01b      	b.n	8003ed6 <USB_EPStartXfer+0x8da>
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d116      	bne.n	8003ed6 <USB_EPStartXfer+0x8da>
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb6:	4413      	add	r3, r2
 8003eb8:	673b      	str	r3, [r7, #112]	; 0x70
 8003eba:	463b      	mov	r3, r7
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	011a      	lsls	r2, r3, #4
 8003ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	895b      	ldrh	r3, [r3, #10]
 8003edc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6959      	ldr	r1, [r3, #20]
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ef0:	1d38      	adds	r0, r7, #4
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	f000 fe0c 	bl	8004b10 <USB_WritePMA>
 8003ef8:	e0a9      	b.n	800404e <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003efa:	463b      	mov	r3, r7
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d16e      	bne.n	8003fe2 <USB_EPStartXfer+0x9e6>
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f18:	4413      	add	r3, r2
 8003f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	011a      	lsls	r2, r3, #4
 8003f24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f26:	4413      	add	r3, r2
 8003f28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f42:	2b3e      	cmp	r3, #62	; 0x3e
 8003f44:	d921      	bls.n	8003f8a <USB_EPStartXfer+0x98e>
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <USB_EPStartXfer+0x96a>
 8003f5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f60:	3b01      	subs	r3, #1
 8003f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	e050      	b.n	800402c <USB_EPStartXfer+0xa30>
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <USB_EPStartXfer+0x9ac>
 8003f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	e041      	b.n	800402c <USB_EPStartXfer+0xa30>
 8003fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <USB_EPStartXfer+0x9cc>
 8003fbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	e024      	b.n	800402c <USB_EPStartXfer+0xa30>
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d11f      	bne.n	800402c <USB_EPStartXfer+0xa30>
 8003fec:	1d3b      	adds	r3, r7, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004004:	4413      	add	r3, r2
 8004006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800400a:	463b      	mov	r3, r7
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	011a      	lsls	r2, r3, #4
 8004012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004016:	4413      	add	r3, r2
 8004018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800401c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004024:	b29a      	uxth	r2, r3
 8004026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800402a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800402c:	463b      	mov	r3, r7
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	891b      	ldrh	r3, [r3, #8]
 8004032:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004040:	b29b      	uxth	r3, r3
 8004042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004046:	1d38      	adds	r0, r7, #4
 8004048:	6800      	ldr	r0, [r0, #0]
 800404a:	f000 fd61 	bl	8004b10 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	463b      	mov	r3, r7
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004068:	817b      	strh	r3, [r7, #10]
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	f083 0310 	eor.w	r3, r3, #16
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	f083 0320 	eor.w	r3, r3, #32
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	463b      	mov	r3, r7
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409a:	b29b      	uxth	r3, r3
 800409c:	8013      	strh	r3, [r2, #0]
 800409e:	e3f3      	b.n	8004888 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80040a0:	463b      	mov	r3, r7
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	7b1b      	ldrb	r3, [r3, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 809c 	bne.w	80041e4 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80040ac:	463b      	mov	r3, r7
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	463b      	mov	r3, r7
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d90e      	bls.n	80040da <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80040bc:	463b      	mov	r3, r7
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80040c6:	463b      	mov	r3, r7
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	463b      	mov	r3, r7
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	619a      	str	r2, [r3, #24]
 80040d8:	e008      	b.n	80040ec <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80040da:	463b      	mov	r3, r7
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80040e4:	463b      	mov	r3, r7
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004104:	4413      	add	r3, r2
 8004106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800410a:	463b      	mov	r3, r7
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	011a      	lsls	r2, r3, #4
 8004112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004116:	4413      	add	r3, r2
 8004118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800411c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412c:	b29a      	uxth	r2, r3
 800412e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004138:	2b3e      	cmp	r3, #62	; 0x3e
 800413a:	d923      	bls.n	8004184 <USB_EPStartXfer+0xb88>
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <USB_EPStartXfer+0xb60>
 8004152:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004156:	3b01      	subs	r3, #1
 8004158:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29a      	uxth	r2, r3
 8004164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004168:	b29b      	uxth	r3, r3
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	b29b      	uxth	r3, r3
 800416e:	4313      	orrs	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417a:	b29a      	uxth	r2, r3
 800417c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	e353      	b.n	800482c <USB_EPStartXfer+0x1230>
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10c      	bne.n	80041a6 <USB_EPStartXfer+0xbaa>
 800418c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29a      	uxth	r2, r3
 800419e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	e342      	b.n	800482c <USB_EPStartXfer+0x1230>
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <USB_EPStartXfer+0xbca>
 80041bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041c0:	3301      	adds	r3, #1
 80041c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	029b      	lsls	r3, r3, #10
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b29a      	uxth	r2, r3
 80041dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e323      	b.n	800482c <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80041e4:	463b      	mov	r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78db      	ldrb	r3, [r3, #3]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	f040 81a9 	bne.w	8004542 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80041f0:	463b      	mov	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8082 	bne.w	8004300 <USB_EPStartXfer+0xd04>
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004214:	4413      	add	r3, r2
 8004216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	011a      	lsls	r2, r3, #4
 8004222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004226:	4413      	add	r3, r2
 8004228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800422c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423c:	b29a      	uxth	r2, r3
 800423e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	463b      	mov	r3, r7
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b3e      	cmp	r3, #62	; 0x3e
 800424c:	d925      	bls.n	800429a <USB_EPStartXfer+0xc9e>
 800424e:	463b      	mov	r3, r7
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800425a:	463b      	mov	r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <USB_EPStartXfer+0xc76>
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	3b01      	subs	r3, #1
 800426e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427e:	b29b      	uxth	r3, r3
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	b29b      	uxth	r3, r3
 8004284:	4313      	orrs	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800428c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004290:	b29a      	uxth	r2, r3
 8004292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	e058      	b.n	800434c <USB_EPStartXfer+0xd50>
 800429a:	463b      	mov	r3, r7
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10c      	bne.n	80042be <USB_EPStartXfer+0xcc2>
 80042a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e046      	b.n	800434c <USB_EPStartXfer+0xd50>
 80042be:	463b      	mov	r3, r7
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ca:	463b      	mov	r3, r7
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <USB_EPStartXfer+0xce6>
 80042d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	e025      	b.n	800434c <USB_EPStartXfer+0xd50>
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d120      	bne.n	800434c <USB_EPStartXfer+0xd50>
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431a:	b29b      	uxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004322:	4413      	add	r3, r2
 8004324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004328:	463b      	mov	r3, r7
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	011a      	lsls	r2, r3, #4
 8004330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004334:	4413      	add	r3, r2
 8004336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800433a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433e:	463b      	mov	r3, r7
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	b29a      	uxth	r2, r3
 8004346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004354:	463b      	mov	r3, r7
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8082 	bne.w	8004464 <USB_EPStartXfer+0xe68>
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004370:	b29b      	uxth	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004378:	4413      	add	r3, r2
 800437a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800437e:	463b      	mov	r3, r7
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	011a      	lsls	r2, r3, #4
 8004386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800438a:	4413      	add	r3, r2
 800438c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	463b      	mov	r3, r7
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b3e      	cmp	r3, #62	; 0x3e
 80043b0:	d925      	bls.n	80043fe <USB_EPStartXfer+0xe02>
 80043b2:	463b      	mov	r3, r7
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043be:	463b      	mov	r3, r7
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <USB_EPStartXfer+0xdda>
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	e054      	b.n	80044a8 <USB_EPStartXfer+0xeac>
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10c      	bne.n	8004422 <USB_EPStartXfer+0xe26>
 8004408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004418:	b29a      	uxth	r2, r3
 800441a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	e042      	b.n	80044a8 <USB_EPStartXfer+0xeac>
 8004422:	463b      	mov	r3, r7
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800442e:	463b      	mov	r3, r7
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <USB_EPStartXfer+0xe4a>
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	3301      	adds	r3, #1
 8004442:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29a      	uxth	r2, r3
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	b29b      	uxth	r3, r3
 8004454:	029b      	lsls	r3, r3, #10
 8004456:	b29b      	uxth	r3, r3
 8004458:	4313      	orrs	r3, r2
 800445a:	b29a      	uxth	r2, r3
 800445c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	e021      	b.n	80044a8 <USB_EPStartXfer+0xeac>
 8004464:	463b      	mov	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d11c      	bne.n	80044a8 <USB_EPStartXfer+0xeac>
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004476:	b29b      	uxth	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800447e:	4413      	add	r3, r2
 8004480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004484:	463b      	mov	r3, r7
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	011a      	lsls	r2, r3, #4
 800448c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004490:	4413      	add	r3, r2
 8004492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80044a8:	463b      	mov	r3, r7
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81bc 	beq.w	800482c <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	463b      	mov	r3, r7
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80044c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <USB_EPStartXfer+0xee4>
 80044d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10d      	bne.n	80044fc <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80044e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 819f 	bne.w	800482c <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80044ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 8198 	bne.w	800482c <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	463b      	mov	r3, r7
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	463b      	mov	r3, r7
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
 8004540:	e174      	b.n	800482c <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78db      	ldrb	r3, [r3, #3]
 8004548:	2b01      	cmp	r3, #1
 800454a:	f040 816d 	bne.w	8004828 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	463b      	mov	r3, r7
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	429a      	cmp	r2, r3
 800455c:	d90e      	bls.n	800457c <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800455e:	463b      	mov	r3, r7
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	619a      	str	r2, [r3, #24]
 800457a:	e008      	b.n	800458e <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800457c:	463b      	mov	r3, r7
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004586:	463b      	mov	r3, r7
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800458e:	463b      	mov	r3, r7
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d17b      	bne.n	8004690 <USB_EPStartXfer+0x1094>
 8004598:	1d3b      	adds	r3, r7, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045b0:	4413      	add	r3, r2
 80045b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b6:	463b      	mov	r3, r7
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	011a      	lsls	r2, r3, #4
 80045be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045c2:	4413      	add	r3, r2
 80045c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d8:	b29a      	uxth	r2, r3
 80045da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045de:	801a      	strh	r2, [r3, #0]
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e4:	2b3e      	cmp	r3, #62	; 0x3e
 80045e6:	d923      	bls.n	8004630 <USB_EPStartXfer+0x1034>
 80045e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80045f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <USB_EPStartXfer+0x100c>
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004602:	3b01      	subs	r3, #1
 8004604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004614:	b29b      	uxth	r3, r3
 8004616:	029b      	lsls	r3, r3, #10
 8004618:	b29b      	uxth	r3, r3
 800461a:	4313      	orrs	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004626:	b29a      	uxth	r2, r3
 8004628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e054      	b.n	80046da <USB_EPStartXfer+0x10de>
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10c      	bne.n	8004652 <USB_EPStartXfer+0x1056>
 8004638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004648:	b29a      	uxth	r2, r3
 800464a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	e043      	b.n	80046da <USB_EPStartXfer+0x10de>
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800465c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <USB_EPStartXfer+0x1076>
 8004668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466c:	3301      	adds	r3, #1
 800466e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29a      	uxth	r2, r3
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467e:	b29b      	uxth	r3, r3
 8004680:	029b      	lsls	r3, r3, #10
 8004682:	b29b      	uxth	r3, r3
 8004684:	4313      	orrs	r3, r2
 8004686:	b29a      	uxth	r2, r3
 8004688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e024      	b.n	80046da <USB_EPStartXfer+0x10de>
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11f      	bne.n	80046da <USB_EPStartXfer+0x10de>
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046a2:	1d3b      	adds	r3, r7, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046b2:	4413      	add	r3, r2
 80046b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046b8:	463b      	mov	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	011a      	lsls	r2, r3, #4
 80046c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046e2:	463b      	mov	r3, r7
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d17b      	bne.n	80047e4 <USB_EPStartXfer+0x11e8>
 80046ec:	1d3b      	adds	r3, r7, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004704:	4413      	add	r3, r2
 8004706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800470a:	463b      	mov	r3, r7
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	011a      	lsls	r2, r3, #4
 8004712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004716:	4413      	add	r3, r2
 8004718:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800471c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472c:	b29a      	uxth	r2, r3
 800472e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004738:	2b3e      	cmp	r3, #62	; 0x3e
 800473a:	d923      	bls.n	8004784 <USB_EPStartXfer+0x1188>
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <USB_EPStartXfer+0x1160>
 8004752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004756:	3b01      	subs	r3, #1
 8004758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800475c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29a      	uxth	r2, r3
 8004764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004768:	b29b      	uxth	r3, r3
 800476a:	029b      	lsls	r3, r3, #10
 800476c:	b29b      	uxth	r3, r3
 800476e:	4313      	orrs	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477a:	b29a      	uxth	r2, r3
 800477c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e053      	b.n	800482c <USB_EPStartXfer+0x1230>
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <USB_EPStartXfer+0x11aa>
 800478c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479c:	b29a      	uxth	r2, r3
 800479e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	e042      	b.n	800482c <USB_EPStartXfer+0x1230>
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <USB_EPStartXfer+0x11ca>
 80047bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c0:	3301      	adds	r3, #1
 80047c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e023      	b.n	800482c <USB_EPStartXfer+0x1230>
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d11e      	bne.n	800482c <USB_EPStartXfer+0x1230>
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047fe:	4413      	add	r3, r2
 8004800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004804:	463b      	mov	r3, r7
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	011a      	lsls	r2, r3, #4
 800480c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004810:	4413      	add	r3, r2
 8004812:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800481a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481e:	b29a      	uxth	r2, r3
 8004820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e001      	b.n	800482c <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e02e      	b.n	800488a <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	463b      	mov	r3, r7
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800484a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800484e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004852:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004856:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800485a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800485e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004862:	1d3b      	adds	r3, r7, #4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	463b      	mov	r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <USB_EPSetStall>:

HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d020      	beq.n	80048e8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048bc:	81bb      	strh	r3, [r7, #12]
 80048be:	89bb      	ldrh	r3, [r7, #12]
 80048c0:	f083 0310 	eor.w	r3, r3, #16
 80048c4:	81bb      	strh	r3, [r7, #12]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	89bb      	ldrh	r3, [r7, #12]
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
 80048e6:	e01f      	b.n	8004928 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	81fb      	strh	r3, [r7, #14]
 8004900:	89fb      	ldrh	r3, [r7, #14]
 8004902:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004906:	81fb      	strh	r3, [r7, #14]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <USB_EPClearStall>:

HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep){
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	7b1b      	ldrb	r3, [r3, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 809d 	bne.w	8004a82 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d04c      	beq.n	80049ea <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	823b      	strh	r3, [r7, #16]
 800495e:	8a3b      	ldrh	r3, [r7, #16]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <USB_EPClearStall+0x6c>
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	81fb      	strh	r3, [r7, #14]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	78db      	ldrb	r3, [r3, #3]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d06c      	beq.n	8004a82 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049be:	81bb      	strh	r3, [r7, #12]
 80049c0:	89bb      	ldrh	r3, [r7, #12]
 80049c2:	f083 0320 	eor.w	r3, r3, #32
 80049c6:	81bb      	strh	r3, [r7, #12]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	89bb      	ldrh	r3, [r7, #12]
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
 80049e8:	e04b      	b.n	8004a82 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	82fb      	strh	r3, [r7, #22]
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01b      	beq.n	8004a3a <USB_EPClearStall+0x106>
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	82bb      	strh	r3, [r7, #20]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8abb      	ldrh	r3, [r7, #20]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a50:	827b      	strh	r3, [r7, #18]
 8004a52:	8a7b      	ldrh	r3, [r7, #18]
 8004a54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a58:	827b      	strh	r3, [r7, #18]
 8004a5a:	8a7b      	ldrh	r3, [r7, #18]
 8004a5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a60:	827b      	strh	r3, [r7, #18]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8a7b      	ldrh	r3, [r7, #18]
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <USB_SetDevAddress>:

HAL_StatusTypeDef USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address){
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <USB_DevConnect>:

HAL_StatusTypeDef USB_DevConnect(USB_TypeDef *USBx){
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <USB_DevDisconnect>:

HAL_StatusTypeDef USB_DevDisconnect(USB_TypeDef *USBx){
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <USB_ReadInterrupts>:

uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx){
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <USB_EP0_OutStart>:

HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <USB_WritePMA>:

void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes){
 8004b10:	b480      	push	{r7}
 8004b12:	b08b      	sub	sp, #44	; 0x2c
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	460b      	mov	r3, r1
 8004b20:	80fb      	strh	r3, [r7, #6]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004b26:	88bb      	ldrh	r3, [r7, #4]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	005a      	lsls	r2, r3, #1
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b42:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e01e      	b.n	8004b88 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	b21a      	sxth	r2, r3
 8004b5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	8a7a      	ldrh	r2, [r7, #18]
 8004b68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	3302      	adds	r3, #2
 8004b74:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	3b01      	subs	r3, #1
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1dd      	bne.n	8004b4a <USB_WritePMA+0x3a>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	372c      	adds	r7, #44	; 0x2c
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <USB_ReadPMA>:

void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b08b      	sub	sp, #44	; 0x2c
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	460b      	mov	r3, r1
 8004baa:	80fb      	strh	r3, [r7, #6]
 8004bac:	4613      	mov	r3, r2
 8004bae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004bb0:	88bb      	ldrh	r3, [r7, #4]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	005a      	lsls	r2, r3, #1
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bcc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	e01b      	b.n	8004c0c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	3302      	adds	r3, #2
 8004be0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3301      	adds	r3, #1
 8004bee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	3302      	adds	r3, #2
 8004c04:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e0      	bne.n	8004bd4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004c12:	88bb      	ldrh	r3, [r7, #4]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	701a      	strb	r2, [r3, #0]
  }
}
 8004c2e:	bf00      	nop
 8004c30:	372c      	adds	r7, #44	; 0x2c
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <USBD_Init>:

USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id){
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL){
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <USBD_Init+0x18>
    return USBD_FAIL;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e01a      	b.n	8004c86 <USBD_Init+0x4e>
  }
  /* Unlink previous class*/
  if (pdev->pClass != NULL){
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <USBD_Init+0x2a>
    pdev->pClass = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }
  /* Assign USBD Descriptors */
  if (pdesc != NULL){
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <USBD_Init+0x38>
    pdev->pDesc = pdesc;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }
  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	79fa      	ldrb	r2, [r7, #7]
 8004c7c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fb60 	bl	8005344 <USBD_LL_Init>
  return USBD_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <USBD_RegisterClass>:

USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass){
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL){
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <USBD_RegisterClass+0x22>
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e001      	b.n	8004cb4 <USBD_RegisterClass+0x26>
  }
  else{
    status = USBD_FAIL;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <USBD_Start>:

USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fb83 	bl	80053d4 <USBD_LL_Start>
  return USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_RunTestMode>:

USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev){
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);
  return USBD_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	73fb      	strb	r3, [r7, #15]
  if (pdev->pClass != NULL){
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <USBD_SetClassConfig+0x34>
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	4611      	mov	r1, r2
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <USBD_ClrClassConfig>:

USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	4611      	mov	r1, r2
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
  return USBD_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USBD_LL_SetupStage>:

USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup){
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 f99c 	bl	80060a0 <USBD_ParseSetupRequest>
  pdev->ep0_state = USBD_EP0_SETUP;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU){
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d016      	beq.n	8004dba <USBD_LL_SetupStage+0x6a>
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d81c      	bhi.n	8004dca <USBD_LL_SetupStage+0x7a>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <USBD_LL_SetupStage+0x4a>
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d008      	beq.n	8004daa <USBD_LL_SetupStage+0x5a>
 8004d98:	e017      	b.n	8004dca <USBD_LL_SetupStage+0x7a>
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fc7e 	bl	80056a4 <USBD_StdDevReq>
      break;
 8004da8:	e01a      	b.n	8004de0 <USBD_LL_SetupStage+0x90>
    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fce0 	bl	8005778 <USBD_StdItfReq>
      break;
 8004db8:	e012      	b.n	8004de0 <USBD_LL_SetupStage+0x90>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fd20 	bl	8005808 <USBD_StdEPReq>
      break;
 8004dc8:	e00a      	b.n	8004de0 <USBD_LL_SetupStage+0x90>
    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fb5b 	bl	8005494 <USBD_LL_StallEP>
      break;
 8004dde:	bf00      	nop
  }
  return USBD_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <USBD_LL_DataOutStage>:

USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata){
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	460b      	mov	r3, r1
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  if (epnum == 0U){
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d14b      	bne.n	8004e96 <USBD_LL_DataOutStage+0xac>
    pep = &pdev->ep_out[0];
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e04:	617b      	str	r3, [r7, #20]
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d134      	bne.n	8004e7a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d919      	bls.n	8004e50 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	1ad2      	subs	r2, r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	60da      	str	r2, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d203      	bcs.n	8004e3e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	e002      	b.n	8004e44 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f001 fc91 	bl	8006770 <USBD_CtlContinueRx>
 8004e4e:	e038      	b.n	8004ec2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d105      	bne.n	8004e72 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f001 fc8e 	bl	8006794 <USBD_CtlSendStatus>
 8004e78:	e023      	b.n	8004ec2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d11e      	bne.n	8004ec2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fb00 	bl	8005494 <USBD_LL_StallEP>
 8004e94:	e015      	b.n	8004ec2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00d      	beq.n	8004ebe <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED)){
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d108      	bne.n	8004ebe <USBD_LL_DataOutStage+0xd4>
    pdev->pClass->DataOut(pdev, epnum);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	7afa      	ldrb	r2, [r7, #11]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	4798      	blx	r3
 8004ebc:	e001      	b.n	8004ec2 <USBD_LL_DataOutStage+0xd8>
  }
  else{
    /* should never be in this condition */
    return USBD_FAIL;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e000      	b.n	8004ec4 <USBD_LL_DataOutStage+0xda>
  }
  return USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <USBD_LL_DataInStage>:

USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  if (epnum == 0U){
 8004eda:	7afb      	ldrb	r3, [r7, #11]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d17f      	bne.n	8004fe0 <USBD_LL_DataInStage+0x114>
    pep = &pdev->ep_in[0];
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	617b      	str	r3, [r7, #20]
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d15c      	bne.n	8004faa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d915      	bls.n	8004f28 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	1ad2      	subs	r2, r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	60da      	str	r2, [r3, #12]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f001 fc19 	bl	800674c <USBD_CtlContinueSendData>
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2100      	movs	r1, #0
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fb63 	bl	80055ec <USBD_LL_PrepareReceive>
 8004f26:	e04e      	b.n	8004fc6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	6912      	ldr	r2, [r2, #16]
 8004f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f34:	fb02 f201 	mul.w	r2, r2, r1
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11c      	bne.n	8004f78 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d316      	bcc.n	8004f78 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d20f      	bcs.n	8004f78 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f001 fbf5 	bl	800674c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2100      	movs	r1, #0
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fb3b 	bl	80055ec <USBD_LL_PrepareReceive>
 8004f76:	e026      	b.n	8004fc6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d105      	bne.n	8004f9a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fa79 	bl	8005494 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f001 fc09 	bl	80067ba <USBD_CtlReceiveStatus>
 8004fa8:	e00d      	b.n	8004fc6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d004      	beq.n	8004fbe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fa67 	bl	8005494 <USBD_LL_StallEP>
      }
    }
    if (pdev->dev_test_mode == 1U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d11d      	bne.n	800500c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fe81 	bl	8004cd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004fde:	e015      	b.n	800500c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED)){
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d108      	bne.n	8005008 <USBD_LL_DataInStage+0x13c>
    pdev->pClass->DataIn(pdev, epnum);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	7afa      	ldrb	r2, [r7, #11]
 8005000:	4611      	mov	r1, r2
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	4798      	blx	r3
 8005006:	e001      	b.n	800500c <USBD_LL_DataInStage+0x140>
  }
  else{
    /* should never be in this condition */
    return USBD_FAIL;
 8005008:	2302      	movs	r3, #2
 800500a:	e000      	b.n	800500e <USBD_LL_DataInStage+0x142>
  }
  return USBD_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev){
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800501e:	2340      	movs	r3, #64	; 0x40
 8005020:	2200      	movs	r2, #0
 8005022:	2100      	movs	r1, #0
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9f0 	bl	800540a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2240      	movs	r2, #64	; 0x40
 8005036:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800503a:	2340      	movs	r3, #64	; 0x40
 800503c:	2200      	movs	r2, #0
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f9e2 	bl	800540a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2240      	movs	r2, #64	; 0x40
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  if (pdev->pClassData){
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <USBD_LL_Reset+0x78>
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6852      	ldr	r2, [r2, #4]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	4611      	mov	r1, r2
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
  }
  return USBD_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USBD_LL_SetSpeed>:

USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev, USBD_SpeedTypeDef speed){
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <USBD_LL_Suspend>:

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev){
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2204      	movs	r2, #4
 80050ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  return USBD_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <USBD_LL_Resume>:

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev){
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED){
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d105      	bne.n	80050fc <USBD_LL_Resume+0x1e>
    pdev->dev_state = pdev->dev_old_state;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }
  return USBD_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <USBD_LL_SOF>:

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev){
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED){
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005116:	2b03      	cmp	r3, #3
 8005118:	d10b      	bne.n	8005132 <USBD_LL_SOF+0x2a>
    if (pdev->pClass->SOF != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_PCD_MspInit>:

PCD_HandleTypeDef hpcd_USB_FS;
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle){
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)  {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0d      	ldr	r2, [pc, #52]	; (8005180 <HAL_PCD_MspInit+0x44>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d113      	bne.n	8005176 <HAL_PCD_MspInit+0x3a>
    __HAL_RCC_USB_CLK_ENABLE();
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <HAL_PCD_MspInit+0x48>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <HAL_PCD_MspInit+0x48>)
 8005154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005158:	61d3      	str	r3, [r2, #28]
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_PCD_MspInit+0x48>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	2014      	movs	r0, #20
 800516c:	f7fb f9d7 	bl	800051e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005170:	2014      	movs	r0, #20
 8005172:	f7fb f9f0 	bl	8000556 <HAL_NVIC_EnableIRQ>
  }
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40005c00 	.word	0x40005c00
 8005184:	40021000 	.word	0x40021000

08005188 <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd){
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f7ff fdd6 	bl	8004d50 <USBD_LL_SetupStage>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum){
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f7ff fe08 	bl	8004dea <USBD_LL_DataOutStage>
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum){
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	440b      	add	r3, r1
 8005202:	333c      	adds	r3, #60	; 0x3c
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	4619      	mov	r1, r3
 800520a:	f7ff fe5f 	bl	8004ecc <USBD_LL_DataInStage>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd){
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff6f 	bl	8005108 <USBD_LL_SOF>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd){
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)  {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d001      	beq.n	800524a <HAL_PCD_ResetCallback+0x18>
    Error_Handler();
 8005246:	f7fb f85f 	bl	8000308 <Error_Handler>
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff1f 	bl	8005098 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fed8 	bl	8005016 <USBD_LL_Reset>
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_PCD_SuspendCallback>:

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd){
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ff19 	bl	80050b6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)  {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_PCD_SuspendCallback+0x30>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	4a03      	ldr	r2, [pc, #12]	; (80052a0 <HAL_PCD_SuspendCallback+0x30>)
 8005292:	f043 0306 	orr.w	r3, r3, #6
 8005296:	6113      	str	r3, [r2, #16]
  }
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ff13 	bl	80050de <USBD_LL_Resume>
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr, uint16_t ep_kind, uint32_t pmaadress){
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	4613      	mov	r3, r2
 80052d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  if ((0x80U & ep_addr) == 0x80U)  {
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_PCDEx_PMAConfig+0x36>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052de:	897b      	ldrh	r3, [r7, #10]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e009      	b.n	800530a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052f6:	897a      	ldrh	r2, [r7, #10]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
  }
  if (ep_kind == PCD_SNG_BUF)  {
 800530a:	893b      	ldrh	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d107      	bne.n	8005320 <HAL_PCDEx_PMAConfig+0x60>
    ep->doublebuffer = 0U;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	731a      	strb	r2, [r3, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	b29a      	uxth	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	80da      	strh	r2, [r3, #6]
 800531e:	e00b      	b.n	8005338 <HAL_PCDEx_PMAConfig+0x78>
  }
  else {
    ep->doublebuffer = 1U;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2201      	movs	r2, #1
 8005324:	731a      	strb	r2, [r3, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	b29a      	uxth	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	b29a      	uxth	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	815a      	strh	r2, [r3, #10]
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <USBD_LL_Init>:

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  hpcd_USB_FS.pData = pdev;
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <USBD_LL_Init+0x88>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <USBD_LL_Init+0x88>)
 8005358:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800535c:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <USBD_LL_Init+0x88>)
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <USBD_LL_Init+0x8c>)
 8005360:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005362:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <USBD_LL_Init+0x88>)
 8005364:	2208      	movs	r2, #8
 8005366:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005368:	4b18      	ldr	r3, [pc, #96]	; (80053cc <USBD_LL_Init+0x88>)
 800536a:	2202      	movs	r2, #2
 800536c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800536e:	4b17      	ldr	r3, [pc, #92]	; (80053cc <USBD_LL_Init+0x88>)
 8005370:	2200      	movs	r2, #0
 8005372:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005374:	4b15      	ldr	r3, [pc, #84]	; (80053cc <USBD_LL_Init+0x88>)
 8005376:	2200      	movs	r2, #0
 8005378:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800537a:	4b14      	ldr	r3, [pc, #80]	; (80053cc <USBD_LL_Init+0x88>)
 800537c:	2200      	movs	r2, #0
 800537e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)  {
 8005380:	4812      	ldr	r0, [pc, #72]	; (80053cc <USBD_LL_Init+0x88>)
 8005382:	f7fb fd95 	bl	8000eb0 <HAL_PCD_Init>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <USBD_LL_Init+0x4c>
    Error_Handler( );
 800538c:	f7fa ffbc 	bl	8000308 <Error_Handler>
  }
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005396:	2318      	movs	r3, #24
 8005398:	2200      	movs	r2, #0
 800539a:	2100      	movs	r1, #0
 800539c:	f7ff ff90 	bl	80052c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053a6:	2358      	movs	r3, #88	; 0x58
 80053a8:	2200      	movs	r2, #0
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	f7ff ff88 	bl	80052c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ba:	2200      	movs	r2, #0
 80053bc:	2181      	movs	r1, #129	; 0x81
 80053be:	f7ff ff7f 	bl	80052c0 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	2000045c 	.word	0x2000045c
 80053d0:	40005c00 	.word	0x40005c00

080053d4 <USBD_LL_Start>:

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_Start(pdev->pData);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb fe5f 	bl	80010ae <HAL_PCD_Start>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f928 	bl	800564c <USBD_Get_USB_Status>
 80053fc:	4603      	mov	r3, r0
 80053fe:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005400:	7bbb      	ldrb	r3, [r7, #14]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_LL_OpenEP>:

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps){
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	461a      	mov	r2, r3
 8005418:	4603      	mov	r3, r0
 800541a:	70fb      	strb	r3, [r7, #3]
 800541c:	460b      	mov	r3, r1
 800541e:	70bb      	strb	r3, [r7, #2]
 8005420:	4613      	mov	r3, r2
 8005422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005432:	78f9      	ldrb	r1, [r7, #3]
 8005434:	883a      	ldrh	r2, [r7, #0]
 8005436:	78bb      	ldrb	r3, [r7, #2]
 8005438:	f7fb ffb2 	bl	80013a0 <HAL_PCD_EP_Open>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f902 	bl	800564c <USBD_Get_USB_Status>
 8005448:	4603      	mov	r3, r0
 800544a:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 800544c:	7bbb      	ldrb	r3, [r7, #14]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb fff0 	bl	800145a <HAL_PCD_EP_Close>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f8e3 	bl	800564c <USBD_Get_USB_Status>
 8005486:	4603      	mov	r3, r0
 8005488:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 800548a:	7bbb      	ldrb	r3, [r7, #14]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_LL_StallEP>:

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	4611      	mov	r1, r2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fc f881 	bl	80015ba <HAL_PCD_EP_SetStall>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f8c4 	bl	800564c <USBD_Get_USB_Status>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fc f8c2 	bl	800167a <HAL_PCD_EP_ClrStall>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f8a5 	bl	800564c <USBD_Get_USB_Status>
 8005502:	4603      	mov	r3, r0
 8005504:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 8005506:	7bbb      	ldrb	r3, [r7, #14]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr){
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005522:	60fb      	str	r3, [r7, #12]
  if((ep_addr & 0x80) == 0x80)  {
 8005524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005528:	2b00      	cmp	r3, #0
 800552a:	da0c      	bge.n	8005546 <USBD_LL_IsStallEP+0x36>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	440b      	add	r3, r1
 8005540:	3302      	adds	r3, #2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	e00b      	b.n	800555e <USBD_LL_IsStallEP+0x4e>
  }
  else  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800555c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr){
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f7fb fee5 	bl	8001356 <HAL_PCD_SetAddress>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f85a 	bl	800564c <USBD_Get_USB_Status>
 8005598:	4603      	mov	r3, r0
 800559a:	73bb      	strb	r3, [r7, #14]
  return usb_status;
 800559c:	7bbb      	ldrb	r3, [r7, #14]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size){
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	460b      	mov	r3, r1
 80055b4:	72fb      	strb	r3, [r7, #11]
 80055b6:	4613      	mov	r3, r2
 80055b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80055c8:	7af9      	ldrb	r1, [r7, #11]
 80055ca:	893b      	ldrh	r3, [r7, #8]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	f7fb ffbd 	bl	800154c <HAL_PCD_EP_Transmit>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f837 	bl	800564c <USBD_Get_USB_Status>
 80055de:	4603      	mov	r3, r0
 80055e0:	75bb      	strb	r3, [r7, #22]
  return usb_status;
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	461a      	mov	r2, r3
 80055f8:	460b      	mov	r3, r1
 80055fa:	72fb      	strb	r3, [r7, #11]
 80055fc:	4613      	mov	r3, r2
 80055fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800560e:	7af9      	ldrb	r1, [r7, #11]
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	f7fb ff69 	bl	80014ea <HAL_PCD_EP_Receive>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f814 	bl	800564c <USBD_Get_USB_Status>
 8005624:	4603      	mov	r3, r0
 8005626:	75bb      	strb	r3, [r7, #22]
  return usb_status;
 8005628:	7dbb      	ldrb	r3, [r7, #22]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size){
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <USBD_static_malloc+0x14>)
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	2000017c 	.word	0x2000017c

0800564c <USBD_Get_USB_Status>:

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status){
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  switch (hal_status)  {
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	2b03      	cmp	r3, #3
 800565e:	d817      	bhi.n	8005690 <USBD_Get_USB_Status+0x44>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <USBD_Get_USB_Status+0x1c>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	08005679 	.word	0x08005679
 800566c:	0800567f 	.word	0x0800567f
 8005670:	08005685 	.word	0x08005685
 8005674:	0800568b 	.word	0x0800568b
    case HAL_OK :
      usb_status = USBD_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	e00b      	b.n	8005696 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800567e:	2302      	movs	r3, #2
 8005680:	73fb      	strb	r3, [r7, #15]
      break;
 8005682:	e008      	b.n	8005696 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	e005      	b.n	8005696 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800568a:	2302      	movs	r3, #2
 800568c:	73fb      	strb	r3, [r7, #15]
      break;
 800568e:	e002      	b.n	8005696 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005690:	2302      	movs	r3, #2
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	bf00      	nop
  }
  return usb_status;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop

080056a4 <USBD_StdDevReq>:
static void USBD_GetConfig(USBD_HandleTypeDef *pdev,     USBD_SetupReqTypedef *req);
static void USBD_GetStatus(USBD_HandleTypeDef *pdev,     USBD_SetupReqTypedef *req);
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,    USBD_SetupReqTypedef *req);
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,    USBD_SetupReqTypedef *req);
static uint8_t USBD_GetLen(uint8_t *buf);
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d005      	beq.n	80056ca <USBD_StdDevReq+0x26>
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d84f      	bhi.n	8005762 <USBD_StdDevReq+0xbe>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <USBD_StdDevReq+0x36>
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d14b      	bne.n	8005762 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4798      	blx	r3
      break;
 80056d8:	e048      	b.n	800576c <USBD_StdDevReq+0xc8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest){
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b09      	cmp	r3, #9
 80056e0:	d839      	bhi.n	8005756 <USBD_StdDevReq+0xb2>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <USBD_StdDevReq+0x44>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	08005739 	.word	0x08005739
 80056ec:	0800574d 	.word	0x0800574d
 80056f0:	08005757 	.word	0x08005757
 80056f4:	08005743 	.word	0x08005743
 80056f8:	08005757 	.word	0x08005757
 80056fc:	0800571b 	.word	0x0800571b
 8005700:	08005711 	.word	0x08005711
 8005704:	08005757 	.word	0x08005757
 8005708:	0800572f 	.word	0x0800572f
 800570c:	08005725 	.word	0x08005725
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9dc 	bl	8005ad0 <USBD_GetDescriptor>
          break;
 8005718:	e022      	b.n	8005760 <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fb3f 	bl	8005da0 <USBD_SetAddress>
          break;
 8005722:	e01d      	b.n	8005760 <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb7e 	bl	8005e28 <USBD_SetConfig>
          break;
 800572c:	e018      	b.n	8005760 <USBD_StdDevReq+0xbc>
        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fc07 	bl	8005f44 <USBD_GetConfig>
          break;
 8005736:	e013      	b.n	8005760 <USBD_StdDevReq+0xbc>
        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fc37 	bl	8005fae <USBD_GetStatus>
          break;
 8005740:	e00e      	b.n	8005760 <USBD_StdDevReq+0xbc>
        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fc65 	bl	8006014 <USBD_SetFeature>
          break;
 800574a:	e009      	b.n	8005760 <USBD_StdDevReq+0xbc>
        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fc74 	bl	800603c <USBD_ClrFeature>
          break;
 8005754:	e004      	b.n	8005760 <USBD_StdDevReq+0xbc>
        default:
          USBD_CtlError(pdev, req);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fc90 	bl	800607e <USBD_CtlError>
          break;
 800575e:	bf00      	nop
      }
      break;
 8005760:	e004      	b.n	800576c <USBD_StdDevReq+0xc8>
    default:
      USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc8a 	bl	800607e <USBD_CtlError>
      break;
 800576a:	bf00      	nop
  }
  return ret;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop

08005778 <USBD_StdItfReq>:

USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req){
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)  {
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d005      	beq.n	800579e <USBD_StdItfReq+0x26>
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d82e      	bhi.n	80057f4 <USBD_StdItfReq+0x7c>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <USBD_StdItfReq+0x26>
 800579a:	2b20      	cmp	r3, #32
 800579c:	d12a      	bne.n	80057f4 <USBD_StdItfReq+0x7c>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)      {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a4:	3b01      	subs	r3, #1
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d81d      	bhi.n	80057e6 <USBD_StdItfReq+0x6e>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)          {
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	889b      	ldrh	r3, [r3, #4]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d813      	bhi.n	80057dc <USBD_StdItfReq+0x64>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	88db      	ldrh	r3, [r3, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d110      	bne.n	80057f0 <USBD_StdItfReq+0x78>
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 ffdd 	bl	8006794 <USBD_CtlSendStatus>
            }
          }
          else          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057da:	e009      	b.n	80057f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fc4d 	bl	800607e <USBD_CtlError>
          break;
 80057e4:	e004      	b.n	80057f0 <USBD_StdItfReq+0x78>
        default:
          USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fc48 	bl	800607e <USBD_CtlError>
          break;
 80057ee:	e000      	b.n	80057f2 <USBD_StdItfReq+0x7a>
          break;
 80057f0:	bf00      	nop
      }
      break;
 80057f2:	e004      	b.n	80057fe <USBD_StdItfReq+0x86>
    default:
      USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fc41 	bl	800607e <USBD_CtlError>
      break;
 80057fc:	bf00      	nop
  }
  return USBD_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBD_StdEPReq>:

USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req){
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	889b      	ldrh	r3, [r3, #4]
 800581a:	73bb      	strb	r3, [r7, #14]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)  {
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <USBD_StdEPReq+0x30>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	f200 8146 	bhi.w	8005aba <USBD_StdEPReq+0x2b2>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <USBD_StdEPReq+0x40>
 8005832:	2b20      	cmp	r3, #32
 8005834:	f040 8141 	bne.w	8005aba <USBD_StdEPReq+0x2b2>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
      break;
 8005846:	e13d      	b.n	8005ac4 <USBD_StdEPReq+0x2bc>
    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)      {
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005850:	2b20      	cmp	r3, #32
 8005852:	d10a      	bne.n	800586a <USBD_StdEPReq+0x62>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	73fb      	strb	r3, [r7, #15]
        return ret;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	e12d      	b.n	8005ac6 <USBD_StdEPReq+0x2be>
      }
      switch (req->bRequest)      {
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d007      	beq.n	8005882 <USBD_StdEPReq+0x7a>
 8005872:	2b03      	cmp	r3, #3
 8005874:	f300 811b 	bgt.w	8005aae <USBD_StdEPReq+0x2a6>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d072      	beq.n	8005962 <USBD_StdEPReq+0x15a>
 800587c:	2b01      	cmp	r3, #1
 800587e:	d03a      	beq.n	80058f6 <USBD_StdEPReq+0xee>
 8005880:	e115      	b.n	8005aae <USBD_StdEPReq+0x2a6>
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)          {
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005888:	2b02      	cmp	r3, #2
 800588a:	d002      	beq.n	8005892 <USBD_StdEPReq+0x8a>
 800588c:	2b03      	cmp	r3, #3
 800588e:	d015      	beq.n	80058bc <USBD_StdEPReq+0xb4>
 8005890:	e02b      	b.n	80058ea <USBD_StdEPReq+0xe2>
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00c      	beq.n	80058b2 <USBD_StdEPReq+0xaa>
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d009      	beq.n	80058b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fdf6 	bl	8005494 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fdf2 	bl	8005494 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058b0:	e020      	b.n	80058f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fbe2 	bl	800607e <USBD_CtlError>
              break;
 80058ba:	e01b      	b.n	80058f4 <USBD_StdEPReq+0xec>
            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	885b      	ldrh	r3, [r3, #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10e      	bne.n	80058e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <USBD_StdEPReq+0xda>
 80058ca:	7bbb      	ldrb	r3, [r7, #14]
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d008      	beq.n	80058e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	88db      	ldrh	r3, [r3, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fdd9 	bl	8005494 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 ff56 	bl	8006794 <USBD_CtlSendStatus>
              break;
 80058e8:	e004      	b.n	80058f4 <USBD_StdEPReq+0xec>
            default:
              USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fbc6 	bl	800607e <USBD_CtlError>
              break;
 80058f2:	bf00      	nop
          }
          break;
 80058f4:	e0e0      	b.n	8005ab8 <USBD_StdEPReq+0x2b0>
        case USB_REQ_CLEAR_FEATURE:
          switch (pdev->dev_state)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d002      	beq.n	8005906 <USBD_StdEPReq+0xfe>
 8005900:	2b03      	cmp	r3, #3
 8005902:	d015      	beq.n	8005930 <USBD_StdEPReq+0x128>
 8005904:	e026      	b.n	8005954 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <USBD_StdEPReq+0x11e>
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d009      	beq.n	8005926 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fdbc 	bl	8005494 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff fdb8 	bl	8005494 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005924:	e01c      	b.n	8005960 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fba8 	bl	800607e <USBD_CtlError>
              break;
 800592e:	e017      	b.n	8005960 <USBD_StdEPReq+0x158>
            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	885b      	ldrh	r3, [r3, #2]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d112      	bne.n	800595e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593e:	2b00      	cmp	r3, #0
 8005940:	d004      	beq.n	800594c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fdc3 	bl	80054d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 ff21 	bl	8006794 <USBD_CtlSendStatus>
              }
              break;
 8005952:	e004      	b.n	800595e <USBD_StdEPReq+0x156>
            default:
              USBD_CtlError(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fb91 	bl	800607e <USBD_CtlError>
              break;
 800595c:	e000      	b.n	8005960 <USBD_StdEPReq+0x158>
              break;
 800595e:	bf00      	nop
          }
          break;
 8005960:	e0aa      	b.n	8005ab8 <USBD_StdEPReq+0x2b0>
        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005968:	2b02      	cmp	r3, #2
 800596a:	d002      	beq.n	8005972 <USBD_StdEPReq+0x16a>
 800596c:	2b03      	cmp	r3, #3
 800596e:	d032      	beq.n	80059d6 <USBD_StdEPReq+0x1ce>
 8005970:	e097      	b.n	8005aa2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <USBD_StdEPReq+0x180>
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	2b80      	cmp	r3, #128	; 0x80
 800597c:	d004      	beq.n	8005988 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb7c 	bl	800607e <USBD_CtlError>
                break;
 8005986:	e091      	b.n	8005aac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598c:	2b00      	cmp	r3, #0
 800598e:	da0b      	bge.n	80059a8 <USBD_StdEPReq+0x1a0>
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	3310      	adds	r3, #16
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	3304      	adds	r3, #4
 80059a6:	e00b      	b.n	80059c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	3304      	adds	r3, #4
 80059c0:	60bb      	str	r3, [r7, #8]
              pep->status = 0x0000U;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2202      	movs	r2, #2
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fea0 	bl	8006714 <USBD_CtlSendData>
              break;
 80059d4:	e06a      	b.n	8005aac <USBD_StdEPReq+0x2a4>
            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da11      	bge.n	8005a02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	3318      	adds	r3, #24
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d117      	bne.n	8005a28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb3f 	bl	800607e <USBD_CtlError>
                  break;
 8005a00:	e054      	b.n	8005aac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	f003 020f 	and.w	r2, r3, #15
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb2c 	bl	800607e <USBD_CtlError>
                  break;
 8005a26:	e041      	b.n	8005aac <USBD_StdEPReq+0x2a4>
                }
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	da0b      	bge.n	8005a48 <USBD_StdEPReq+0x240>
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	3310      	adds	r3, #16
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	4413      	add	r3, r2
 8005a44:	3304      	adds	r3, #4
 8005a46:	e00b      	b.n	8005a60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3304      	adds	r3, #4
 8005a60:	60bb      	str	r3, [r7, #8]
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <USBD_StdEPReq+0x266>
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	2b80      	cmp	r3, #128	; 0x80
 8005a6c:	d103      	bne.n	8005a76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e00e      	b.n	8005a94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fd48 	bl	8005510 <USBD_LL_IsStallEP>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e002      	b.n	8005a94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
              }
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2202      	movs	r2, #2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fe3a 	bl	8006714 <USBD_CtlSendData>
              break;
 8005aa0:	e004      	b.n	8005aac <USBD_StdEPReq+0x2a4>
            default:
              USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 faea 	bl	800607e <USBD_CtlError>
              break;
 8005aaa:	bf00      	nop
          }
          break;
 8005aac:	e004      	b.n	8005ab8 <USBD_StdEPReq+0x2b0>
        default:
          USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fae4 	bl	800607e <USBD_CtlError>
          break;
 8005ab6:	bf00      	nop
      }
      break;
 8005ab8:	e004      	b.n	8005ac4 <USBD_StdEPReq+0x2bc>
    default:
      USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fade 	bl	800607e <USBD_CtlError>
      break;
 8005ac2:	bf00      	nop
  }
  return ret;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <USBD_GetDescriptor>:

static void USBD_GetDescriptor    (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	72fb      	strb	r3, [r7, #11]
  switch (req->wValue >> 8)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	885b      	ldrh	r3, [r3, #2]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	f200 8128 	bhi.w	8005d46 <USBD_GetDescriptor+0x276>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <USBD_GetDescriptor+0x2c>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005d47 	.word	0x08005d47
 8005b0c:	08005d47 	.word	0x08005d47
 8005b10:	08005ce7 	.word	0x08005ce7
 8005b14:	08005d13 	.word	0x08005d13
  {
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	7c12      	ldrb	r2, [r2, #16]
 8005b24:	f107 0108 	add.w	r1, r7, #8
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
 8005b2c:	60f8      	str	r0, [r7, #12]
      break;
 8005b2e:	e112      	b.n	8005d56 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	7c1b      	ldrb	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f107 0208 	add.w	r2, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	2202      	movs	r2, #2
 8005b50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b52:	e100      	b.n	8005d56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	f107 0208 	add.w	r2, r7, #8
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e0f2      	b.n	8005d56 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	885b      	ldrh	r3, [r3, #2]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	f200 80ac 	bhi.w	8005cd4 <USBD_GetDescriptor+0x204>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <USBD_GetDescriptor+0xb4>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b9d 	.word	0x08005b9d
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005c05 	.word	0x08005c05
 8005b90:	08005c39 	.word	0x08005c39
 8005b94:	08005c6d 	.word	0x08005c6d
 8005b98:	08005ca1 	.word	0x08005ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bbe:	e091      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa5b 	bl	800607e <USBD_CtlError>
            err++;
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bce:	e089      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	7c12      	ldrb	r2, [r2, #16]
 8005be8:	f107 0108 	add.w	r1, r7, #8
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bf2:	e077      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa41 	bl	800607e <USBD_CtlError>
            err++;
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	72fb      	strb	r3, [r7, #11]
          break;
 8005c02:	e06f      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	7c12      	ldrb	r2, [r2, #16]
 8005c1c:	f107 0108 	add.w	r1, r7, #8
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
 8005c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c26:	e05d      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa27 	bl	800607e <USBD_CtlError>
            err++;
 8005c30:	7afb      	ldrb	r3, [r7, #11]
 8005c32:	3301      	adds	r3, #1
 8005c34:	72fb      	strb	r3, [r7, #11]
          break;
 8005c36:	e055      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	7c12      	ldrb	r2, [r2, #16]
 8005c50:	f107 0108 	add.w	r1, r7, #8
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c5a:	e043      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa0d 	bl	800607e <USBD_CtlError>
            err++;
 8005c64:	7afb      	ldrb	r3, [r7, #11]
 8005c66:	3301      	adds	r3, #1
 8005c68:	72fb      	strb	r3, [r7, #11]
          break;
 8005c6a:	e03b      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7c12      	ldrb	r2, [r2, #16]
 8005c84:	f107 0108 	add.w	r1, r7, #8
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8e:	e029      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9f3 	bl	800607e <USBD_CtlError>
            err++;
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9e:	e021      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	7c12      	ldrb	r2, [r2, #16]
 8005cb8:	f107 0108 	add.w	r1, r7, #8
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cc2:	e00f      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9d9 	bl	800607e <USBD_CtlError>
            err++;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005cd2:	e007      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
        default:
          USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9d1 	bl	800607e <USBD_CtlError>
          err++;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8005ce2:	e038      	b.n	8005d56 <USBD_GetDescriptor+0x286>
 8005ce4:	e037      	b.n	8005d56 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7c1b      	ldrb	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	f107 0208 	add.w	r2, r7, #8
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4798      	blx	r3
 8005cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d00:	e029      	b.n	8005d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9ba 	bl	800607e <USBD_CtlError>
        err++;
 8005d0a:	7afb      	ldrb	r3, [r7, #11]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d10:	e021      	b.n	8005d56 <USBD_GetDescriptor+0x286>
    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7c1b      	ldrb	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	f107 0208 	add.w	r2, r7, #8
 8005d26:	4610      	mov	r0, r2
 8005d28:	4798      	blx	r3
 8005d2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	2207      	movs	r2, #7
 8005d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d34:	e00f      	b.n	8005d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9a0 	bl	800607e <USBD_CtlError>
        err++;
 8005d3e:	7afb      	ldrb	r3, [r7, #11]
 8005d40:	3301      	adds	r3, #1
 8005d42:	72fb      	strb	r3, [r7, #11]
      break;
 8005d44:	e007      	b.n	8005d56 <USBD_GetDescriptor+0x286>
    default:
      USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f998 	bl	800607e <USBD_CtlError>
      err++;
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	3301      	adds	r3, #1
 8005d52:	72fb      	strb	r3, [r7, #11]
      break;
 8005d54:	bf00      	nop
  }
  if (err != 0U)
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11c      	bne.n	8005d96 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005d5c:	893b      	ldrh	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d011      	beq.n	8005d86 <USBD_GetDescriptor+0x2b6>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	88db      	ldrh	r3, [r3, #6]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88da      	ldrh	r2, [r3, #6]
 8005d6e:	893b      	ldrh	r3, [r7, #8]
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bf28      	it	cs
 8005d74:	4613      	movcs	r3, r2
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fcc7 	bl	8006714 <USBD_CtlSendData>
    }
    if (req->wLength == 0U)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	88db      	ldrh	r3, [r3, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fd00 	bl	8006794 <USBD_CtlSendStatus>
 8005d94:	e000      	b.n	8005d98 <USBD_GetDescriptor+0x2c8>
    return;
 8005d96:	bf00      	nop
    }
  }
}
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop

08005da0 <USBD_SetAddress>:
static void USBD_SetAddress		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	889b      	ldrh	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d130      	bne.n	8005e14 <USBD_SetAddress+0x74>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	88db      	ldrh	r3, [r3, #6]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12c      	bne.n	8005e14 <USBD_SetAddress+0x74>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc0:	d828      	bhi.n	8005e14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	885b      	ldrh	r3, [r3, #2]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dcc:	73fb      	strb	r3, [r7, #15]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d104      	bne.n	8005de2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f94f 	bl	800607e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de0:	e01d      	b.n	8005e1e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7bfa      	ldrb	r2, [r7, #15]
 8005de6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fbba 	bl	8005568 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fccd 	bl	8006794 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e08:	e009      	b.n	8005e1e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	e004      	b.n	8005e1e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f931 	bl	800607e <USBD_CtlError>
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <USBD_SetConfig>:

static void USBD_SetConfig		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;
  cfgidx = (uint8_t)(req->wValue);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	885b      	ldrh	r3, [r3, #2]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <USBD_SetConfig+0x118>)
 8005e3a:	701a      	strb	r2, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e3c:	4b40      	ldr	r3, [pc, #256]	; (8005f40 <USBD_SetConfig+0x118>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d904      	bls.n	8005e4e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f919 	bl	800607e <USBD_CtlError>
 8005e4c:	e075      	b.n	8005f3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d002      	beq.n	8005e5e <USBD_SetConfig+0x36>
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d023      	beq.n	8005ea4 <USBD_SetConfig+0x7c>
 8005e5c:	e062      	b.n	8005f24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005e5e:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <USBD_SetConfig+0x118>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01a      	beq.n	8005e9c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005e66:	4b36      	ldr	r3, [pc, #216]	; (8005f40 <USBD_SetConfig+0x118>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2203      	movs	r2, #3
 8005e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e78:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <USBD_SetConfig+0x118>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fe ff34 	bl	8004cec <USBD_SetClassConfig>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d104      	bne.n	8005e94 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f8f6 	bl	800607e <USBD_CtlError>
            return;
 8005e92:	e052      	b.n	8005f3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fc7d 	bl	8006794 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005e9a:	e04e      	b.n	8005f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fc79 	bl	8006794 <USBD_CtlSendStatus>
        break;
 8005ea2:	e04a      	b.n	8005f3a <USBD_SetConfig+0x112>
      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005ea4:	4b26      	ldr	r3, [pc, #152]	; (8005f40 <USBD_SetConfig+0x118>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d112      	bne.n	8005ed2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <USBD_SetConfig+0x118>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <USBD_SetConfig+0x118>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fe ff30 	bl	8004d2a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fc62 	bl	8006794 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ed0:	e033      	b.n	8005f3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <USBD_SetConfig+0x118>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d01d      	beq.n	8005f1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7fe ff1e 	bl	8004d2a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005eee:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <USBD_SetConfig+0x118>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ef8:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <USBD_SetConfig+0x118>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fe fef4 	bl	8004cec <USBD_SetClassConfig>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d104      	bne.n	8005f14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8b6 	bl	800607e <USBD_CtlError>
            return;
 8005f12:	e012      	b.n	8005f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fc3d 	bl	8006794 <USBD_CtlSendStatus>
        break;
 8005f1a:	e00e      	b.n	8005f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fc39 	bl	8006794 <USBD_CtlSendStatus>
        break;
 8005f22:	e00a      	b.n	8005f3a <USBD_SetConfig+0x112>
      default:
        USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8a9 	bl	800607e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <USBD_SetConfig+0x118>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe fef9 	bl	8004d2a <USBD_ClrClassConfig>
        break;
 8005f38:	bf00      	nop
    }
  }
}
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000190 	.word	0x20000190

08005f44 <USBD_GetConfig>:

static void USBD_GetConfig		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	88db      	ldrh	r3, [r3, #6]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d004      	beq.n	8005f60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f890 	bl	800607e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f5e:	e022      	b.n	8005fa6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	dc02      	bgt.n	8005f70 <USBD_GetConfig+0x2c>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dc03      	bgt.n	8005f76 <USBD_GetConfig+0x32>
 8005f6e:	e015      	b.n	8005f9c <USBD_GetConfig+0x58>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d00b      	beq.n	8005f8c <USBD_GetConfig+0x48>
 8005f74:	e012      	b.n	8005f9c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	2201      	movs	r2, #1
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fbc5 	bl	8006714 <USBD_CtlSendData>
        break;
 8005f8a:	e00c      	b.n	8005fa6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	2201      	movs	r2, #1
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fbbd 	bl	8006714 <USBD_CtlSendData>
        break;
 8005f9a:	e004      	b.n	8005fa6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f86d 	bl	800607e <USBD_CtlError>
        break;
 8005fa4:	bf00      	nop
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_GetStatus>:

static void USBD_GetStatus		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d81e      	bhi.n	8006002 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	88db      	ldrh	r3, [r3, #6]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d004      	beq.n	8005fd6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f855 	bl	800607e <USBD_CtlError>
        break;
 8005fd4:	e01a      	b.n	800600c <USBD_GetStatus+0x5e>
      }
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	60da      	str	r2, [r3, #12]
      if (pdev->dev_remote_wakeup)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f043 0202 	orr.w	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]
      }
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fb8a 	bl	8006714 <USBD_CtlSendData>
      break;
 8006000:	e004      	b.n	800600c <USBD_GetStatus+0x5e>
    default:
      USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f83a 	bl	800607e <USBD_CtlError>
      break;
 800600a:	bf00      	nop
  }
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_SetFeature>:

static void USBD_SetFeature		  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	885b      	ldrh	r3, [r3, #2]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d106      	bne.n	8006034 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fbb0 	bl	8006794 <USBD_CtlSendStatus>
  }
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_ClrFeature>:

static void USBD_ClrFeature       (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604c:	3b01      	subs	r3, #1
 800604e:	2b02      	cmp	r3, #2
 8006050:	d80b      	bhi.n	800606a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	885b      	ldrh	r3, [r3, #2]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10c      	bne.n	8006074 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb96 	bl	8006794 <USBD_CtlSendStatus>
      }
      break;
 8006068:	e004      	b.n	8006074 <USBD_ClrFeature+0x38>
    default:
      USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f806 	bl	800607e <USBD_CtlError>
      break;
 8006072:	e000      	b.n	8006076 <USBD_ClrFeature+0x3a>
      break;
 8006074:	bf00      	nop
  }
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_CtlError>:

void USBD_CtlError				  (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006088:	2180      	movs	r1, #128	; 0x80
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fa02 	bl	8005494 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006090:	2100      	movs	r1, #0
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff f9fe 	bl	8005494 <USBD_LL_StallEP>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_ParseSetupRequest>:

void USBD_ParseSetupRequest		  (USBD_SetupReqTypedef *req, uint8_t *pdata){
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	785a      	ldrb	r2, [r3, #1]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	3302      	adds	r3, #2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	3303      	adds	r3, #3
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	3304      	adds	r3, #4
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	3305      	adds	r3, #5
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	3306      	adds	r3, #6
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	3307      	adds	r3, #7
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	b29b      	uxth	r3, r3
 8006106:	4413      	add	r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	80da      	strh	r2, [r3, #6]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <USBD_GetString>:

void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len){
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	75fb      	strb	r3, [r7, #23]
  if (desc != NULL)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d032      	beq.n	8006194 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f834 	bl	800619c <USBD_GetLen>
 8006134:	4603      	mov	r3, r0
 8006136:	3301      	adds	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	75fa      	strb	r2, [r7, #23]
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4413      	add	r3, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	75fa      	strb	r2, [r7, #23]
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4413      	add	r3, r2
 8006160:	2203      	movs	r2, #3
 8006162:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006164:	e012      	b.n	800618c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	60fa      	str	r2, [r7, #12]
 800616c:	7dfa      	ldrb	r2, [r7, #23]
 800616e:	1c51      	adds	r1, r2, #1
 8006170:	75f9      	strb	r1, [r7, #23]
 8006172:	4611      	mov	r1, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	440a      	add	r2, r1
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	75fa      	strb	r2, [r7, #23]
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4413      	add	r3, r2
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e8      	bne.n	8006166 <USBD_GetString+0x4e>
    }
  }
}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_GetLen>:

static uint8_t USBD_GetLen(uint8_t *buf){
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  while (*buf != '\0')
 80061a8:	e005      	b.n	80061b6 <USBD_GetLen+0x1a>
  {
    len++;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	3301      	adds	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3301      	adds	r3, #1
 80061b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f5      	bne.n	80061aa <USBD_GetLen+0xe>
  }
  return len;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
	...

080061cc <USBD_FS_DeviceDescriptor>:

__ALIGN_BEGIN uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] __ALIGN_END = {
  USB_SIZ_STRING_SERIAL,
  USB_DESC_TYPE_STRING,
};
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2212      	movs	r2, #18
 80061dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80061de:	4b03      	ldr	r3, [pc, #12]	; (80061ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000028 	.word	0x20000028

080061f0 <USBD_FS_LangIDStrDescriptor>:

uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2204      	movs	r2, #4
 8006200:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006202:	4b03      	ldr	r3, [pc, #12]	; (8006210 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	2000003c 	.word	0x2000003c

08006214 <USBD_FS_ProductStrDescriptor>:

uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	4904      	ldr	r1, [pc, #16]	; (8006234 <USBD_FS_ProductStrDescriptor+0x20>)
 8006224:	4804      	ldr	r0, [pc, #16]	; (8006238 <USBD_FS_ProductStrDescriptor+0x24>)
 8006226:	f7ff ff77 	bl	8006118 <USBD_GetString>
  return USBD_StrDesc;
 800622a:	4b02      	ldr	r3, [pc, #8]	; (8006234 <USBD_FS_ProductStrDescriptor+0x20>)
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	2000074c 	.word	0x2000074c
 8006238:	08006850 	.word	0x08006850

0800623c <USBD_FS_ManufacturerStrDescriptor>:

uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	4904      	ldr	r1, [pc, #16]	; (800625c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800624c:	4804      	ldr	r0, [pc, #16]	; (8006260 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800624e:	f7ff ff63 	bl	8006118 <USBD_GetString>
  return USBD_StrDesc;
 8006252:	4b02      	ldr	r3, [pc, #8]	; (800625c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	2000074c 	.word	0x2000074c
 8006260:	08006868 	.word	0x08006868

08006264 <USBD_FS_SerialStrDescriptor>:

uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	221a      	movs	r2, #26
 8006274:	801a      	strh	r2, [r3, #0]
  Get_SerialNum();
 8006276:	f000 f82f 	bl	80062d8 <Get_SerialNum>
  return (uint8_t *) USBD_StringSerial;
 800627a:	4b02      	ldr	r3, [pc, #8]	; (8006284 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000040 	.word	0x20000040

08006288 <USBD_FS_ConfigStrDescriptor>:

uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	6039      	str	r1, [r7, #0]
 8006292:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	4904      	ldr	r1, [pc, #16]	; (80062a8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006298:	4804      	ldr	r0, [pc, #16]	; (80062ac <USBD_FS_ConfigStrDescriptor+0x24>)
 800629a:	f7ff ff3d 	bl	8006118 <USBD_GetString>
  return USBD_StrDesc;
 800629e:	4b02      	ldr	r3, [pc, #8]	; (80062a8 <USBD_FS_ConfigStrDescriptor+0x20>)
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2000074c 	.word	0x2000074c
 80062ac:	0800687c 	.word	0x0800687c

080062b0 <USBD_FS_InterfaceStrDescriptor>:

uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length){
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	4904      	ldr	r1, [pc, #16]	; (80062d0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80062c0:	4804      	ldr	r0, [pc, #16]	; (80062d4 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80062c2:	f7ff ff29 	bl	8006118 <USBD_GetString>
  return USBD_StrDesc;
 80062c6:	4b02      	ldr	r3, [pc, #8]	; (80062d0 <USBD_FS_InterfaceStrDescriptor+0x20>)
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	2000074c 	.word	0x2000074c
 80062d4:	08006888 	.word	0x08006888

080062d8 <Get_SerialNum>:

static void Get_SerialNum(void){
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <Get_SerialNum+0x44>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <Get_SerialNum+0x48>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80062ea:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <Get_SerialNum+0x4c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  if (deviceserial0 != 0)  {
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80062fe:	2208      	movs	r2, #8
 8006300:	4909      	ldr	r1, [pc, #36]	; (8006328 <Get_SerialNum+0x50>)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f814 	bl	8006330 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006308:	2204      	movs	r2, #4
 800630a:	4908      	ldr	r1, [pc, #32]	; (800632c <Get_SerialNum+0x54>)
 800630c:	68b8      	ldr	r0, [r7, #8]
 800630e:	f000 f80f 	bl	8006330 <IntToUnicode>
  }
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	1ffff7e8 	.word	0x1ffff7e8
 8006320:	1ffff7ec 	.word	0x1ffff7ec
 8006324:	1ffff7f0 	.word	0x1ffff7f0
 8006328:	20000042 	.word	0x20000042
 800632c:	20000052 	.word	0x20000052

08006330 <IntToUnicode>:

static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len){
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
  for (idx = 0; idx < len; idx++)  {
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
 8006346:	e027      	b.n	8006398 <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA)    {
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	0f1b      	lsrs	r3, r3, #28
 800634c:	2b09      	cmp	r3, #9
 800634e:	d80b      	bhi.n	8006368 <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	0f1b      	lsrs	r3, r3, #28
 8006354:	b2da      	uxtb	r2, r3
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4619      	mov	r1, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	440b      	add	r3, r1
 8006360:	3230      	adds	r2, #48	; 0x30
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e00a      	b.n	800637e <IntToUnicode+0x4e>
    }
    else    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	0f1b      	lsrs	r3, r3, #28
 800636c:	b2da      	uxtb	r2, r3
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4619      	mov	r1, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	440b      	add	r3, r1
 8006378:	3237      	adds	r2, #55	; 0x37
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
    }
    value = value << 4;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
    pbuf[2 * idx + 1] = 0;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	3301      	adds	r3, #1
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)  {
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	3301      	adds	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
 8006398:	7dfa      	ldrb	r2, [r7, #23]
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	429a      	cmp	r2, r3
 800639e:	d3d3      	bcc.n	8006348 <IntToUnicode+0x18>
  }
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <USBD_HID_Init>:
	0x19, 0x00,                    /*   USAGE_MINIMUM (Reserved (no event indicated))*/
	0x29, 0x65,                    /*   USAGE_MAXIMUM (Keyboard Application)*/
	0x81, 0x00,                    /*   INPUT (Data,Ary,Abs)*/
	0xc0                           /* END_COLLECTION*/
};
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80063b8:	2304      	movs	r3, #4
 80063ba:	2203      	movs	r2, #3
 80063bc:	2181      	movs	r1, #129	; 0x81
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff f823 	bl	800540a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80063ca:	2010      	movs	r0, #16
 80063cc:	f7ff f932 	bl	8005634 <USBD_static_malloc>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80063e2:	2302      	movs	r3, #2
 80063e4:	e005      	b.n	80063f2 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	2200      	movs	r2, #0
 80063ee:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_HID_DeInit>:

static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006406:	2181      	movs	r1, #129	; 0x81
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff f824 	bl	8005456 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <USBD_HID_DeInit+0x2c>
  {
    pdev->pClassData = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_HID_Setup>:

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006440:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800645a:	2b00      	cmp	r3, #0
 800645c:	d045      	beq.n	80064ea <USBD_HID_Setup+0xba>
 800645e:	2b20      	cmp	r3, #32
 8006460:	f040 80d3 	bne.w	800660a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	3b02      	subs	r3, #2
 800646a:	2b09      	cmp	r3, #9
 800646c:	d835      	bhi.n	80064da <USBD_HID_Setup+0xaa>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <USBD_HID_Setup+0x44>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064cb 	.word	0x080064cb
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064db 	.word	0x080064db
 8006480:	080064db 	.word	0x080064db
 8006484:	080064db 	.word	0x080064db
 8006488:	080064db 	.word	0x080064db
 800648c:	080064db 	.word	0x080064db
 8006490:	080064db 	.word	0x080064db
 8006494:	080064b9 	.word	0x080064b9
 8006498:	0800649d 	.word	0x0800649d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	885b      	ldrh	r3, [r3, #2]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	601a      	str	r2, [r3, #0]
          break;
 80064a8:	e01e      	b.n	80064e8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2201      	movs	r2, #1
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f92f 	bl	8006714 <USBD_CtlSendData>
          break;
 80064b6:	e017      	b.n	80064e8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	885b      	ldrh	r3, [r3, #2]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	605a      	str	r2, [r3, #4]
          break;
 80064c8:	e00e      	b.n	80064e8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3304      	adds	r3, #4
 80064ce:	2201      	movs	r2, #1
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f91e 	bl	8006714 <USBD_CtlSendData>
          break;
 80064d8:	e006      	b.n	80064e8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fdce 	bl	800607e <USBD_CtlError>
          ret = USBD_FAIL;
 80064e2:	2302      	movs	r3, #2
 80064e4:	75fb      	strb	r3, [r7, #23]
          break;
 80064e6:	bf00      	nop
      }
      break;
 80064e8:	e096      	b.n	8006618 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b0b      	cmp	r3, #11
 80064f0:	f200 8083 	bhi.w	80065fa <USBD_HID_Setup+0x1ca>
 80064f4:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <USBD_HID_Setup+0xcc>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	080065fb 	.word	0x080065fb
 8006504:	080065fb 	.word	0x080065fb
 8006508:	080065fb 	.word	0x080065fb
 800650c:	080065fb 	.word	0x080065fb
 8006510:	080065fb 	.word	0x080065fb
 8006514:	08006555 	.word	0x08006555
 8006518:	080065fb 	.word	0x080065fb
 800651c:	080065fb 	.word	0x080065fb
 8006520:	080065fb 	.word	0x080065fb
 8006524:	080065ad 	.word	0x080065ad
 8006528:	080065d5 	.word	0x080065d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006532:	2b03      	cmp	r3, #3
 8006534:	d107      	bne.n	8006546 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006536:	f107 030e 	add.w	r3, r7, #14
 800653a:	2202      	movs	r2, #2
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8e8 	bl	8006714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006544:	e060      	b.n	8006608 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fd98 	bl	800607e <USBD_CtlError>
            ret = USBD_FAIL;
 800654e:	2302      	movs	r3, #2
 8006550:	75fb      	strb	r3, [r7, #23]
          break;
 8006552:	e059      	b.n	8006608 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	885b      	ldrh	r3, [r3, #2]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b22      	cmp	r3, #34	; 0x22
 800655e:	d108      	bne.n	8006572 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	88db      	ldrh	r3, [r3, #6]
 8006564:	2b3f      	cmp	r3, #63	; 0x3f
 8006566:	bf28      	it	cs
 8006568:	233f      	movcs	r3, #63	; 0x3f
 800656a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800656c:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <USBD_HID_Setup+0x1f4>)
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e015      	b.n	800659e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b21      	cmp	r3, #33	; 0x21
 800657c:	d108      	bne.n	8006590 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800657e:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <USBD_HID_Setup+0x1f8>)
 8006580:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	2b09      	cmp	r3, #9
 8006588:	bf28      	it	cs
 800658a:	2309      	movcs	r3, #9
 800658c:	83fb      	strh	r3, [r7, #30]
 800658e:	e006      	b.n	800659e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fd73 	bl	800607e <USBD_CtlError>
            ret = USBD_FAIL;
 8006598:	2302      	movs	r3, #2
 800659a:	75fb      	strb	r3, [r7, #23]
            break;
 800659c:	e034      	b.n	8006608 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800659e:	8bfb      	ldrh	r3, [r7, #30]
 80065a0:	461a      	mov	r2, r3
 80065a2:	69b9      	ldr	r1, [r7, #24]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f8b5 	bl	8006714 <USBD_CtlSendData>
          break;
 80065aa:	e02d      	b.n	8006608 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d107      	bne.n	80065c6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	3308      	adds	r3, #8
 80065ba:	2201      	movs	r2, #1
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8a8 	bl	8006714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065c4:	e020      	b.n	8006608 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fd58 	bl	800607e <USBD_CtlError>
            ret = USBD_FAIL;
 80065ce:	2302      	movs	r3, #2
 80065d0:	75fb      	strb	r3, [r7, #23]
          break;
 80065d2:	e019      	b.n	8006608 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d106      	bne.n	80065ec <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ea:	e00d      	b.n	8006608 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fd45 	bl	800607e <USBD_CtlError>
            ret = USBD_FAIL;
 80065f4:	2302      	movs	r3, #2
 80065f6:	75fb      	strb	r3, [r7, #23]
          break;
 80065f8:	e006      	b.n	8006608 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fd3e 	bl	800607e <USBD_CtlError>
          ret = USBD_FAIL;
 8006602:	2302      	movs	r3, #2
 8006604:	75fb      	strb	r3, [r7, #23]
          break;
 8006606:	bf00      	nop
      }
      break;
 8006608:	e006      	b.n	8006618 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fd36 	bl	800607e <USBD_CtlError>
      ret = USBD_FAIL;
 8006612:	2302      	movs	r3, #2
 8006614:	75fb      	strb	r3, [r7, #23]
      break;
 8006616:	bf00      	nop
  }

  return ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000118 	.word	0x20000118
 8006628:	20000100 	.word	0x20000100

0800662c <USBD_HID_SendReport>:

uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len){
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006640:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006648:	2b03      	cmp	r3, #3
 800664a:	d10c      	bne.n	8006666 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	7b1b      	ldrb	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d108      	bne.n	8006666 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2201      	movs	r2, #1
 8006658:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	2181      	movs	r1, #129	; 0x81
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7fe ffa0 	bl	80055a6 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_HID_GetFSCfgDesc>:

static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length){
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2222      	movs	r2, #34	; 0x22
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000094 	.word	0x20000094

08006690 <USBD_HID_GetHSCfgDesc>:

static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length){
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2222      	movs	r2, #34	; 0x22
 800669c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	200000b8 	.word	0x200000b8

080066b0 <USBD_HID_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length){
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2222      	movs	r2, #34	; 0x22
 80066bc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	200000dc 	.word	0x200000dc

080066d0 <USBD_HID_DataIn>:

static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum){
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e2:	2200      	movs	r2, #0
 80066e4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
	...

080066f4 <USBD_HID_GetDeviceQualifierDesc>:

static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length){
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	220a      	movs	r2, #10
 8006700:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006702:	4b03      	ldr	r3, [pc, #12]	; (8006710 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	2000010c 	.word	0x2000010c

08006714 <USBD_CtlSendData>:

USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2202      	movs	r2, #2
 8006726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006730:	88fa      	ldrh	r2, [r7, #6]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	2100      	movs	r1, #0
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7fe ff32 	bl	80055a6 <USBD_LL_Transmit>
  return USBD_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBD_CtlContinueSendData>:

USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	2100      	movs	r1, #0
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7fe ff20 	bl	80055a6 <USBD_LL_Transmit>
  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_CtlContinueRx>:

USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint16_t len){
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	2100      	movs	r1, #0
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7fe ff31 	bl	80055ec <USBD_LL_PrepareReceive>
  return USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_CtlSendStatus>:

USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev){
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2204      	movs	r2, #4
 80067a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067a4:	2300      	movs	r3, #0
 80067a6:	2200      	movs	r2, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fe fefb 	bl	80055a6 <USBD_LL_Transmit>
  return USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_CtlReceiveStatus>:

USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev){
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2205      	movs	r2, #5
 80067c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067ca:	2300      	movs	r3, #0
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fe ff0b 	bl	80055ec <USBD_LL_PrepareReceive>
  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <__libc_init_array>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	2600      	movs	r6, #0
 80067e4:	4d0c      	ldr	r5, [pc, #48]	; (8006818 <__libc_init_array+0x38>)
 80067e6:	4c0d      	ldr	r4, [pc, #52]	; (800681c <__libc_init_array+0x3c>)
 80067e8:	1b64      	subs	r4, r4, r5
 80067ea:	10a4      	asrs	r4, r4, #2
 80067ec:	42a6      	cmp	r6, r4
 80067ee:	d109      	bne.n	8006804 <__libc_init_array+0x24>
 80067f0:	f000 f822 	bl	8006838 <_init>
 80067f4:	2600      	movs	r6, #0
 80067f6:	4d0a      	ldr	r5, [pc, #40]	; (8006820 <__libc_init_array+0x40>)
 80067f8:	4c0a      	ldr	r4, [pc, #40]	; (8006824 <__libc_init_array+0x44>)
 80067fa:	1b64      	subs	r4, r4, r5
 80067fc:	10a4      	asrs	r4, r4, #2
 80067fe:	42a6      	cmp	r6, r4
 8006800:	d105      	bne.n	800680e <__libc_init_array+0x2e>
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	f855 3b04 	ldr.w	r3, [r5], #4
 8006808:	4798      	blx	r3
 800680a:	3601      	adds	r6, #1
 800680c:	e7ee      	b.n	80067ec <__libc_init_array+0xc>
 800680e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006812:	4798      	blx	r3
 8006814:	3601      	adds	r6, #1
 8006816:	e7f2      	b.n	80067fe <__libc_init_array+0x1e>
 8006818:	080068bc 	.word	0x080068bc
 800681c:	080068bc 	.word	0x080068bc
 8006820:	080068bc 	.word	0x080068bc
 8006824:	080068c0 	.word	0x080068c0

08006828 <memset>:
 8006828:	4603      	mov	r3, r0
 800682a:	4402      	add	r2, r0
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	f803 1b01 	strb.w	r1, [r3], #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr
